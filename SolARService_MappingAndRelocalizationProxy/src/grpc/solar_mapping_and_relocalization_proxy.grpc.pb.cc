// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: solar_mapping_and_relocalization_proxy.proto

#include "solar_mapping_and_relocalization_proxy.pb.h"
#include "solar_mapping_and_relocalization_proxy.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace com {
namespace bcom {
namespace solar {
namespace gprc {

static const char* SolARMappingAndRelocalizationProxy_method_names[] = {
  "/com.bcom.solar.gprc.SolARMappingAndRelocalizationProxy/Init",
  "/com.bcom.solar.gprc.SolARMappingAndRelocalizationProxy/Start",
  "/com.bcom.solar.gprc.SolARMappingAndRelocalizationProxy/Stop",
  "/com.bcom.solar.gprc.SolARMappingAndRelocalizationProxy/SetCameraParameters",
  "/com.bcom.solar.gprc.SolARMappingAndRelocalizationProxy/SetCameraParametersStereo",
  "/com.bcom.solar.gprc.SolARMappingAndRelocalizationProxy/setRectificationParameters",
  "/com.bcom.solar.gprc.SolARMappingAndRelocalizationProxy/RelocalizeAndMap",
  "/com.bcom.solar.gprc.SolARMappingAndRelocalizationProxy/RelocalizeAndMapGroundTruth",
  "/com.bcom.solar.gprc.SolARMappingAndRelocalizationProxy/Get3DTransform",
  "/com.bcom.solar.gprc.SolARMappingAndRelocalizationProxy/Reset",
  "/com.bcom.solar.gprc.SolARMappingAndRelocalizationProxy/SendMessage",
};

std::unique_ptr< SolARMappingAndRelocalizationProxy::Stub> SolARMappingAndRelocalizationProxy::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SolARMappingAndRelocalizationProxy::Stub> stub(new SolARMappingAndRelocalizationProxy::Stub(channel, options));
  return stub;
}

SolARMappingAndRelocalizationProxy::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Init_(SolARMappingAndRelocalizationProxy_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Start_(SolARMappingAndRelocalizationProxy_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(SolARMappingAndRelocalizationProxy_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCameraParameters_(SolARMappingAndRelocalizationProxy_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCameraParametersStereo_(SolARMappingAndRelocalizationProxy_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setRectificationParameters_(SolARMappingAndRelocalizationProxy_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RelocalizeAndMap_(SolARMappingAndRelocalizationProxy_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RelocalizeAndMapGroundTruth_(SolARMappingAndRelocalizationProxy_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get3DTransform_(SolARMappingAndRelocalizationProxy_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_(SolARMappingAndRelocalizationProxy_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMessage_(SolARMappingAndRelocalizationProxy_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SolARMappingAndRelocalizationProxy::Stub::Init(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::PipelineModeValue& request, ::com::bcom::solar::gprc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::bcom::solar::gprc::PipelineModeValue, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Init_, context, request, response);
}

void SolARMappingAndRelocalizationProxy::Stub::async::Init(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::PipelineModeValue* request, ::com::bcom::solar::gprc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::bcom::solar::gprc::PipelineModeValue, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, std::move(f));
}

void SolARMappingAndRelocalizationProxy::Stub::async::Init(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::PipelineModeValue* request, ::com::bcom::solar::gprc::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::PipelineModeValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::PipelineModeValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::PipelineModeValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SolARMappingAndRelocalizationProxy::Stub::Start(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty& request, ::com::bcom::solar::gprc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Start_, context, request, response);
}

void SolARMappingAndRelocalizationProxy::Stub::async::Start(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty* request, ::com::bcom::solar::gprc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, std::move(f));
}

void SolARMappingAndRelocalizationProxy::Stub::async::Start(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty* request, ::com::bcom::solar::gprc::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::AsyncStartRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SolARMappingAndRelocalizationProxy::Stub::Stop(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty& request, ::com::bcom::solar::gprc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void SolARMappingAndRelocalizationProxy::Stub::async::Stop(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty* request, ::com::bcom::solar::gprc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void SolARMappingAndRelocalizationProxy::Stub::async::Stop(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty* request, ::com::bcom::solar::gprc::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SolARMappingAndRelocalizationProxy::Stub::SetCameraParameters(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::CameraParameters& request, ::com::bcom::solar::gprc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::bcom::solar::gprc::CameraParameters, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCameraParameters_, context, request, response);
}

void SolARMappingAndRelocalizationProxy::Stub::async::SetCameraParameters(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::CameraParameters* request, ::com::bcom::solar::gprc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::bcom::solar::gprc::CameraParameters, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCameraParameters_, context, request, response, std::move(f));
}

void SolARMappingAndRelocalizationProxy::Stub::async::SetCameraParameters(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::CameraParameters* request, ::com::bcom::solar::gprc::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCameraParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::PrepareAsyncSetCameraParametersRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::CameraParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::CameraParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCameraParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::AsyncSetCameraParametersRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::CameraParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCameraParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SolARMappingAndRelocalizationProxy::Stub::SetCameraParametersStereo(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::CameraParametersStereo& request, ::com::bcom::solar::gprc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::bcom::solar::gprc::CameraParametersStereo, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCameraParametersStereo_, context, request, response);
}

void SolARMappingAndRelocalizationProxy::Stub::async::SetCameraParametersStereo(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::CameraParametersStereo* request, ::com::bcom::solar::gprc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::bcom::solar::gprc::CameraParametersStereo, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCameraParametersStereo_, context, request, response, std::move(f));
}

void SolARMappingAndRelocalizationProxy::Stub::async::SetCameraParametersStereo(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::CameraParametersStereo* request, ::com::bcom::solar::gprc::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCameraParametersStereo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::PrepareAsyncSetCameraParametersStereoRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::CameraParametersStereo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::CameraParametersStereo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCameraParametersStereo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::AsyncSetCameraParametersStereoRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::CameraParametersStereo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCameraParametersStereoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SolARMappingAndRelocalizationProxy::Stub::setRectificationParameters(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::RectificationParameters& request, ::com::bcom::solar::gprc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::bcom::solar::gprc::RectificationParameters, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setRectificationParameters_, context, request, response);
}

void SolARMappingAndRelocalizationProxy::Stub::async::setRectificationParameters(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::RectificationParameters* request, ::com::bcom::solar::gprc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::bcom::solar::gprc::RectificationParameters, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setRectificationParameters_, context, request, response, std::move(f));
}

void SolARMappingAndRelocalizationProxy::Stub::async::setRectificationParameters(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::RectificationParameters* request, ::com::bcom::solar::gprc::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setRectificationParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::PrepareAsyncsetRectificationParametersRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::RectificationParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::RectificationParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setRectificationParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::AsyncsetRectificationParametersRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::RectificationParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetRectificationParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SolARMappingAndRelocalizationProxy::Stub::RelocalizeAndMap(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Frames& request, ::com::bcom::solar::gprc::RelocalizationResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::bcom::solar::gprc::Frames, ::com::bcom::solar::gprc::RelocalizationResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RelocalizeAndMap_, context, request, response);
}

void SolARMappingAndRelocalizationProxy::Stub::async::RelocalizeAndMap(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Frames* request, ::com::bcom::solar::gprc::RelocalizationResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::bcom::solar::gprc::Frames, ::com::bcom::solar::gprc::RelocalizationResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RelocalizeAndMap_, context, request, response, std::move(f));
}

void SolARMappingAndRelocalizationProxy::Stub::async::RelocalizeAndMap(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Frames* request, ::com::bcom::solar::gprc::RelocalizationResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RelocalizeAndMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::RelocalizationResult>* SolARMappingAndRelocalizationProxy::Stub::PrepareAsyncRelocalizeAndMapRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Frames& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::bcom::solar::gprc::RelocalizationResult, ::com::bcom::solar::gprc::Frames, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RelocalizeAndMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::RelocalizationResult>* SolARMappingAndRelocalizationProxy::Stub::AsyncRelocalizeAndMapRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Frames& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRelocalizeAndMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SolARMappingAndRelocalizationProxy::Stub::RelocalizeAndMapGroundTruth(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::GroundTruthFrames& request, ::com::bcom::solar::gprc::RelocalizationResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::bcom::solar::gprc::GroundTruthFrames, ::com::bcom::solar::gprc::RelocalizationResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RelocalizeAndMapGroundTruth_, context, request, response);
}

void SolARMappingAndRelocalizationProxy::Stub::async::RelocalizeAndMapGroundTruth(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::GroundTruthFrames* request, ::com::bcom::solar::gprc::RelocalizationResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::bcom::solar::gprc::GroundTruthFrames, ::com::bcom::solar::gprc::RelocalizationResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RelocalizeAndMapGroundTruth_, context, request, response, std::move(f));
}

void SolARMappingAndRelocalizationProxy::Stub::async::RelocalizeAndMapGroundTruth(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::GroundTruthFrames* request, ::com::bcom::solar::gprc::RelocalizationResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RelocalizeAndMapGroundTruth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::RelocalizationResult>* SolARMappingAndRelocalizationProxy::Stub::PrepareAsyncRelocalizeAndMapGroundTruthRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::GroundTruthFrames& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::bcom::solar::gprc::RelocalizationResult, ::com::bcom::solar::gprc::GroundTruthFrames, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RelocalizeAndMapGroundTruth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::RelocalizationResult>* SolARMappingAndRelocalizationProxy::Stub::AsyncRelocalizeAndMapGroundTruthRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::GroundTruthFrames& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRelocalizeAndMapGroundTruthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SolARMappingAndRelocalizationProxy::Stub::Get3DTransform(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty& request, ::com::bcom::solar::gprc::RelocalizationResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::RelocalizationResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get3DTransform_, context, request, response);
}

void SolARMappingAndRelocalizationProxy::Stub::async::Get3DTransform(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty* request, ::com::bcom::solar::gprc::RelocalizationResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::RelocalizationResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get3DTransform_, context, request, response, std::move(f));
}

void SolARMappingAndRelocalizationProxy::Stub::async::Get3DTransform(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty* request, ::com::bcom::solar::gprc::RelocalizationResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get3DTransform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::RelocalizationResult>* SolARMappingAndRelocalizationProxy::Stub::PrepareAsyncGet3DTransformRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::bcom::solar::gprc::RelocalizationResult, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get3DTransform_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::RelocalizationResult>* SolARMappingAndRelocalizationProxy::Stub::AsyncGet3DTransformRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGet3DTransformRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SolARMappingAndRelocalizationProxy::Stub::Reset(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty& request, ::com::bcom::solar::gprc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Reset_, context, request, response);
}

void SolARMappingAndRelocalizationProxy::Stub::async::Reset(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty* request, ::com::bcom::solar::gprc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void SolARMappingAndRelocalizationProxy::Stub::async::Reset(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty* request, ::com::bcom::solar::gprc::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Reset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::AsyncResetRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SolARMappingAndRelocalizationProxy::Stub::SendMessage(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Message& request, ::com::bcom::solar::gprc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::bcom::solar::gprc::Message, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void SolARMappingAndRelocalizationProxy::Stub::async::SendMessage(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Message* request, ::com::bcom::solar::gprc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::bcom::solar::gprc::Message, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void SolARMappingAndRelocalizationProxy::Stub::async::SendMessage(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Message* request, ::com::bcom::solar::gprc::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::bcom::solar::gprc::Empty>* SolARMappingAndRelocalizationProxy::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::com::bcom::solar::gprc::Message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

SolARMappingAndRelocalizationProxy::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARMappingAndRelocalizationProxy_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARMappingAndRelocalizationProxy::Service, ::com::bcom::solar::gprc::PipelineModeValue, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARMappingAndRelocalizationProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::bcom::solar::gprc::PipelineModeValue* req,
             ::com::bcom::solar::gprc::Empty* resp) {
               return service->Init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARMappingAndRelocalizationProxy_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARMappingAndRelocalizationProxy::Service, ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARMappingAndRelocalizationProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::bcom::solar::gprc::Empty* req,
             ::com::bcom::solar::gprc::Empty* resp) {
               return service->Start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARMappingAndRelocalizationProxy_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARMappingAndRelocalizationProxy::Service, ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARMappingAndRelocalizationProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::bcom::solar::gprc::Empty* req,
             ::com::bcom::solar::gprc::Empty* resp) {
               return service->Stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARMappingAndRelocalizationProxy_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARMappingAndRelocalizationProxy::Service, ::com::bcom::solar::gprc::CameraParameters, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARMappingAndRelocalizationProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::bcom::solar::gprc::CameraParameters* req,
             ::com::bcom::solar::gprc::Empty* resp) {
               return service->SetCameraParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARMappingAndRelocalizationProxy_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARMappingAndRelocalizationProxy::Service, ::com::bcom::solar::gprc::CameraParametersStereo, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARMappingAndRelocalizationProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::bcom::solar::gprc::CameraParametersStereo* req,
             ::com::bcom::solar::gprc::Empty* resp) {
               return service->SetCameraParametersStereo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARMappingAndRelocalizationProxy_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARMappingAndRelocalizationProxy::Service, ::com::bcom::solar::gprc::RectificationParameters, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARMappingAndRelocalizationProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::bcom::solar::gprc::RectificationParameters* req,
             ::com::bcom::solar::gprc::Empty* resp) {
               return service->setRectificationParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARMappingAndRelocalizationProxy_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARMappingAndRelocalizationProxy::Service, ::com::bcom::solar::gprc::Frames, ::com::bcom::solar::gprc::RelocalizationResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARMappingAndRelocalizationProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::bcom::solar::gprc::Frames* req,
             ::com::bcom::solar::gprc::RelocalizationResult* resp) {
               return service->RelocalizeAndMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARMappingAndRelocalizationProxy_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARMappingAndRelocalizationProxy::Service, ::com::bcom::solar::gprc::GroundTruthFrames, ::com::bcom::solar::gprc::RelocalizationResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARMappingAndRelocalizationProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::bcom::solar::gprc::GroundTruthFrames* req,
             ::com::bcom::solar::gprc::RelocalizationResult* resp) {
               return service->RelocalizeAndMapGroundTruth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARMappingAndRelocalizationProxy_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARMappingAndRelocalizationProxy::Service, ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::RelocalizationResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARMappingAndRelocalizationProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::bcom::solar::gprc::Empty* req,
             ::com::bcom::solar::gprc::RelocalizationResult* resp) {
               return service->Get3DTransform(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARMappingAndRelocalizationProxy_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARMappingAndRelocalizationProxy::Service, ::com::bcom::solar::gprc::Empty, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARMappingAndRelocalizationProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::bcom::solar::gprc::Empty* req,
             ::com::bcom::solar::gprc::Empty* resp) {
               return service->Reset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARMappingAndRelocalizationProxy_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARMappingAndRelocalizationProxy::Service, ::com::bcom::solar::gprc::Message, ::com::bcom::solar::gprc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARMappingAndRelocalizationProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::bcom::solar::gprc::Message* req,
             ::com::bcom::solar::gprc::Empty* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
}

SolARMappingAndRelocalizationProxy::Service::~Service() {
}

::grpc::Status SolARMappingAndRelocalizationProxy::Service::Init(::grpc::ServerContext* context, const ::com::bcom::solar::gprc::PipelineModeValue* request, ::com::bcom::solar::gprc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SolARMappingAndRelocalizationProxy::Service::Start(::grpc::ServerContext* context, const ::com::bcom::solar::gprc::Empty* request, ::com::bcom::solar::gprc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SolARMappingAndRelocalizationProxy::Service::Stop(::grpc::ServerContext* context, const ::com::bcom::solar::gprc::Empty* request, ::com::bcom::solar::gprc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SolARMappingAndRelocalizationProxy::Service::SetCameraParameters(::grpc::ServerContext* context, const ::com::bcom::solar::gprc::CameraParameters* request, ::com::bcom::solar::gprc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SolARMappingAndRelocalizationProxy::Service::SetCameraParametersStereo(::grpc::ServerContext* context, const ::com::bcom::solar::gprc::CameraParametersStereo* request, ::com::bcom::solar::gprc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SolARMappingAndRelocalizationProxy::Service::setRectificationParameters(::grpc::ServerContext* context, const ::com::bcom::solar::gprc::RectificationParameters* request, ::com::bcom::solar::gprc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SolARMappingAndRelocalizationProxy::Service::RelocalizeAndMap(::grpc::ServerContext* context, const ::com::bcom::solar::gprc::Frames* request, ::com::bcom::solar::gprc::RelocalizationResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SolARMappingAndRelocalizationProxy::Service::RelocalizeAndMapGroundTruth(::grpc::ServerContext* context, const ::com::bcom::solar::gprc::GroundTruthFrames* request, ::com::bcom::solar::gprc::RelocalizationResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SolARMappingAndRelocalizationProxy::Service::Get3DTransform(::grpc::ServerContext* context, const ::com::bcom::solar::gprc::Empty* request, ::com::bcom::solar::gprc::RelocalizationResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SolARMappingAndRelocalizationProxy::Service::Reset(::grpc::ServerContext* context, const ::com::bcom::solar::gprc::Empty* request, ::com::bcom::solar::gprc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SolARMappingAndRelocalizationProxy::Service::SendMessage(::grpc::ServerContext* context, const ::com::bcom::solar::gprc::Message* request, ::com::bcom::solar::gprc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace com
}  // namespace bcom
}  // namespace solar
}  // namespace gprc

