// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: solar_mapping_and_relocalization_proxy.proto

#include "solar_mapping_and_relocalization_proxy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace com {
namespace bcom {
namespace solar {
namespace gprc {
constexpr Empty::Empty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EmptyDefaultTypeInternal {
  constexpr EmptyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmptyDefaultTypeInternal _Empty_default_instance_;
constexpr PipelineModeValue::PipelineModeValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipeline_mode_(0)
{}
struct PipelineModeValueDefaultTypeInternal {
  constexpr PipelineModeValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PipelineModeValueDefaultTypeInternal() {}
  union {
    PipelineModeValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PipelineModeValueDefaultTypeInternal _PipelineModeValue_default_instance_;
constexpr Message::Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MessageDefaultTypeInternal {
  constexpr MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageDefaultTypeInternal _Message_default_instance_;
constexpr CameraParameters::CameraParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , intrinsics_(nullptr)
  , distortion_(nullptr)
  , id_(0u)
  , camera_type_(0)

  , width_(0u)
  , height_(0u){}
struct CameraParametersDefaultTypeInternal {
  constexpr CameraParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraParametersDefaultTypeInternal() {}
  union {
    CameraParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraParametersDefaultTypeInternal _CameraParameters_default_instance_;
constexpr CameraParametersStereo::CameraParametersStereo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , intrinsics1_(nullptr)
  , distortion1_(nullptr)
  , intrinsics2_(nullptr)
  , distortion2_(nullptr)
  , id1_(0u)
  , camera_type1_(0)

  , width1_(0u)
  , height1_(0u)
  , id2_(0u)
  , camera_type2_(0)

  , width2_(0u)
  , height2_(0u){}
struct CameraParametersStereoDefaultTypeInternal {
  constexpr CameraParametersStereoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraParametersStereoDefaultTypeInternal() {}
  union {
    CameraParametersStereo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraParametersStereoDefaultTypeInternal _CameraParametersStereo_default_instance_;
constexpr CameraDistortion::CameraDistortion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : k_1_(0)
  , k_2_(0)
  , p_1_(0)
  , p_2_(0)
  , k_3_(0){}
struct CameraDistortionDefaultTypeInternal {
  constexpr CameraDistortionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraDistortionDefaultTypeInternal() {}
  union {
    CameraDistortion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraDistortionDefaultTypeInternal _CameraDistortion_default_instance_;
constexpr RectificationParameters::RectificationParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cam1_rotation_(nullptr)
  , cam1_projection_(nullptr)
  , cam2_rotation_(nullptr)
  , cam2_projection_(nullptr)
  , cam1_stereo_type_(0)

  , cam1_baseline_(0)
  , cam2_stereo_type_(0)

  , cam2_baseline_(0){}
struct RectificationParametersDefaultTypeInternal {
  constexpr RectificationParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RectificationParametersDefaultTypeInternal() {}
  union {
    RectificationParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RectificationParametersDefaultTypeInternal _RectificationParameters_default_instance_;
constexpr RelocalizationResult::RelocalizationResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_(nullptr)
  , pose_status_(0)

  , confidence_(0)
  , mapping_status_(0)
{}
struct RelocalizationResultDefaultTypeInternal {
  constexpr RelocalizationResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelocalizationResultDefaultTypeInternal() {}
  union {
    RelocalizationResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelocalizationResultDefaultTypeInternal _RelocalizationResult_default_instance_;
constexpr Image::Image(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0u)
  , height_(0u)
  , layout_(0)

  , imagecompression_(0)
{}
struct ImageDefaultTypeInternal {
  constexpr ImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageDefaultTypeInternal _Image_default_instance_;
constexpr Frames::Frames(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frames_(){}
struct FramesDefaultTypeInternal {
  constexpr FramesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FramesDefaultTypeInternal() {}
  union {
    Frames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FramesDefaultTypeInternal _Frames_default_instance_;
constexpr Frame::Frame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_(nullptr)
  , pose_(nullptr)
  , timestamp_(PROTOBUF_ULONGLONG(0))
  , sensor_id_(0)
  , fixed_pose_(false){}
struct FrameDefaultTypeInternal {
  constexpr FrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrameDefaultTypeInternal() {}
  union {
    Frame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrameDefaultTypeInternal _Frame_default_instance_;
constexpr Matrix4x4::Matrix4x4(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m11_(0)
  , m12_(0)
  , m13_(0)
  , m14_(0)
  , m21_(0)
  , m22_(0)
  , m23_(0)
  , m24_(0)
  , m31_(0)
  , m32_(0)
  , m33_(0)
  , m34_(0)
  , m41_(0)
  , m42_(0)
  , m43_(0)
  , m44_(0){}
struct Matrix4x4DefaultTypeInternal {
  constexpr Matrix4x4DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Matrix4x4DefaultTypeInternal() {}
  union {
    Matrix4x4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Matrix4x4DefaultTypeInternal _Matrix4x4_default_instance_;
constexpr Matrix3x3::Matrix3x3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m11_(0)
  , m12_(0)
  , m13_(0)
  , m21_(0)
  , m22_(0)
  , m23_(0)
  , m31_(0)
  , m32_(0)
  , m33_(0){}
struct Matrix3x3DefaultTypeInternal {
  constexpr Matrix3x3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Matrix3x3DefaultTypeInternal() {}
  union {
    Matrix3x3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Matrix3x3DefaultTypeInternal _Matrix3x3_default_instance_;
constexpr Matrix3x4::Matrix3x4(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : m11_(0)
  , m12_(0)
  , m13_(0)
  , m14_(0)
  , m21_(0)
  , m22_(0)
  , m23_(0)
  , m24_(0)
  , m31_(0)
  , m32_(0)
  , m33_(0)
  , m34_(0){}
struct Matrix3x4DefaultTypeInternal {
  constexpr Matrix3x4DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Matrix3x4DefaultTypeInternal() {}
  union {
    Matrix3x4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Matrix3x4DefaultTypeInternal _Matrix3x4_default_instance_;
}  // namespace gprc
}  // namespace solar
}  // namespace bcom
}  // namespace com
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::PipelineModeValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::PipelineModeValue, pipeline_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Message, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParameters, name_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParameters, id_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParameters, camera_type_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParameters, width_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParameters, height_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParameters, intrinsics_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParameters, distortion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, name1_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, id1_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, camera_type1_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, width1_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, height1_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, intrinsics1_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, distortion1_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, name2_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, id2_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, camera_type2_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, width2_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, height2_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, intrinsics2_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraParametersStereo, distortion2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraDistortion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraDistortion, k_1_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraDistortion, k_2_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraDistortion, p_1_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraDistortion, p_2_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::CameraDistortion, k_3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::RectificationParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::RectificationParameters, cam1_rotation_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::RectificationParameters, cam1_projection_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::RectificationParameters, cam1_stereo_type_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::RectificationParameters, cam1_baseline_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::RectificationParameters, cam2_rotation_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::RectificationParameters, cam2_projection_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::RectificationParameters, cam2_stereo_type_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::RectificationParameters, cam2_baseline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::RelocalizationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::RelocalizationResult, pose_status_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::RelocalizationResult, pose_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::RelocalizationResult, confidence_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::RelocalizationResult, mapping_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Image, width_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Image, height_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Image, data_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Image, layout_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Image, imagecompression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Frames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Frames, frames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Frame, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Frame, image_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Frame, timestamp_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Frame, pose_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Frame, fixed_pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m11_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m12_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m13_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m14_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m21_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m22_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m23_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m24_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m31_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m32_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m33_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m34_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m41_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m42_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m43_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix4x4, m44_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x3, m11_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x3, m12_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x3, m13_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x3, m21_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x3, m22_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x3, m23_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x3, m31_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x3, m32_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x3, m33_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x4, m11_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x4, m12_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x4, m13_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x4, m14_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x4, m21_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x4, m22_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x4, m23_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x4, m24_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x4, m31_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x4, m32_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x4, m33_),
  PROTOBUF_FIELD_OFFSET(::com::bcom::solar::gprc::Matrix3x4, m34_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::bcom::solar::gprc::Empty)},
  { 5, -1, sizeof(::com::bcom::solar::gprc::PipelineModeValue)},
  { 11, -1, sizeof(::com::bcom::solar::gprc::Message)},
  { 17, -1, sizeof(::com::bcom::solar::gprc::CameraParameters)},
  { 29, -1, sizeof(::com::bcom::solar::gprc::CameraParametersStereo)},
  { 48, -1, sizeof(::com::bcom::solar::gprc::CameraDistortion)},
  { 58, -1, sizeof(::com::bcom::solar::gprc::RectificationParameters)},
  { 71, -1, sizeof(::com::bcom::solar::gprc::RelocalizationResult)},
  { 80, -1, sizeof(::com::bcom::solar::gprc::Image)},
  { 90, -1, sizeof(::com::bcom::solar::gprc::Frames)},
  { 96, -1, sizeof(::com::bcom::solar::gprc::Frame)},
  { 106, -1, sizeof(::com::bcom::solar::gprc::Matrix4x4)},
  { 127, -1, sizeof(::com::bcom::solar::gprc::Matrix3x3)},
  { 141, -1, sizeof(::com::bcom::solar::gprc::Matrix3x4)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::bcom::solar::gprc::_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::bcom::solar::gprc::_PipelineModeValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::bcom::solar::gprc::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::bcom::solar::gprc::_CameraParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::bcom::solar::gprc::_CameraParametersStereo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::bcom::solar::gprc::_CameraDistortion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::bcom::solar::gprc::_RectificationParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::bcom::solar::gprc::_RelocalizationResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::bcom::solar::gprc::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::bcom::solar::gprc::_Frames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::bcom::solar::gprc::_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::bcom::solar::gprc::_Matrix4x4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::bcom::solar::gprc::_Matrix3x3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::bcom::solar::gprc::_Matrix3x4_default_instance_),
};

const char descriptor_table_protodef_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,solar_mapping_and_relocalization_proxy"
  ".proto\022\023com.bcom.solar.gprc\"\007\n\005Empty\"M\n\021"
  "PipelineModeValue\0228\n\rpipeline_mode\030\001 \001(\016"
  "2!.com.bcom.solar.gprc.PipelineMode\"\032\n\007M"
  "essage\022\017\n\007message\030\001 \001(\t\"\360\001\n\020CameraParame"
  "ters\022\014\n\004name\030\001 \001(\t\022\n\n\002id\030\002 \001(\r\0224\n\013camera"
  "_type\030\003 \001(\0162\037.com.bcom.solar.gprc.Camera"
  "Type\022\r\n\005width\030\004 \001(\r\022\016\n\006height\030\005 \001(\r\0222\n\ni"
  "ntrinsics\030\006 \001(\0132\036.com.bcom.solar.gprc.Ma"
  "trix3x3\0229\n\ndistortion\030\007 \001(\0132%.com.bcom.s"
  "olar.gprc.CameraDistortion\"\342\003\n\026CameraPar"
  "ametersStereo\022\r\n\005name1\030\001 \001(\t\022\013\n\003id1\030\002 \001("
  "\r\0225\n\014camera_type1\030\003 \001(\0162\037.com.bcom.solar"
  ".gprc.CameraType\022\016\n\006width1\030\004 \001(\r\022\017\n\007heig"
  "ht1\030\005 \001(\r\0223\n\013intrinsics1\030\006 \001(\0132\036.com.bco"
  "m.solar.gprc.Matrix3x3\022:\n\013distortion1\030\007 "
  "\001(\0132%.com.bcom.solar.gprc.CameraDistorti"
  "on\022\r\n\005name2\030\010 \001(\t\022\013\n\003id2\030\t \001(\r\0225\n\014camera"
  "_type2\030\n \001(\0162\037.com.bcom.solar.gprc.Camer"
  "aType\022\016\n\006width2\030\013 \001(\r\022\017\n\007height2\030\014 \001(\r\0223"
  "\n\013intrinsics2\030\r \001(\0132\036.com.bcom.solar.gpr"
  "c.Matrix3x3\022:\n\013distortion2\030\016 \001(\0132%.com.b"
  "com.solar.gprc.CameraDistortion\"S\n\020Camer"
  "aDistortion\022\013\n\003K_1\030\001 \001(\002\022\013\n\003K_2\030\002 \001(\002\022\013\n"
  "\003P_1\030\003 \001(\002\022\013\n\003P_2\030\004 \001(\002\022\013\n\003K_3\030\005 \001(\002\"\235\003\n"
  "\027RectificationParameters\0225\n\rcam1_rotatio"
  "n\030\001 \001(\0132\036.com.bcom.solar.gprc.Matrix3x3\022"
  "7\n\017cam1_projection\030\002 \001(\0132\036.com.bcom.sola"
  "r.gprc.Matrix3x4\0229\n\020cam1_stereo_type\030\003 \001"
  "(\0162\037.com.bcom.solar.gprc.StereoType\022\025\n\rc"
  "am1_baseline\030\004 \001(\002\0225\n\rcam2_rotation\030\005 \001("
  "\0132\036.com.bcom.solar.gprc.Matrix3x3\0227\n\017cam"
  "2_projection\030\006 \001(\0132\036.com.bcom.solar.gprc"
  ".Matrix3x4\0229\n\020cam2_stereo_type\030\007 \001(\0162\037.c"
  "om.bcom.solar.gprc.StereoType\022\025\n\rcam2_ba"
  "seline\030\010 \001(\002\"\330\001\n\024RelocalizationResult\022B\n"
  "\013pose_status\030\001 \001(\0162-.com.bcom.solar.gprc"
  ".RelocalizationPoseStatus\022,\n\004pose\030\002 \001(\0132"
  "\036.com.bcom.solar.gprc.Matrix4x4\022\022\n\nconfi"
  "dence\030\003 \001(\002\022:\n\016mapping_status\030\004 \001(\0162\".co"
  "m.bcom.solar.gprc.MappingStatus\"\247\001\n\005Imag"
  "e\022\r\n\005width\030\001 \001(\r\022\016\n\006height\030\002 \001(\r\022\014\n\004data"
  "\030\003 \001(\014\0220\n\006layout\030\004 \001(\0162 .com.bcom.solar."
  "gprc.ImageLayout\022\?\n\020imageCompression\030\005 \001"
  "(\0162%.com.bcom.solar.gprc.ImageCompressio"
  "n\"4\n\006Frames\022*\n\006frames\030\001 \003(\0132\032.com.bcom.s"
  "olar.gprc.Frame\"\232\001\n\005Frame\022\021\n\tsensor_id\030\001"
  " \001(\005\022)\n\005image\030\002 \001(\0132\032.com.bcom.solar.gpr"
  "c.Image\022\021\n\ttimestamp\030\003 \001(\004\022,\n\004pose\030\004 \001(\013"
  "2\036.com.bcom.solar.gprc.Matrix4x4\022\022\n\nfixe"
  "d_pose\030\005 \001(\010\"\333\001\n\tMatrix4x4\022\013\n\003m11\030\001 \001(\002\022"
  "\013\n\003m12\030\002 \001(\002\022\013\n\003m13\030\003 \001(\002\022\013\n\003m14\030\004 \001(\002\022\013"
  "\n\003m21\030\005 \001(\002\022\013\n\003m22\030\006 \001(\002\022\013\n\003m23\030\007 \001(\002\022\013\n"
  "\003m24\030\010 \001(\002\022\013\n\003m31\030\t \001(\002\022\013\n\003m32\030\n \001(\002\022\013\n\003"
  "m33\030\013 \001(\002\022\013\n\003m34\030\014 \001(\002\022\013\n\003m41\030\r \001(\002\022\013\n\003m"
  "42\030\016 \001(\002\022\013\n\003m43\030\017 \001(\002\022\013\n\003m44\030\020 \001(\002\"\200\001\n\tM"
  "atrix3x3\022\013\n\003m11\030\001 \001(\002\022\013\n\003m12\030\002 \001(\002\022\013\n\003m1"
  "3\030\003 \001(\002\022\013\n\003m21\030\004 \001(\002\022\013\n\003m22\030\005 \001(\002\022\013\n\003m23"
  "\030\006 \001(\002\022\013\n\003m31\030\007 \001(\002\022\013\n\003m32\030\010 \001(\002\022\013\n\003m33\030"
  "\t \001(\002\"\247\001\n\tMatrix3x4\022\013\n\003m11\030\001 \001(\002\022\013\n\003m12\030"
  "\002 \001(\002\022\013\n\003m13\030\003 \001(\002\022\013\n\003m14\030\004 \001(\002\022\013\n\003m21\030\005"
  " \001(\002\022\013\n\003m22\030\006 \001(\002\022\013\n\003m23\030\007 \001(\002\022\013\n\003m24\030\010 "
  "\001(\002\022\013\n\003m31\030\t \001(\002\022\013\n\003m32\030\n \001(\002\022\013\n\003m33\030\013 \001"
  "(\002\022\013\n\003m34\030\014 \001(\002*G\n\014PipelineMode\022\036\n\032RELOC"
  "ALIZATION_AND_MAPPING\020\000\022\027\n\023RELOCALIZATIO"
  "N_ONLY\020\001*\037\n\nCameraType\022\007\n\003RGB\020\000\022\010\n\004GRAY\020"
  "\001**\n\nStereoType\022\016\n\nHorizontal\020\000\022\014\n\010Verti"
  "cal\020\001*F\n\030RelocalizationPoseStatus\022\013\n\007NO_"
  "POSE\020\000\022\014\n\010NEW_POSE\020\001\022\017\n\013LATEST_POSE\020\002*P\n"
  "\rMappingStatus\022\r\n\tBOOTSTRAP\020\000\022\013\n\007MAPPING"
  "\020\001\022\021\n\rTRACKING_LOST\020\002\022\020\n\014LOOP_CLOSURE\020\003*"
  "2\n\013ImageLayout\022\n\n\006RGB_24\020\000\022\n\n\006GREY_8\020\001\022\013"
  "\n\007GREY_16\020\002*.\n\020ImageCompression\022\010\n\004NONE\020"
  "\000\022\007\n\003PNG\020\001\022\007\n\003JPG\020\0022\330\006\n\"SolARMappingAndR"
  "elocalizationProxy\022J\n\004Init\022&.com.bcom.so"
  "lar.gprc.PipelineModeValue\032\032.com.bcom.so"
  "lar.gprc.Empty\022\?\n\005Start\022\032.com.bcom.solar"
  ".gprc.Empty\032\032.com.bcom.solar.gprc.Empty\022"
  ">\n\004Stop\022\032.com.bcom.solar.gprc.Empty\032\032.co"
  "m.bcom.solar.gprc.Empty\022X\n\023SetCameraPara"
  "meters\022%.com.bcom.solar.gprc.CameraParam"
  "eters\032\032.com.bcom.solar.gprc.Empty\022d\n\031Set"
  "CameraParametersStereo\022+.com.bcom.solar."
  "gprc.CameraParametersStereo\032\032.com.bcom.s"
  "olar.gprc.Empty\022f\n\032setRectificationParam"
  "eters\022,.com.bcom.solar.gprc.Rectificatio"
  "nParameters\032\032.com.bcom.solar.gprc.Empty\022"
  "Z\n\020RelocalizeAndMap\022\033.com.bcom.solar.gpr"
  "c.Frames\032).com.bcom.solar.gprc.Relocaliz"
  "ationResult\022W\n\016Get3DTransform\022\032.com.bcom"
  ".solar.gprc.Empty\032).com.bcom.solar.gprc."
  "RelocalizationResult\022\?\n\005Reset\022\032.com.bcom"
  ".solar.gprc.Empty\032\032.com.bcom.solar.gprc."
  "Empty\022G\n\013SendMessage\022\034.com.bcom.solar.gp"
  "rc.Message\032\032.com.bcom.solar.gprc.Emptyb\006"
  "proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto = {
  false, false, 3806, descriptor_table_protodef_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto, "solar_mapping_and_relocalization_proxy.proto", 
  &descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_once, nullptr, 0, 14,
  schemas, file_default_instances, TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto::offsets,
  file_level_metadata_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto, file_level_enum_descriptors_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto, file_level_service_descriptors_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto);
  return descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto(&descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto);
namespace com {
namespace bcom {
namespace solar {
namespace gprc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PipelineMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto);
  return file_level_enum_descriptors_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto[0];
}
bool PipelineMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto);
  return file_level_enum_descriptors_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto[1];
}
bool CameraType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StereoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto);
  return file_level_enum_descriptors_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto[2];
}
bool StereoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelocalizationPoseStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto);
  return file_level_enum_descriptors_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto[3];
}
bool RelocalizationPoseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MappingStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto);
  return file_level_enum_descriptors_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto[4];
}
bool MappingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageLayout_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto);
  return file_level_enum_descriptors_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto[5];
}
bool ImageLayout_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageCompression_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto);
  return file_level_enum_descriptors_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto[6];
}
bool ImageCompression_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bcom.solar.gprc.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.bcom.solar.gprc.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:com.bcom.solar.gprc.Empty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Empty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Empty::ArenaDtor(void* object) {
  Empty* _this = reinterpret_cast< Empty* >(object);
  (void)_this;
}
void Empty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bcom.solar.gprc.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Empty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Empty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bcom.solar.gprc.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bcom.solar.gprc.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bcom.solar.gprc.Empty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.bcom.solar.gprc.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.bcom.solar.gprc.Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.bcom.solar.gprc.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bcom.solar.gprc.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.bcom.solar.gprc.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bcom.solar.gprc.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PipelineModeValue::_Internal {
 public:
};

PipelineModeValue::PipelineModeValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bcom.solar.gprc.PipelineModeValue)
}
PipelineModeValue::PipelineModeValue(const PipelineModeValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pipeline_mode_ = from.pipeline_mode_;
  // @@protoc_insertion_point(copy_constructor:com.bcom.solar.gprc.PipelineModeValue)
}

void PipelineModeValue::SharedCtor() {
pipeline_mode_ = 0;
}

PipelineModeValue::~PipelineModeValue() {
  // @@protoc_insertion_point(destructor:com.bcom.solar.gprc.PipelineModeValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PipelineModeValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PipelineModeValue::ArenaDtor(void* object) {
  PipelineModeValue* _this = reinterpret_cast< PipelineModeValue* >(object);
  (void)_this;
}
void PipelineModeValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PipelineModeValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PipelineModeValue::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bcom.solar.gprc.PipelineModeValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pipeline_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PipelineModeValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.bcom.solar.gprc.PipelineMode pipeline_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pipeline_mode(static_cast<::com::bcom::solar::gprc::PipelineMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PipelineModeValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bcom.solar.gprc.PipelineModeValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.bcom.solar.gprc.PipelineMode pipeline_mode = 1;
  if (this->pipeline_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pipeline_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bcom.solar.gprc.PipelineModeValue)
  return target;
}

size_t PipelineModeValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bcom.solar.gprc.PipelineModeValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.bcom.solar.gprc.PipelineMode pipeline_mode = 1;
  if (this->pipeline_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pipeline_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PipelineModeValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.bcom.solar.gprc.PipelineModeValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PipelineModeValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PipelineModeValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.bcom.solar.gprc.PipelineModeValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.bcom.solar.gprc.PipelineModeValue)
    MergeFrom(*source);
  }
}

void PipelineModeValue::MergeFrom(const PipelineModeValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bcom.solar.gprc.PipelineModeValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pipeline_mode() != 0) {
    _internal_set_pipeline_mode(from._internal_pipeline_mode());
  }
}

void PipelineModeValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.bcom.solar.gprc.PipelineModeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PipelineModeValue::CopyFrom(const PipelineModeValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bcom.solar.gprc.PipelineModeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipelineModeValue::IsInitialized() const {
  return true;
}

void PipelineModeValue::InternalSwap(PipelineModeValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pipeline_mode_, other->pipeline_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PipelineModeValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Message::_Internal {
 public:
};

Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bcom.solar.gprc.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.bcom.solar.gprc.Message)
}

void Message::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:com.bcom.solar.gprc.Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bcom.solar.gprc.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.bcom.solar.gprc.Message.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bcom.solar.gprc.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.bcom.solar.gprc.Message.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bcom.solar.gprc.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bcom.solar.gprc.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.bcom.solar.gprc.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.bcom.solar.gprc.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.bcom.solar.gprc.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bcom.solar.gprc.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.bcom.solar.gprc.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bcom.solar.gprc.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CameraParameters::_Internal {
 public:
  static const ::com::bcom::solar::gprc::Matrix3x3& intrinsics(const CameraParameters* msg);
  static const ::com::bcom::solar::gprc::CameraDistortion& distortion(const CameraParameters* msg);
};

const ::com::bcom::solar::gprc::Matrix3x3&
CameraParameters::_Internal::intrinsics(const CameraParameters* msg) {
  return *msg->intrinsics_;
}
const ::com::bcom::solar::gprc::CameraDistortion&
CameraParameters::_Internal::distortion(const CameraParameters* msg) {
  return *msg->distortion_;
}
CameraParameters::CameraParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bcom.solar.gprc.CameraParameters)
}
CameraParameters::CameraParameters(const CameraParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_intrinsics()) {
    intrinsics_ = new ::com::bcom::solar::gprc::Matrix3x3(*from.intrinsics_);
  } else {
    intrinsics_ = nullptr;
  }
  if (from._internal_has_distortion()) {
    distortion_ = new ::com::bcom::solar::gprc::CameraDistortion(*from.distortion_);
  } else {
    distortion_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&id_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:com.bcom.solar.gprc.CameraParameters)
}

void CameraParameters::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&intrinsics_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&intrinsics_)) + sizeof(height_));
}

CameraParameters::~CameraParameters() {
  // @@protoc_insertion_point(destructor:com.bcom.solar.gprc.CameraParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete intrinsics_;
  if (this != internal_default_instance()) delete distortion_;
}

void CameraParameters::ArenaDtor(void* object) {
  CameraParameters* _this = reinterpret_cast< CameraParameters* >(object);
  (void)_this;
}
void CameraParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bcom.solar.gprc.CameraParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && intrinsics_ != nullptr) {
    delete intrinsics_;
  }
  intrinsics_ = nullptr;
  if (GetArena() == nullptr && distortion_ != nullptr) {
    delete distortion_;
  }
  distortion_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&id_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.bcom.solar.gprc.CameraParameters.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.CameraType camera_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_camera_type(static_cast<::com::bcom::solar::gprc::CameraType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.Matrix3x3 intrinsics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_intrinsics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.CameraDistortion distortion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_distortion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bcom.solar.gprc.CameraParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.bcom.solar.gprc.CameraParameters.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // .com.bcom.solar.gprc.CameraType camera_type = 3;
  if (this->camera_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_camera_type(), target);
  }

  // uint32 width = 4;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_width(), target);
  }

  // uint32 height = 5;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_height(), target);
  }

  // .com.bcom.solar.gprc.Matrix3x3 intrinsics = 6;
  if (this->has_intrinsics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::intrinsics(this), target, stream);
  }

  // .com.bcom.solar.gprc.CameraDistortion distortion = 7;
  if (this->has_distortion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::distortion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bcom.solar.gprc.CameraParameters)
  return target;
}

size_t CameraParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bcom.solar.gprc.CameraParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .com.bcom.solar.gprc.Matrix3x3 intrinsics = 6;
  if (this->has_intrinsics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intrinsics_);
  }

  // .com.bcom.solar.gprc.CameraDistortion distortion = 7;
  if (this->has_distortion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *distortion_);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .com.bcom.solar.gprc.CameraType camera_type = 3;
  if (this->camera_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_camera_type());
  }

  // uint32 width = 4;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 5;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.bcom.solar.gprc.CameraParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.bcom.solar.gprc.CameraParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.bcom.solar.gprc.CameraParameters)
    MergeFrom(*source);
  }
}

void CameraParameters::MergeFrom(const CameraParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bcom.solar.gprc.CameraParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_intrinsics()) {
    _internal_mutable_intrinsics()->::com::bcom::solar::gprc::Matrix3x3::MergeFrom(from._internal_intrinsics());
  }
  if (from.has_distortion()) {
    _internal_mutable_distortion()->::com::bcom::solar::gprc::CameraDistortion::MergeFrom(from._internal_distortion());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.camera_type() != 0) {
    _internal_set_camera_type(from._internal_camera_type());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void CameraParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.bcom.solar.gprc.CameraParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraParameters::CopyFrom(const CameraParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bcom.solar.gprc.CameraParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraParameters::IsInitialized() const {
  return true;
}

void CameraParameters::InternalSwap(CameraParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraParameters, height_)
      + sizeof(CameraParameters::height_)
      - PROTOBUF_FIELD_OFFSET(CameraParameters, intrinsics_)>(
          reinterpret_cast<char*>(&intrinsics_),
          reinterpret_cast<char*>(&other->intrinsics_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CameraParametersStereo::_Internal {
 public:
  static const ::com::bcom::solar::gprc::Matrix3x3& intrinsics1(const CameraParametersStereo* msg);
  static const ::com::bcom::solar::gprc::CameraDistortion& distortion1(const CameraParametersStereo* msg);
  static const ::com::bcom::solar::gprc::Matrix3x3& intrinsics2(const CameraParametersStereo* msg);
  static const ::com::bcom::solar::gprc::CameraDistortion& distortion2(const CameraParametersStereo* msg);
};

const ::com::bcom::solar::gprc::Matrix3x3&
CameraParametersStereo::_Internal::intrinsics1(const CameraParametersStereo* msg) {
  return *msg->intrinsics1_;
}
const ::com::bcom::solar::gprc::CameraDistortion&
CameraParametersStereo::_Internal::distortion1(const CameraParametersStereo* msg) {
  return *msg->distortion1_;
}
const ::com::bcom::solar::gprc::Matrix3x3&
CameraParametersStereo::_Internal::intrinsics2(const CameraParametersStereo* msg) {
  return *msg->intrinsics2_;
}
const ::com::bcom::solar::gprc::CameraDistortion&
CameraParametersStereo::_Internal::distortion2(const CameraParametersStereo* msg) {
  return *msg->distortion2_;
}
CameraParametersStereo::CameraParametersStereo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bcom.solar.gprc.CameraParametersStereo)
}
CameraParametersStereo::CameraParametersStereo(const CameraParametersStereo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name1().empty()) {
    name1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name1(), 
      GetArena());
  }
  name2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name2().empty()) {
    name2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name2(), 
      GetArena());
  }
  if (from._internal_has_intrinsics1()) {
    intrinsics1_ = new ::com::bcom::solar::gprc::Matrix3x3(*from.intrinsics1_);
  } else {
    intrinsics1_ = nullptr;
  }
  if (from._internal_has_distortion1()) {
    distortion1_ = new ::com::bcom::solar::gprc::CameraDistortion(*from.distortion1_);
  } else {
    distortion1_ = nullptr;
  }
  if (from._internal_has_intrinsics2()) {
    intrinsics2_ = new ::com::bcom::solar::gprc::Matrix3x3(*from.intrinsics2_);
  } else {
    intrinsics2_ = nullptr;
  }
  if (from._internal_has_distortion2()) {
    distortion2_ = new ::com::bcom::solar::gprc::CameraDistortion(*from.distortion2_);
  } else {
    distortion2_ = nullptr;
  }
  ::memcpy(&id1_, &from.id1_,
    static_cast<size_t>(reinterpret_cast<char*>(&height2_) -
    reinterpret_cast<char*>(&id1_)) + sizeof(height2_));
  // @@protoc_insertion_point(copy_constructor:com.bcom.solar.gprc.CameraParametersStereo)
}

void CameraParametersStereo::SharedCtor() {
name1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&intrinsics1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height2_) -
    reinterpret_cast<char*>(&intrinsics1_)) + sizeof(height2_));
}

CameraParametersStereo::~CameraParametersStereo() {
  // @@protoc_insertion_point(destructor:com.bcom.solar.gprc.CameraParametersStereo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraParametersStereo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete intrinsics1_;
  if (this != internal_default_instance()) delete distortion1_;
  if (this != internal_default_instance()) delete intrinsics2_;
  if (this != internal_default_instance()) delete distortion2_;
}

void CameraParametersStereo::ArenaDtor(void* object) {
  CameraParametersStereo* _this = reinterpret_cast< CameraParametersStereo* >(object);
  (void)_this;
}
void CameraParametersStereo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraParametersStereo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraParametersStereo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bcom.solar.gprc.CameraParametersStereo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name1_.ClearToEmpty();
  name2_.ClearToEmpty();
  if (GetArena() == nullptr && intrinsics1_ != nullptr) {
    delete intrinsics1_;
  }
  intrinsics1_ = nullptr;
  if (GetArena() == nullptr && distortion1_ != nullptr) {
    delete distortion1_;
  }
  distortion1_ = nullptr;
  if (GetArena() == nullptr && intrinsics2_ != nullptr) {
    delete intrinsics2_;
  }
  intrinsics2_ = nullptr;
  if (GetArena() == nullptr && distortion2_ != nullptr) {
    delete distortion2_;
  }
  distortion2_ = nullptr;
  ::memset(&id1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height2_) -
      reinterpret_cast<char*>(&id1_)) + sizeof(height2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraParametersStereo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.bcom.solar.gprc.CameraParametersStereo.name1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.CameraType camera_type1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_camera_type1(static_cast<::com::bcom::solar::gprc::CameraType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 width1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          width1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          height1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.Matrix3x3 intrinsics1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_intrinsics1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.CameraDistortion distortion1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_distortion1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_name2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.bcom.solar.gprc.CameraParametersStereo.name2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          id2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.CameraType camera_type2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_camera_type2(static_cast<::com::bcom::solar::gprc::CameraType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 width2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          width2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          height2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.Matrix3x3 intrinsics2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_intrinsics2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.CameraDistortion distortion2 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_distortion2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraParametersStereo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bcom.solar.gprc.CameraParametersStereo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name1 = 1;
  if (this->name1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name1().data(), static_cast<int>(this->_internal_name1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.bcom.solar.gprc.CameraParametersStereo.name1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name1(), target);
  }

  // uint32 id1 = 2;
  if (this->id1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id1(), target);
  }

  // .com.bcom.solar.gprc.CameraType camera_type1 = 3;
  if (this->camera_type1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_camera_type1(), target);
  }

  // uint32 width1 = 4;
  if (this->width1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_width1(), target);
  }

  // uint32 height1 = 5;
  if (this->height1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_height1(), target);
  }

  // .com.bcom.solar.gprc.Matrix3x3 intrinsics1 = 6;
  if (this->has_intrinsics1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::intrinsics1(this), target, stream);
  }

  // .com.bcom.solar.gprc.CameraDistortion distortion1 = 7;
  if (this->has_distortion1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::distortion1(this), target, stream);
  }

  // string name2 = 8;
  if (this->name2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name2().data(), static_cast<int>(this->_internal_name2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.bcom.solar.gprc.CameraParametersStereo.name2");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name2(), target);
  }

  // uint32 id2 = 9;
  if (this->id2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_id2(), target);
  }

  // .com.bcom.solar.gprc.CameraType camera_type2 = 10;
  if (this->camera_type2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_camera_type2(), target);
  }

  // uint32 width2 = 11;
  if (this->width2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_width2(), target);
  }

  // uint32 height2 = 12;
  if (this->height2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_height2(), target);
  }

  // .com.bcom.solar.gprc.Matrix3x3 intrinsics2 = 13;
  if (this->has_intrinsics2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::intrinsics2(this), target, stream);
  }

  // .com.bcom.solar.gprc.CameraDistortion distortion2 = 14;
  if (this->has_distortion2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::distortion2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bcom.solar.gprc.CameraParametersStereo)
  return target;
}

size_t CameraParametersStereo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bcom.solar.gprc.CameraParametersStereo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name1 = 1;
  if (this->name1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name1());
  }

  // string name2 = 8;
  if (this->name2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name2());
  }

  // .com.bcom.solar.gprc.Matrix3x3 intrinsics1 = 6;
  if (this->has_intrinsics1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intrinsics1_);
  }

  // .com.bcom.solar.gprc.CameraDistortion distortion1 = 7;
  if (this->has_distortion1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *distortion1_);
  }

  // .com.bcom.solar.gprc.Matrix3x3 intrinsics2 = 13;
  if (this->has_intrinsics2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intrinsics2_);
  }

  // .com.bcom.solar.gprc.CameraDistortion distortion2 = 14;
  if (this->has_distortion2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *distortion2_);
  }

  // uint32 id1 = 2;
  if (this->id1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id1());
  }

  // .com.bcom.solar.gprc.CameraType camera_type1 = 3;
  if (this->camera_type1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_camera_type1());
  }

  // uint32 width1 = 4;
  if (this->width1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width1());
  }

  // uint32 height1 = 5;
  if (this->height1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height1());
  }

  // uint32 id2 = 9;
  if (this->id2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id2());
  }

  // .com.bcom.solar.gprc.CameraType camera_type2 = 10;
  if (this->camera_type2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_camera_type2());
  }

  // uint32 width2 = 11;
  if (this->width2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width2());
  }

  // uint32 height2 = 12;
  if (this->height2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraParametersStereo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.bcom.solar.gprc.CameraParametersStereo)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraParametersStereo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraParametersStereo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.bcom.solar.gprc.CameraParametersStereo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.bcom.solar.gprc.CameraParametersStereo)
    MergeFrom(*source);
  }
}

void CameraParametersStereo::MergeFrom(const CameraParametersStereo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bcom.solar.gprc.CameraParametersStereo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name1().size() > 0) {
    _internal_set_name1(from._internal_name1());
  }
  if (from.name2().size() > 0) {
    _internal_set_name2(from._internal_name2());
  }
  if (from.has_intrinsics1()) {
    _internal_mutable_intrinsics1()->::com::bcom::solar::gprc::Matrix3x3::MergeFrom(from._internal_intrinsics1());
  }
  if (from.has_distortion1()) {
    _internal_mutable_distortion1()->::com::bcom::solar::gprc::CameraDistortion::MergeFrom(from._internal_distortion1());
  }
  if (from.has_intrinsics2()) {
    _internal_mutable_intrinsics2()->::com::bcom::solar::gprc::Matrix3x3::MergeFrom(from._internal_intrinsics2());
  }
  if (from.has_distortion2()) {
    _internal_mutable_distortion2()->::com::bcom::solar::gprc::CameraDistortion::MergeFrom(from._internal_distortion2());
  }
  if (from.id1() != 0) {
    _internal_set_id1(from._internal_id1());
  }
  if (from.camera_type1() != 0) {
    _internal_set_camera_type1(from._internal_camera_type1());
  }
  if (from.width1() != 0) {
    _internal_set_width1(from._internal_width1());
  }
  if (from.height1() != 0) {
    _internal_set_height1(from._internal_height1());
  }
  if (from.id2() != 0) {
    _internal_set_id2(from._internal_id2());
  }
  if (from.camera_type2() != 0) {
    _internal_set_camera_type2(from._internal_camera_type2());
  }
  if (from.width2() != 0) {
    _internal_set_width2(from._internal_width2());
  }
  if (from.height2() != 0) {
    _internal_set_height2(from._internal_height2());
  }
}

void CameraParametersStereo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.bcom.solar.gprc.CameraParametersStereo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraParametersStereo::CopyFrom(const CameraParametersStereo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bcom.solar.gprc.CameraParametersStereo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraParametersStereo::IsInitialized() const {
  return true;
}

void CameraParametersStereo::InternalSwap(CameraParametersStereo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name1_.Swap(&other->name1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name2_.Swap(&other->name2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraParametersStereo, height2_)
      + sizeof(CameraParametersStereo::height2_)
      - PROTOBUF_FIELD_OFFSET(CameraParametersStereo, intrinsics1_)>(
          reinterpret_cast<char*>(&intrinsics1_),
          reinterpret_cast<char*>(&other->intrinsics1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraParametersStereo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CameraDistortion::_Internal {
 public:
};

CameraDistortion::CameraDistortion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bcom.solar.gprc.CameraDistortion)
}
CameraDistortion::CameraDistortion(const CameraDistortion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&k_1_, &from.k_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&k_3_) -
    reinterpret_cast<char*>(&k_1_)) + sizeof(k_3_));
  // @@protoc_insertion_point(copy_constructor:com.bcom.solar.gprc.CameraDistortion)
}

void CameraDistortion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&k_1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&k_3_) -
    reinterpret_cast<char*>(&k_1_)) + sizeof(k_3_));
}

CameraDistortion::~CameraDistortion() {
  // @@protoc_insertion_point(destructor:com.bcom.solar.gprc.CameraDistortion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraDistortion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CameraDistortion::ArenaDtor(void* object) {
  CameraDistortion* _this = reinterpret_cast< CameraDistortion* >(object);
  (void)_this;
}
void CameraDistortion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraDistortion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraDistortion::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bcom.solar.gprc.CameraDistortion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&k_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k_3_) -
      reinterpret_cast<char*>(&k_1_)) + sizeof(k_3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraDistortion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float K_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          k_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float K_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          k_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float P_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          p_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float P_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          p_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float K_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          k_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraDistortion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bcom.solar.gprc.CameraDistortion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float K_1 = 1;
  if (!(this->k_1() <= 0 && this->k_1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_k_1(), target);
  }

  // float K_2 = 2;
  if (!(this->k_2() <= 0 && this->k_2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_k_2(), target);
  }

  // float P_1 = 3;
  if (!(this->p_1() <= 0 && this->p_1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_p_1(), target);
  }

  // float P_2 = 4;
  if (!(this->p_2() <= 0 && this->p_2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_p_2(), target);
  }

  // float K_3 = 5;
  if (!(this->k_3() <= 0 && this->k_3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_k_3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bcom.solar.gprc.CameraDistortion)
  return target;
}

size_t CameraDistortion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bcom.solar.gprc.CameraDistortion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float K_1 = 1;
  if (!(this->k_1() <= 0 && this->k_1() >= 0)) {
    total_size += 1 + 4;
  }

  // float K_2 = 2;
  if (!(this->k_2() <= 0 && this->k_2() >= 0)) {
    total_size += 1 + 4;
  }

  // float P_1 = 3;
  if (!(this->p_1() <= 0 && this->p_1() >= 0)) {
    total_size += 1 + 4;
  }

  // float P_2 = 4;
  if (!(this->p_2() <= 0 && this->p_2() >= 0)) {
    total_size += 1 + 4;
  }

  // float K_3 = 5;
  if (!(this->k_3() <= 0 && this->k_3() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraDistortion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.bcom.solar.gprc.CameraDistortion)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraDistortion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraDistortion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.bcom.solar.gprc.CameraDistortion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.bcom.solar.gprc.CameraDistortion)
    MergeFrom(*source);
  }
}

void CameraDistortion::MergeFrom(const CameraDistortion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bcom.solar.gprc.CameraDistortion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.k_1() <= 0 && from.k_1() >= 0)) {
    _internal_set_k_1(from._internal_k_1());
  }
  if (!(from.k_2() <= 0 && from.k_2() >= 0)) {
    _internal_set_k_2(from._internal_k_2());
  }
  if (!(from.p_1() <= 0 && from.p_1() >= 0)) {
    _internal_set_p_1(from._internal_p_1());
  }
  if (!(from.p_2() <= 0 && from.p_2() >= 0)) {
    _internal_set_p_2(from._internal_p_2());
  }
  if (!(from.k_3() <= 0 && from.k_3() >= 0)) {
    _internal_set_k_3(from._internal_k_3());
  }
}

void CameraDistortion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.bcom.solar.gprc.CameraDistortion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDistortion::CopyFrom(const CameraDistortion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bcom.solar.gprc.CameraDistortion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDistortion::IsInitialized() const {
  return true;
}

void CameraDistortion::InternalSwap(CameraDistortion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraDistortion, k_3_)
      + sizeof(CameraDistortion::k_3_)
      - PROTOBUF_FIELD_OFFSET(CameraDistortion, k_1_)>(
          reinterpret_cast<char*>(&k_1_),
          reinterpret_cast<char*>(&other->k_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDistortion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RectificationParameters::_Internal {
 public:
  static const ::com::bcom::solar::gprc::Matrix3x3& cam1_rotation(const RectificationParameters* msg);
  static const ::com::bcom::solar::gprc::Matrix3x4& cam1_projection(const RectificationParameters* msg);
  static const ::com::bcom::solar::gprc::Matrix3x3& cam2_rotation(const RectificationParameters* msg);
  static const ::com::bcom::solar::gprc::Matrix3x4& cam2_projection(const RectificationParameters* msg);
};

const ::com::bcom::solar::gprc::Matrix3x3&
RectificationParameters::_Internal::cam1_rotation(const RectificationParameters* msg) {
  return *msg->cam1_rotation_;
}
const ::com::bcom::solar::gprc::Matrix3x4&
RectificationParameters::_Internal::cam1_projection(const RectificationParameters* msg) {
  return *msg->cam1_projection_;
}
const ::com::bcom::solar::gprc::Matrix3x3&
RectificationParameters::_Internal::cam2_rotation(const RectificationParameters* msg) {
  return *msg->cam2_rotation_;
}
const ::com::bcom::solar::gprc::Matrix3x4&
RectificationParameters::_Internal::cam2_projection(const RectificationParameters* msg) {
  return *msg->cam2_projection_;
}
RectificationParameters::RectificationParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bcom.solar.gprc.RectificationParameters)
}
RectificationParameters::RectificationParameters(const RectificationParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cam1_rotation()) {
    cam1_rotation_ = new ::com::bcom::solar::gprc::Matrix3x3(*from.cam1_rotation_);
  } else {
    cam1_rotation_ = nullptr;
  }
  if (from._internal_has_cam1_projection()) {
    cam1_projection_ = new ::com::bcom::solar::gprc::Matrix3x4(*from.cam1_projection_);
  } else {
    cam1_projection_ = nullptr;
  }
  if (from._internal_has_cam2_rotation()) {
    cam2_rotation_ = new ::com::bcom::solar::gprc::Matrix3x3(*from.cam2_rotation_);
  } else {
    cam2_rotation_ = nullptr;
  }
  if (from._internal_has_cam2_projection()) {
    cam2_projection_ = new ::com::bcom::solar::gprc::Matrix3x4(*from.cam2_projection_);
  } else {
    cam2_projection_ = nullptr;
  }
  ::memcpy(&cam1_stereo_type_, &from.cam1_stereo_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cam2_baseline_) -
    reinterpret_cast<char*>(&cam1_stereo_type_)) + sizeof(cam2_baseline_));
  // @@protoc_insertion_point(copy_constructor:com.bcom.solar.gprc.RectificationParameters)
}

void RectificationParameters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cam1_rotation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cam2_baseline_) -
    reinterpret_cast<char*>(&cam1_rotation_)) + sizeof(cam2_baseline_));
}

RectificationParameters::~RectificationParameters() {
  // @@protoc_insertion_point(destructor:com.bcom.solar.gprc.RectificationParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RectificationParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cam1_rotation_;
  if (this != internal_default_instance()) delete cam1_projection_;
  if (this != internal_default_instance()) delete cam2_rotation_;
  if (this != internal_default_instance()) delete cam2_projection_;
}

void RectificationParameters::ArenaDtor(void* object) {
  RectificationParameters* _this = reinterpret_cast< RectificationParameters* >(object);
  (void)_this;
}
void RectificationParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RectificationParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RectificationParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bcom.solar.gprc.RectificationParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && cam1_rotation_ != nullptr) {
    delete cam1_rotation_;
  }
  cam1_rotation_ = nullptr;
  if (GetArena() == nullptr && cam1_projection_ != nullptr) {
    delete cam1_projection_;
  }
  cam1_projection_ = nullptr;
  if (GetArena() == nullptr && cam2_rotation_ != nullptr) {
    delete cam2_rotation_;
  }
  cam2_rotation_ = nullptr;
  if (GetArena() == nullptr && cam2_projection_ != nullptr) {
    delete cam2_projection_;
  }
  cam2_projection_ = nullptr;
  ::memset(&cam1_stereo_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cam2_baseline_) -
      reinterpret_cast<char*>(&cam1_stereo_type_)) + sizeof(cam2_baseline_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RectificationParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.bcom.solar.gprc.Matrix3x3 cam1_rotation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cam1_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.Matrix3x4 cam1_projection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cam1_projection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.StereoType cam1_stereo_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cam1_stereo_type(static_cast<::com::bcom::solar::gprc::StereoType>(val));
        } else goto handle_unusual;
        continue;
      // float cam1_baseline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          cam1_baseline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.Matrix3x3 cam2_rotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cam2_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.Matrix3x4 cam2_projection = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cam2_projection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.StereoType cam2_stereo_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cam2_stereo_type(static_cast<::com::bcom::solar::gprc::StereoType>(val));
        } else goto handle_unusual;
        continue;
      // float cam2_baseline = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          cam2_baseline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RectificationParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bcom.solar.gprc.RectificationParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.bcom.solar.gprc.Matrix3x3 cam1_rotation = 1;
  if (this->has_cam1_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cam1_rotation(this), target, stream);
  }

  // .com.bcom.solar.gprc.Matrix3x4 cam1_projection = 2;
  if (this->has_cam1_projection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cam1_projection(this), target, stream);
  }

  // .com.bcom.solar.gprc.StereoType cam1_stereo_type = 3;
  if (this->cam1_stereo_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_cam1_stereo_type(), target);
  }

  // float cam1_baseline = 4;
  if (!(this->cam1_baseline() <= 0 && this->cam1_baseline() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cam1_baseline(), target);
  }

  // .com.bcom.solar.gprc.Matrix3x3 cam2_rotation = 5;
  if (this->has_cam2_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cam2_rotation(this), target, stream);
  }

  // .com.bcom.solar.gprc.Matrix3x4 cam2_projection = 6;
  if (this->has_cam2_projection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cam2_projection(this), target, stream);
  }

  // .com.bcom.solar.gprc.StereoType cam2_stereo_type = 7;
  if (this->cam2_stereo_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_cam2_stereo_type(), target);
  }

  // float cam2_baseline = 8;
  if (!(this->cam2_baseline() <= 0 && this->cam2_baseline() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_cam2_baseline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bcom.solar.gprc.RectificationParameters)
  return target;
}

size_t RectificationParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bcom.solar.gprc.RectificationParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.bcom.solar.gprc.Matrix3x3 cam1_rotation = 1;
  if (this->has_cam1_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cam1_rotation_);
  }

  // .com.bcom.solar.gprc.Matrix3x4 cam1_projection = 2;
  if (this->has_cam1_projection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cam1_projection_);
  }

  // .com.bcom.solar.gprc.Matrix3x3 cam2_rotation = 5;
  if (this->has_cam2_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cam2_rotation_);
  }

  // .com.bcom.solar.gprc.Matrix3x4 cam2_projection = 6;
  if (this->has_cam2_projection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cam2_projection_);
  }

  // .com.bcom.solar.gprc.StereoType cam1_stereo_type = 3;
  if (this->cam1_stereo_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cam1_stereo_type());
  }

  // float cam1_baseline = 4;
  if (!(this->cam1_baseline() <= 0 && this->cam1_baseline() >= 0)) {
    total_size += 1 + 4;
  }

  // .com.bcom.solar.gprc.StereoType cam2_stereo_type = 7;
  if (this->cam2_stereo_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cam2_stereo_type());
  }

  // float cam2_baseline = 8;
  if (!(this->cam2_baseline() <= 0 && this->cam2_baseline() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectificationParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.bcom.solar.gprc.RectificationParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const RectificationParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RectificationParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.bcom.solar.gprc.RectificationParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.bcom.solar.gprc.RectificationParameters)
    MergeFrom(*source);
  }
}

void RectificationParameters::MergeFrom(const RectificationParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bcom.solar.gprc.RectificationParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cam1_rotation()) {
    _internal_mutable_cam1_rotation()->::com::bcom::solar::gprc::Matrix3x3::MergeFrom(from._internal_cam1_rotation());
  }
  if (from.has_cam1_projection()) {
    _internal_mutable_cam1_projection()->::com::bcom::solar::gprc::Matrix3x4::MergeFrom(from._internal_cam1_projection());
  }
  if (from.has_cam2_rotation()) {
    _internal_mutable_cam2_rotation()->::com::bcom::solar::gprc::Matrix3x3::MergeFrom(from._internal_cam2_rotation());
  }
  if (from.has_cam2_projection()) {
    _internal_mutable_cam2_projection()->::com::bcom::solar::gprc::Matrix3x4::MergeFrom(from._internal_cam2_projection());
  }
  if (from.cam1_stereo_type() != 0) {
    _internal_set_cam1_stereo_type(from._internal_cam1_stereo_type());
  }
  if (!(from.cam1_baseline() <= 0 && from.cam1_baseline() >= 0)) {
    _internal_set_cam1_baseline(from._internal_cam1_baseline());
  }
  if (from.cam2_stereo_type() != 0) {
    _internal_set_cam2_stereo_type(from._internal_cam2_stereo_type());
  }
  if (!(from.cam2_baseline() <= 0 && from.cam2_baseline() >= 0)) {
    _internal_set_cam2_baseline(from._internal_cam2_baseline());
  }
}

void RectificationParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.bcom.solar.gprc.RectificationParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectificationParameters::CopyFrom(const RectificationParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bcom.solar.gprc.RectificationParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectificationParameters::IsInitialized() const {
  return true;
}

void RectificationParameters::InternalSwap(RectificationParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RectificationParameters, cam2_baseline_)
      + sizeof(RectificationParameters::cam2_baseline_)
      - PROTOBUF_FIELD_OFFSET(RectificationParameters, cam1_rotation_)>(
          reinterpret_cast<char*>(&cam1_rotation_),
          reinterpret_cast<char*>(&other->cam1_rotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RectificationParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RelocalizationResult::_Internal {
 public:
  static const ::com::bcom::solar::gprc::Matrix4x4& pose(const RelocalizationResult* msg);
};

const ::com::bcom::solar::gprc::Matrix4x4&
RelocalizationResult::_Internal::pose(const RelocalizationResult* msg) {
  return *msg->pose_;
}
RelocalizationResult::RelocalizationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bcom.solar.gprc.RelocalizationResult)
}
RelocalizationResult::RelocalizationResult(const RelocalizationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::com::bcom::solar::gprc::Matrix4x4(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  ::memcpy(&pose_status_, &from.pose_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&mapping_status_) -
    reinterpret_cast<char*>(&pose_status_)) + sizeof(mapping_status_));
  // @@protoc_insertion_point(copy_constructor:com.bcom.solar.gprc.RelocalizationResult)
}

void RelocalizationResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pose_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mapping_status_) -
    reinterpret_cast<char*>(&pose_)) + sizeof(mapping_status_));
}

RelocalizationResult::~RelocalizationResult() {
  // @@protoc_insertion_point(destructor:com.bcom.solar.gprc.RelocalizationResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelocalizationResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void RelocalizationResult::ArenaDtor(void* object) {
  RelocalizationResult* _this = reinterpret_cast< RelocalizationResult* >(object);
  (void)_this;
}
void RelocalizationResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelocalizationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelocalizationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bcom.solar.gprc.RelocalizationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  ::memset(&pose_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapping_status_) -
      reinterpret_cast<char*>(&pose_status_)) + sizeof(mapping_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelocalizationResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.bcom.solar.gprc.RelocalizationPoseStatus pose_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pose_status(static_cast<::com::bcom::solar::gprc::RelocalizationPoseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.Matrix4x4 pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.MappingStatus mapping_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mapping_status(static_cast<::com::bcom::solar::gprc::MappingStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelocalizationResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bcom.solar.gprc.RelocalizationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.bcom.solar.gprc.RelocalizationPoseStatus pose_status = 1;
  if (this->pose_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pose_status(), target);
  }

  // .com.bcom.solar.gprc.Matrix4x4 pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  // float confidence = 3;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_confidence(), target);
  }

  // .com.bcom.solar.gprc.MappingStatus mapping_status = 4;
  if (this->mapping_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_mapping_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bcom.solar.gprc.RelocalizationResult)
  return target;
}

size_t RelocalizationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bcom.solar.gprc.RelocalizationResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.bcom.solar.gprc.Matrix4x4 pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .com.bcom.solar.gprc.RelocalizationPoseStatus pose_status = 1;
  if (this->pose_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pose_status());
  }

  // float confidence = 3;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // .com.bcom.solar.gprc.MappingStatus mapping_status = 4;
  if (this->mapping_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mapping_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelocalizationResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.bcom.solar.gprc.RelocalizationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RelocalizationResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelocalizationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.bcom.solar.gprc.RelocalizationResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.bcom.solar.gprc.RelocalizationResult)
    MergeFrom(*source);
  }
}

void RelocalizationResult::MergeFrom(const RelocalizationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bcom.solar.gprc.RelocalizationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    _internal_mutable_pose()->::com::bcom::solar::gprc::Matrix4x4::MergeFrom(from._internal_pose());
  }
  if (from.pose_status() != 0) {
    _internal_set_pose_status(from._internal_pose_status());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (from.mapping_status() != 0) {
    _internal_set_mapping_status(from._internal_mapping_status());
  }
}

void RelocalizationResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.bcom.solar.gprc.RelocalizationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelocalizationResult::CopyFrom(const RelocalizationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bcom.solar.gprc.RelocalizationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelocalizationResult::IsInitialized() const {
  return true;
}

void RelocalizationResult::InternalSwap(RelocalizationResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelocalizationResult, mapping_status_)
      + sizeof(RelocalizationResult::mapping_status_)
      - PROTOBUF_FIELD_OFFSET(RelocalizationResult, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelocalizationResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Image::_Internal {
 public:
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bcom.solar.gprc.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&imagecompression_) -
    reinterpret_cast<char*>(&width_)) + sizeof(imagecompression_));
  // @@protoc_insertion_point(copy_constructor:com.bcom.solar.gprc.Image)
}

void Image::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&imagecompression_) -
    reinterpret_cast<char*>(&width_)) + sizeof(imagecompression_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:com.bcom.solar.gprc.Image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bcom.solar.gprc.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imagecompression_) -
      reinterpret_cast<char*>(&width_)) + sizeof(imagecompression_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.ImageLayout layout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layout(static_cast<::com::bcom::solar::gprc::ImageLayout>(val));
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.ImageCompression imageCompression = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_imagecompression(static_cast<::com::bcom::solar::gprc::ImageCompression>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bcom.solar.gprc.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  // .com.bcom.solar.gprc.ImageLayout layout = 4;
  if (this->layout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_layout(), target);
  }

  // .com.bcom.solar.gprc.ImageCompression imageCompression = 5;
  if (this->imagecompression() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_imagecompression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bcom.solar.gprc.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bcom.solar.gprc.Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  // .com.bcom.solar.gprc.ImageLayout layout = 4;
  if (this->layout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layout());
  }

  // .com.bcom.solar.gprc.ImageCompression imageCompression = 5;
  if (this->imagecompression() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_imagecompression());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.bcom.solar.gprc.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.bcom.solar.gprc.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.bcom.solar.gprc.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bcom.solar.gprc.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.layout() != 0) {
    _internal_set_layout(from._internal_layout());
  }
  if (from.imagecompression() != 0) {
    _internal_set_imagecompression(from._internal_imagecompression());
  }
}

void Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.bcom.solar.gprc.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bcom.solar.gprc.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Image, imagecompression_)
      + sizeof(Image::imagecompression_)
      - PROTOBUF_FIELD_OFFSET(Image, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Frames::_Internal {
 public:
};

Frames::Frames(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  frames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bcom.solar.gprc.Frames)
}
Frames::Frames(const Frames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.bcom.solar.gprc.Frames)
}

void Frames::SharedCtor() {
}

Frames::~Frames() {
  // @@protoc_insertion_point(destructor:com.bcom.solar.gprc.Frames)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Frames::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Frames::ArenaDtor(void* object) {
  Frames* _this = reinterpret_cast< Frames* >(object);
  (void)_this;
}
void Frames::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frames::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bcom.solar.gprc.Frames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.bcom.solar.gprc.Frame frames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Frames::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bcom.solar.gprc.Frames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.bcom.solar.gprc.Frame frames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_frames(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bcom.solar.gprc.Frames)
  return target;
}

size_t Frames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bcom.solar.gprc.Frames)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.bcom.solar.gprc.Frame frames = 1;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frames::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.bcom.solar.gprc.Frames)
  GOOGLE_DCHECK_NE(&from, this);
  const Frames* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Frames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.bcom.solar.gprc.Frames)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.bcom.solar.gprc.Frames)
    MergeFrom(*source);
  }
}

void Frames::MergeFrom(const Frames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bcom.solar.gprc.Frames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
}

void Frames::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.bcom.solar.gprc.Frames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frames::CopyFrom(const Frames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bcom.solar.gprc.Frames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frames::IsInitialized() const {
  return true;
}

void Frames::InternalSwap(Frames* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frames_.InternalSwap(&other->frames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Frames::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Frame::_Internal {
 public:
  static const ::com::bcom::solar::gprc::Image& image(const Frame* msg);
  static const ::com::bcom::solar::gprc::Matrix4x4& pose(const Frame* msg);
};

const ::com::bcom::solar::gprc::Image&
Frame::_Internal::image(const Frame* msg) {
  return *msg->image_;
}
const ::com::bcom::solar::gprc::Matrix4x4&
Frame::_Internal::pose(const Frame* msg) {
  return *msg->pose_;
}
Frame::Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bcom.solar.gprc.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::com::bcom::solar::gprc::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::com::bcom::solar::gprc::Matrix4x4(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&fixed_pose_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(fixed_pose_));
  // @@protoc_insertion_point(copy_constructor:com.bcom.solar.gprc.Frame)
}

void Frame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&image_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fixed_pose_) -
    reinterpret_cast<char*>(&image_)) + sizeof(fixed_pose_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:com.bcom.solar.gprc.Frame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete pose_;
}

void Frame::ArenaDtor(void* object) {
  Frame* _this = reinterpret_cast< Frame* >(object);
  (void)_this;
}
void Frame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bcom.solar.gprc.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fixed_pose_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(fixed_pose_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.Image image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bcom.solar.gprc.Matrix4x4 pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fixed_pose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fixed_pose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bcom.solar.gprc.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sensor_id = 1;
  if (this->sensor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sensor_id(), target);
  }

  // .com.bcom.solar.gprc.Image image = 2;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::image(this), target, stream);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // .com.bcom.solar.gprc.Matrix4x4 pose = 4;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pose(this), target, stream);
  }

  // bool fixed_pose = 5;
  if (this->fixed_pose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_fixed_pose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bcom.solar.gprc.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bcom.solar.gprc.Frame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.bcom.solar.gprc.Image image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .com.bcom.solar.gprc.Matrix4x4 pose = 4;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // int32 sensor_id = 1;
  if (this->sensor_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sensor_id());
  }

  // bool fixed_pose = 5;
  if (this->fixed_pose() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.bcom.solar.gprc.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Frame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.bcom.solar.gprc.Frame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.bcom.solar.gprc.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bcom.solar.gprc.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image()) {
    _internal_mutable_image()->::com::bcom::solar::gprc::Image::MergeFrom(from._internal_image());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::com::bcom::solar::gprc::Matrix4x4::MergeFrom(from._internal_pose());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.sensor_id() != 0) {
    _internal_set_sensor_id(from._internal_sensor_id());
  }
  if (from.fixed_pose() != 0) {
    _internal_set_fixed_pose(from._internal_fixed_pose());
  }
}

void Frame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.bcom.solar.gprc.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bcom.solar.gprc.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frame, fixed_pose_)
      + sizeof(Frame::fixed_pose_)
      - PROTOBUF_FIELD_OFFSET(Frame, image_)>(
          reinterpret_cast<char*>(&image_),
          reinterpret_cast<char*>(&other->image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Matrix4x4::_Internal {
 public:
};

Matrix4x4::Matrix4x4(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bcom.solar.gprc.Matrix4x4)
}
Matrix4x4::Matrix4x4(const Matrix4x4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m11_, &from.m11_,
    static_cast<size_t>(reinterpret_cast<char*>(&m44_) -
    reinterpret_cast<char*>(&m11_)) + sizeof(m44_));
  // @@protoc_insertion_point(copy_constructor:com.bcom.solar.gprc.Matrix4x4)
}

void Matrix4x4::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&m11_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&m44_) -
    reinterpret_cast<char*>(&m11_)) + sizeof(m44_));
}

Matrix4x4::~Matrix4x4() {
  // @@protoc_insertion_point(destructor:com.bcom.solar.gprc.Matrix4x4)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Matrix4x4::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Matrix4x4::ArenaDtor(void* object) {
  Matrix4x4* _this = reinterpret_cast< Matrix4x4* >(object);
  (void)_this;
}
void Matrix4x4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Matrix4x4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Matrix4x4::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bcom.solar.gprc.Matrix4x4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&m11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m44_) -
      reinterpret_cast<char*>(&m11_)) + sizeof(m44_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix4x4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float m11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          m11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m12 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          m12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m13 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          m13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m14 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          m14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m21 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          m21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m22 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          m22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m23 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          m23_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m24 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          m24_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m31 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          m31_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m32 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          m32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m33 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          m33_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m34 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          m34_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m41 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          m41_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m42 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          m42_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m43 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          m43_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m44 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          m44_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix4x4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bcom.solar.gprc.Matrix4x4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float m11 = 1;
  if (!(this->m11() <= 0 && this->m11() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_m11(), target);
  }

  // float m12 = 2;
  if (!(this->m12() <= 0 && this->m12() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_m12(), target);
  }

  // float m13 = 3;
  if (!(this->m13() <= 0 && this->m13() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_m13(), target);
  }

  // float m14 = 4;
  if (!(this->m14() <= 0 && this->m14() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_m14(), target);
  }

  // float m21 = 5;
  if (!(this->m21() <= 0 && this->m21() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_m21(), target);
  }

  // float m22 = 6;
  if (!(this->m22() <= 0 && this->m22() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_m22(), target);
  }

  // float m23 = 7;
  if (!(this->m23() <= 0 && this->m23() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_m23(), target);
  }

  // float m24 = 8;
  if (!(this->m24() <= 0 && this->m24() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_m24(), target);
  }

  // float m31 = 9;
  if (!(this->m31() <= 0 && this->m31() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_m31(), target);
  }

  // float m32 = 10;
  if (!(this->m32() <= 0 && this->m32() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_m32(), target);
  }

  // float m33 = 11;
  if (!(this->m33() <= 0 && this->m33() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_m33(), target);
  }

  // float m34 = 12;
  if (!(this->m34() <= 0 && this->m34() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_m34(), target);
  }

  // float m41 = 13;
  if (!(this->m41() <= 0 && this->m41() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_m41(), target);
  }

  // float m42 = 14;
  if (!(this->m42() <= 0 && this->m42() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_m42(), target);
  }

  // float m43 = 15;
  if (!(this->m43() <= 0 && this->m43() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_m43(), target);
  }

  // float m44 = 16;
  if (!(this->m44() <= 0 && this->m44() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_m44(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bcom.solar.gprc.Matrix4x4)
  return target;
}

size_t Matrix4x4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bcom.solar.gprc.Matrix4x4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float m11 = 1;
  if (!(this->m11() <= 0 && this->m11() >= 0)) {
    total_size += 1 + 4;
  }

  // float m12 = 2;
  if (!(this->m12() <= 0 && this->m12() >= 0)) {
    total_size += 1 + 4;
  }

  // float m13 = 3;
  if (!(this->m13() <= 0 && this->m13() >= 0)) {
    total_size += 1 + 4;
  }

  // float m14 = 4;
  if (!(this->m14() <= 0 && this->m14() >= 0)) {
    total_size += 1 + 4;
  }

  // float m21 = 5;
  if (!(this->m21() <= 0 && this->m21() >= 0)) {
    total_size += 1 + 4;
  }

  // float m22 = 6;
  if (!(this->m22() <= 0 && this->m22() >= 0)) {
    total_size += 1 + 4;
  }

  // float m23 = 7;
  if (!(this->m23() <= 0 && this->m23() >= 0)) {
    total_size += 1 + 4;
  }

  // float m24 = 8;
  if (!(this->m24() <= 0 && this->m24() >= 0)) {
    total_size += 1 + 4;
  }

  // float m31 = 9;
  if (!(this->m31() <= 0 && this->m31() >= 0)) {
    total_size += 1 + 4;
  }

  // float m32 = 10;
  if (!(this->m32() <= 0 && this->m32() >= 0)) {
    total_size += 1 + 4;
  }

  // float m33 = 11;
  if (!(this->m33() <= 0 && this->m33() >= 0)) {
    total_size += 1 + 4;
  }

  // float m34 = 12;
  if (!(this->m34() <= 0 && this->m34() >= 0)) {
    total_size += 1 + 4;
  }

  // float m41 = 13;
  if (!(this->m41() <= 0 && this->m41() >= 0)) {
    total_size += 1 + 4;
  }

  // float m42 = 14;
  if (!(this->m42() <= 0 && this->m42() >= 0)) {
    total_size += 1 + 4;
  }

  // float m43 = 15;
  if (!(this->m43() <= 0 && this->m43() >= 0)) {
    total_size += 1 + 4;
  }

  // float m44 = 16;
  if (!(this->m44() <= 0 && this->m44() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix4x4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.bcom.solar.gprc.Matrix4x4)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix4x4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matrix4x4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.bcom.solar.gprc.Matrix4x4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.bcom.solar.gprc.Matrix4x4)
    MergeFrom(*source);
  }
}

void Matrix4x4::MergeFrom(const Matrix4x4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bcom.solar.gprc.Matrix4x4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.m11() <= 0 && from.m11() >= 0)) {
    _internal_set_m11(from._internal_m11());
  }
  if (!(from.m12() <= 0 && from.m12() >= 0)) {
    _internal_set_m12(from._internal_m12());
  }
  if (!(from.m13() <= 0 && from.m13() >= 0)) {
    _internal_set_m13(from._internal_m13());
  }
  if (!(from.m14() <= 0 && from.m14() >= 0)) {
    _internal_set_m14(from._internal_m14());
  }
  if (!(from.m21() <= 0 && from.m21() >= 0)) {
    _internal_set_m21(from._internal_m21());
  }
  if (!(from.m22() <= 0 && from.m22() >= 0)) {
    _internal_set_m22(from._internal_m22());
  }
  if (!(from.m23() <= 0 && from.m23() >= 0)) {
    _internal_set_m23(from._internal_m23());
  }
  if (!(from.m24() <= 0 && from.m24() >= 0)) {
    _internal_set_m24(from._internal_m24());
  }
  if (!(from.m31() <= 0 && from.m31() >= 0)) {
    _internal_set_m31(from._internal_m31());
  }
  if (!(from.m32() <= 0 && from.m32() >= 0)) {
    _internal_set_m32(from._internal_m32());
  }
  if (!(from.m33() <= 0 && from.m33() >= 0)) {
    _internal_set_m33(from._internal_m33());
  }
  if (!(from.m34() <= 0 && from.m34() >= 0)) {
    _internal_set_m34(from._internal_m34());
  }
  if (!(from.m41() <= 0 && from.m41() >= 0)) {
    _internal_set_m41(from._internal_m41());
  }
  if (!(from.m42() <= 0 && from.m42() >= 0)) {
    _internal_set_m42(from._internal_m42());
  }
  if (!(from.m43() <= 0 && from.m43() >= 0)) {
    _internal_set_m43(from._internal_m43());
  }
  if (!(from.m44() <= 0 && from.m44() >= 0)) {
    _internal_set_m44(from._internal_m44());
  }
}

void Matrix4x4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.bcom.solar.gprc.Matrix4x4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix4x4::CopyFrom(const Matrix4x4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bcom.solar.gprc.Matrix4x4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix4x4::IsInitialized() const {
  return true;
}

void Matrix4x4::InternalSwap(Matrix4x4* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix4x4, m44_)
      + sizeof(Matrix4x4::m44_)
      - PROTOBUF_FIELD_OFFSET(Matrix4x4, m11_)>(
          reinterpret_cast<char*>(&m11_),
          reinterpret_cast<char*>(&other->m11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix4x4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Matrix3x3::_Internal {
 public:
};

Matrix3x3::Matrix3x3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bcom.solar.gprc.Matrix3x3)
}
Matrix3x3::Matrix3x3(const Matrix3x3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m11_, &from.m11_,
    static_cast<size_t>(reinterpret_cast<char*>(&m33_) -
    reinterpret_cast<char*>(&m11_)) + sizeof(m33_));
  // @@protoc_insertion_point(copy_constructor:com.bcom.solar.gprc.Matrix3x3)
}

void Matrix3x3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&m11_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&m33_) -
    reinterpret_cast<char*>(&m11_)) + sizeof(m33_));
}

Matrix3x3::~Matrix3x3() {
  // @@protoc_insertion_point(destructor:com.bcom.solar.gprc.Matrix3x3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Matrix3x3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Matrix3x3::ArenaDtor(void* object) {
  Matrix3x3* _this = reinterpret_cast< Matrix3x3* >(object);
  (void)_this;
}
void Matrix3x3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Matrix3x3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Matrix3x3::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bcom.solar.gprc.Matrix3x3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&m11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m33_) -
      reinterpret_cast<char*>(&m11_)) + sizeof(m33_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix3x3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float m11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          m11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m12 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          m12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m13 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          m13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m21 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          m21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m22 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          m22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m23 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          m23_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m31 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          m31_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m32 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          m32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m33 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          m33_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix3x3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bcom.solar.gprc.Matrix3x3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float m11 = 1;
  if (!(this->m11() <= 0 && this->m11() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_m11(), target);
  }

  // float m12 = 2;
  if (!(this->m12() <= 0 && this->m12() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_m12(), target);
  }

  // float m13 = 3;
  if (!(this->m13() <= 0 && this->m13() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_m13(), target);
  }

  // float m21 = 4;
  if (!(this->m21() <= 0 && this->m21() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_m21(), target);
  }

  // float m22 = 5;
  if (!(this->m22() <= 0 && this->m22() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_m22(), target);
  }

  // float m23 = 6;
  if (!(this->m23() <= 0 && this->m23() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_m23(), target);
  }

  // float m31 = 7;
  if (!(this->m31() <= 0 && this->m31() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_m31(), target);
  }

  // float m32 = 8;
  if (!(this->m32() <= 0 && this->m32() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_m32(), target);
  }

  // float m33 = 9;
  if (!(this->m33() <= 0 && this->m33() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_m33(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bcom.solar.gprc.Matrix3x3)
  return target;
}

size_t Matrix3x3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bcom.solar.gprc.Matrix3x3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float m11 = 1;
  if (!(this->m11() <= 0 && this->m11() >= 0)) {
    total_size += 1 + 4;
  }

  // float m12 = 2;
  if (!(this->m12() <= 0 && this->m12() >= 0)) {
    total_size += 1 + 4;
  }

  // float m13 = 3;
  if (!(this->m13() <= 0 && this->m13() >= 0)) {
    total_size += 1 + 4;
  }

  // float m21 = 4;
  if (!(this->m21() <= 0 && this->m21() >= 0)) {
    total_size += 1 + 4;
  }

  // float m22 = 5;
  if (!(this->m22() <= 0 && this->m22() >= 0)) {
    total_size += 1 + 4;
  }

  // float m23 = 6;
  if (!(this->m23() <= 0 && this->m23() >= 0)) {
    total_size += 1 + 4;
  }

  // float m31 = 7;
  if (!(this->m31() <= 0 && this->m31() >= 0)) {
    total_size += 1 + 4;
  }

  // float m32 = 8;
  if (!(this->m32() <= 0 && this->m32() >= 0)) {
    total_size += 1 + 4;
  }

  // float m33 = 9;
  if (!(this->m33() <= 0 && this->m33() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix3x3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.bcom.solar.gprc.Matrix3x3)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix3x3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matrix3x3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.bcom.solar.gprc.Matrix3x3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.bcom.solar.gprc.Matrix3x3)
    MergeFrom(*source);
  }
}

void Matrix3x3::MergeFrom(const Matrix3x3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bcom.solar.gprc.Matrix3x3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.m11() <= 0 && from.m11() >= 0)) {
    _internal_set_m11(from._internal_m11());
  }
  if (!(from.m12() <= 0 && from.m12() >= 0)) {
    _internal_set_m12(from._internal_m12());
  }
  if (!(from.m13() <= 0 && from.m13() >= 0)) {
    _internal_set_m13(from._internal_m13());
  }
  if (!(from.m21() <= 0 && from.m21() >= 0)) {
    _internal_set_m21(from._internal_m21());
  }
  if (!(from.m22() <= 0 && from.m22() >= 0)) {
    _internal_set_m22(from._internal_m22());
  }
  if (!(from.m23() <= 0 && from.m23() >= 0)) {
    _internal_set_m23(from._internal_m23());
  }
  if (!(from.m31() <= 0 && from.m31() >= 0)) {
    _internal_set_m31(from._internal_m31());
  }
  if (!(from.m32() <= 0 && from.m32() >= 0)) {
    _internal_set_m32(from._internal_m32());
  }
  if (!(from.m33() <= 0 && from.m33() >= 0)) {
    _internal_set_m33(from._internal_m33());
  }
}

void Matrix3x3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.bcom.solar.gprc.Matrix3x3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix3x3::CopyFrom(const Matrix3x3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bcom.solar.gprc.Matrix3x3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix3x3::IsInitialized() const {
  return true;
}

void Matrix3x3::InternalSwap(Matrix3x3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix3x3, m33_)
      + sizeof(Matrix3x3::m33_)
      - PROTOBUF_FIELD_OFFSET(Matrix3x3, m11_)>(
          reinterpret_cast<char*>(&m11_),
          reinterpret_cast<char*>(&other->m11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix3x3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Matrix3x4::_Internal {
 public:
};

Matrix3x4::Matrix3x4(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bcom.solar.gprc.Matrix3x4)
}
Matrix3x4::Matrix3x4(const Matrix3x4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m11_, &from.m11_,
    static_cast<size_t>(reinterpret_cast<char*>(&m34_) -
    reinterpret_cast<char*>(&m11_)) + sizeof(m34_));
  // @@protoc_insertion_point(copy_constructor:com.bcom.solar.gprc.Matrix3x4)
}

void Matrix3x4::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&m11_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&m34_) -
    reinterpret_cast<char*>(&m11_)) + sizeof(m34_));
}

Matrix3x4::~Matrix3x4() {
  // @@protoc_insertion_point(destructor:com.bcom.solar.gprc.Matrix3x4)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Matrix3x4::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Matrix3x4::ArenaDtor(void* object) {
  Matrix3x4* _this = reinterpret_cast< Matrix3x4* >(object);
  (void)_this;
}
void Matrix3x4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Matrix3x4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Matrix3x4::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bcom.solar.gprc.Matrix3x4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&m11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m34_) -
      reinterpret_cast<char*>(&m11_)) + sizeof(m34_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix3x4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float m11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          m11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m12 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          m12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m13 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          m13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m14 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          m14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m21 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          m21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m22 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          m22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m23 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          m23_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m24 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          m24_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m31 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          m31_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m32 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          m32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m33 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          m33_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m34 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          m34_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix3x4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bcom.solar.gprc.Matrix3x4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float m11 = 1;
  if (!(this->m11() <= 0 && this->m11() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_m11(), target);
  }

  // float m12 = 2;
  if (!(this->m12() <= 0 && this->m12() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_m12(), target);
  }

  // float m13 = 3;
  if (!(this->m13() <= 0 && this->m13() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_m13(), target);
  }

  // float m14 = 4;
  if (!(this->m14() <= 0 && this->m14() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_m14(), target);
  }

  // float m21 = 5;
  if (!(this->m21() <= 0 && this->m21() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_m21(), target);
  }

  // float m22 = 6;
  if (!(this->m22() <= 0 && this->m22() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_m22(), target);
  }

  // float m23 = 7;
  if (!(this->m23() <= 0 && this->m23() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_m23(), target);
  }

  // float m24 = 8;
  if (!(this->m24() <= 0 && this->m24() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_m24(), target);
  }

  // float m31 = 9;
  if (!(this->m31() <= 0 && this->m31() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_m31(), target);
  }

  // float m32 = 10;
  if (!(this->m32() <= 0 && this->m32() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_m32(), target);
  }

  // float m33 = 11;
  if (!(this->m33() <= 0 && this->m33() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_m33(), target);
  }

  // float m34 = 12;
  if (!(this->m34() <= 0 && this->m34() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_m34(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bcom.solar.gprc.Matrix3x4)
  return target;
}

size_t Matrix3x4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bcom.solar.gprc.Matrix3x4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float m11 = 1;
  if (!(this->m11() <= 0 && this->m11() >= 0)) {
    total_size += 1 + 4;
  }

  // float m12 = 2;
  if (!(this->m12() <= 0 && this->m12() >= 0)) {
    total_size += 1 + 4;
  }

  // float m13 = 3;
  if (!(this->m13() <= 0 && this->m13() >= 0)) {
    total_size += 1 + 4;
  }

  // float m14 = 4;
  if (!(this->m14() <= 0 && this->m14() >= 0)) {
    total_size += 1 + 4;
  }

  // float m21 = 5;
  if (!(this->m21() <= 0 && this->m21() >= 0)) {
    total_size += 1 + 4;
  }

  // float m22 = 6;
  if (!(this->m22() <= 0 && this->m22() >= 0)) {
    total_size += 1 + 4;
  }

  // float m23 = 7;
  if (!(this->m23() <= 0 && this->m23() >= 0)) {
    total_size += 1 + 4;
  }

  // float m24 = 8;
  if (!(this->m24() <= 0 && this->m24() >= 0)) {
    total_size += 1 + 4;
  }

  // float m31 = 9;
  if (!(this->m31() <= 0 && this->m31() >= 0)) {
    total_size += 1 + 4;
  }

  // float m32 = 10;
  if (!(this->m32() <= 0 && this->m32() >= 0)) {
    total_size += 1 + 4;
  }

  // float m33 = 11;
  if (!(this->m33() <= 0 && this->m33() >= 0)) {
    total_size += 1 + 4;
  }

  // float m34 = 12;
  if (!(this->m34() <= 0 && this->m34() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix3x4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.bcom.solar.gprc.Matrix3x4)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix3x4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matrix3x4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.bcom.solar.gprc.Matrix3x4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.bcom.solar.gprc.Matrix3x4)
    MergeFrom(*source);
  }
}

void Matrix3x4::MergeFrom(const Matrix3x4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bcom.solar.gprc.Matrix3x4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.m11() <= 0 && from.m11() >= 0)) {
    _internal_set_m11(from._internal_m11());
  }
  if (!(from.m12() <= 0 && from.m12() >= 0)) {
    _internal_set_m12(from._internal_m12());
  }
  if (!(from.m13() <= 0 && from.m13() >= 0)) {
    _internal_set_m13(from._internal_m13());
  }
  if (!(from.m14() <= 0 && from.m14() >= 0)) {
    _internal_set_m14(from._internal_m14());
  }
  if (!(from.m21() <= 0 && from.m21() >= 0)) {
    _internal_set_m21(from._internal_m21());
  }
  if (!(from.m22() <= 0 && from.m22() >= 0)) {
    _internal_set_m22(from._internal_m22());
  }
  if (!(from.m23() <= 0 && from.m23() >= 0)) {
    _internal_set_m23(from._internal_m23());
  }
  if (!(from.m24() <= 0 && from.m24() >= 0)) {
    _internal_set_m24(from._internal_m24());
  }
  if (!(from.m31() <= 0 && from.m31() >= 0)) {
    _internal_set_m31(from._internal_m31());
  }
  if (!(from.m32() <= 0 && from.m32() >= 0)) {
    _internal_set_m32(from._internal_m32());
  }
  if (!(from.m33() <= 0 && from.m33() >= 0)) {
    _internal_set_m33(from._internal_m33());
  }
  if (!(from.m34() <= 0 && from.m34() >= 0)) {
    _internal_set_m34(from._internal_m34());
  }
}

void Matrix3x4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.bcom.solar.gprc.Matrix3x4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix3x4::CopyFrom(const Matrix3x4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bcom.solar.gprc.Matrix3x4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix3x4::IsInitialized() const {
  return true;
}

void Matrix3x4::InternalSwap(Matrix3x4* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix3x4, m34_)
      + sizeof(Matrix3x4::m34_)
      - PROTOBUF_FIELD_OFFSET(Matrix3x4, m11_)>(
          reinterpret_cast<char*>(&m11_),
          reinterpret_cast<char*>(&other->m11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix3x4::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gprc
}  // namespace solar
}  // namespace bcom
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::bcom::solar::gprc::Empty* Arena::CreateMaybeMessage< ::com::bcom::solar::gprc::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bcom::solar::gprc::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::com::bcom::solar::gprc::PipelineModeValue* Arena::CreateMaybeMessage< ::com::bcom::solar::gprc::PipelineModeValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bcom::solar::gprc::PipelineModeValue >(arena);
}
template<> PROTOBUF_NOINLINE ::com::bcom::solar::gprc::Message* Arena::CreateMaybeMessage< ::com::bcom::solar::gprc::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bcom::solar::gprc::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::com::bcom::solar::gprc::CameraParameters* Arena::CreateMaybeMessage< ::com::bcom::solar::gprc::CameraParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bcom::solar::gprc::CameraParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::com::bcom::solar::gprc::CameraParametersStereo* Arena::CreateMaybeMessage< ::com::bcom::solar::gprc::CameraParametersStereo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bcom::solar::gprc::CameraParametersStereo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::bcom::solar::gprc::CameraDistortion* Arena::CreateMaybeMessage< ::com::bcom::solar::gprc::CameraDistortion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bcom::solar::gprc::CameraDistortion >(arena);
}
template<> PROTOBUF_NOINLINE ::com::bcom::solar::gprc::RectificationParameters* Arena::CreateMaybeMessage< ::com::bcom::solar::gprc::RectificationParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bcom::solar::gprc::RectificationParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::com::bcom::solar::gprc::RelocalizationResult* Arena::CreateMaybeMessage< ::com::bcom::solar::gprc::RelocalizationResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bcom::solar::gprc::RelocalizationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::com::bcom::solar::gprc::Image* Arena::CreateMaybeMessage< ::com::bcom::solar::gprc::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bcom::solar::gprc::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::com::bcom::solar::gprc::Frames* Arena::CreateMaybeMessage< ::com::bcom::solar::gprc::Frames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bcom::solar::gprc::Frames >(arena);
}
template<> PROTOBUF_NOINLINE ::com::bcom::solar::gprc::Frame* Arena::CreateMaybeMessage< ::com::bcom::solar::gprc::Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bcom::solar::gprc::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::com::bcom::solar::gprc::Matrix4x4* Arena::CreateMaybeMessage< ::com::bcom::solar::gprc::Matrix4x4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bcom::solar::gprc::Matrix4x4 >(arena);
}
template<> PROTOBUF_NOINLINE ::com::bcom::solar::gprc::Matrix3x3* Arena::CreateMaybeMessage< ::com::bcom::solar::gprc::Matrix3x3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bcom::solar::gprc::Matrix3x3 >(arena);
}
template<> PROTOBUF_NOINLINE ::com::bcom::solar::gprc::Matrix3x4* Arena::CreateMaybeMessage< ::com::bcom::solar::gprc::Matrix3x4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bcom::solar::gprc::Matrix3x4 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
