// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: solar_mapping_and_relocalization_proxy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(int index);
namespace com {
namespace bcom {
namespace solar {
namespace gprc {
class CameraDistortion;
struct CameraDistortionDefaultTypeInternal;
extern CameraDistortionDefaultTypeInternal _CameraDistortion_default_instance_;
class CameraParameters;
struct CameraParametersDefaultTypeInternal;
extern CameraParametersDefaultTypeInternal _CameraParameters_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Frames;
struct FramesDefaultTypeInternal;
extern FramesDefaultTypeInternal _Frames_default_instance_;
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Matrix3x3;
struct Matrix3x3DefaultTypeInternal;
extern Matrix3x3DefaultTypeInternal _Matrix3x3_default_instance_;
class Matrix3x4;
struct Matrix3x4DefaultTypeInternal;
extern Matrix3x4DefaultTypeInternal _Matrix3x4_default_instance_;
class Matrix4x4;
struct Matrix4x4DefaultTypeInternal;
extern Matrix4x4DefaultTypeInternal _Matrix4x4_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class PipelineModeValue;
struct PipelineModeValueDefaultTypeInternal;
extern PipelineModeValueDefaultTypeInternal _PipelineModeValue_default_instance_;
class RectificationParameters;
struct RectificationParametersDefaultTypeInternal;
extern RectificationParametersDefaultTypeInternal _RectificationParameters_default_instance_;
class RelocalizationResult;
struct RelocalizationResultDefaultTypeInternal;
extern RelocalizationResultDefaultTypeInternal _RelocalizationResult_default_instance_;
}  // namespace gprc
}  // namespace solar
}  // namespace bcom
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::bcom::solar::gprc::CameraDistortion* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::CameraDistortion>(Arena*);
template<> ::com::bcom::solar::gprc::CameraParameters* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::CameraParameters>(Arena*);
template<> ::com::bcom::solar::gprc::Empty* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Empty>(Arena*);
template<> ::com::bcom::solar::gprc::Frame* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Frame>(Arena*);
template<> ::com::bcom::solar::gprc::Frames* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Frames>(Arena*);
template<> ::com::bcom::solar::gprc::Image* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Image>(Arena*);
template<> ::com::bcom::solar::gprc::Matrix3x3* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x3>(Arena*);
template<> ::com::bcom::solar::gprc::Matrix3x4* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x4>(Arena*);
template<> ::com::bcom::solar::gprc::Matrix4x4* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Matrix4x4>(Arena*);
template<> ::com::bcom::solar::gprc::Message* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Message>(Arena*);
template<> ::com::bcom::solar::gprc::PipelineModeValue* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::PipelineModeValue>(Arena*);
template<> ::com::bcom::solar::gprc::RectificationParameters* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::RectificationParameters>(Arena*);
template<> ::com::bcom::solar::gprc::RelocalizationResult* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::RelocalizationResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace bcom {
namespace solar {
namespace gprc {

enum PipelineMode : int {
  RELOCALIZATION_AND_MAPPING = 0,
  RELOCALIZATION_ONLY = 1,
  PipelineMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PipelineMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PipelineMode_IsValid(int value);
constexpr PipelineMode PipelineMode_MIN = RELOCALIZATION_AND_MAPPING;
constexpr PipelineMode PipelineMode_MAX = RELOCALIZATION_ONLY;
constexpr int PipelineMode_ARRAYSIZE = PipelineMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PipelineMode_descriptor();
template<typename T>
inline const std::string& PipelineMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PipelineMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PipelineMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PipelineMode_descriptor(), enum_t_value);
}
inline bool PipelineMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PipelineMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PipelineMode>(
    PipelineMode_descriptor(), name, value);
}
enum CameraType : int {
  RGB = 0,
  GRAY = 1,
  CameraType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CameraType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CameraType_IsValid(int value);
constexpr CameraType CameraType_MIN = RGB;
constexpr CameraType CameraType_MAX = GRAY;
constexpr int CameraType_ARRAYSIZE = CameraType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraType_descriptor();
template<typename T>
inline const std::string& CameraType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraType_descriptor(), enum_t_value);
}
inline bool CameraType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraType>(
    CameraType_descriptor(), name, value);
}
enum StereoType : int {
  Horizontal = 0,
  Vertical = 1,
  StereoType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StereoType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StereoType_IsValid(int value);
constexpr StereoType StereoType_MIN = Horizontal;
constexpr StereoType StereoType_MAX = Vertical;
constexpr int StereoType_ARRAYSIZE = StereoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StereoType_descriptor();
template<typename T>
inline const std::string& StereoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StereoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StereoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StereoType_descriptor(), enum_t_value);
}
inline bool StereoType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StereoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StereoType>(
    StereoType_descriptor(), name, value);
}
enum RelocalizationPoseStatus : int {
  NO_POSE = 0,
  NEW_POSE = 1,
  LATEST_POSE = 2,
  RelocalizationPoseStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RelocalizationPoseStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RelocalizationPoseStatus_IsValid(int value);
constexpr RelocalizationPoseStatus RelocalizationPoseStatus_MIN = NO_POSE;
constexpr RelocalizationPoseStatus RelocalizationPoseStatus_MAX = LATEST_POSE;
constexpr int RelocalizationPoseStatus_ARRAYSIZE = RelocalizationPoseStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelocalizationPoseStatus_descriptor();
template<typename T>
inline const std::string& RelocalizationPoseStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RelocalizationPoseStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RelocalizationPoseStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RelocalizationPoseStatus_descriptor(), enum_t_value);
}
inline bool RelocalizationPoseStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RelocalizationPoseStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RelocalizationPoseStatus>(
    RelocalizationPoseStatus_descriptor(), name, value);
}
enum ImageLayout : int {
  RGB_24 = 0,
  GREY_8 = 1,
  GREY_16 = 2,
  ImageLayout_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImageLayout_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImageLayout_IsValid(int value);
constexpr ImageLayout ImageLayout_MIN = RGB_24;
constexpr ImageLayout ImageLayout_MAX = GREY_16;
constexpr int ImageLayout_ARRAYSIZE = ImageLayout_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageLayout_descriptor();
template<typename T>
inline const std::string& ImageLayout_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageLayout>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageLayout_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageLayout_descriptor(), enum_t_value);
}
inline bool ImageLayout_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageLayout* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageLayout>(
    ImageLayout_descriptor(), name, value);
}
enum ImageCompression : int {
  NONE = 0,
  PNG = 1,
  JPG = 2,
  ImageCompression_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImageCompression_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImageCompression_IsValid(int value);
constexpr ImageCompression ImageCompression_MIN = NONE;
constexpr ImageCompression ImageCompression_MAX = JPG;
constexpr int ImageCompression_ARRAYSIZE = ImageCompression_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageCompression_descriptor();
template<typename T>
inline const std::string& ImageCompression_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageCompression>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageCompression_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageCompression_descriptor(), enum_t_value);
}
inline bool ImageCompression_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageCompression* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageCompression>(
    ImageCompression_descriptor(), name, value);
}
// ===================================================================

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  virtual ~Empty();
  explicit constexpr Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class PipelineModeValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.PipelineModeValue) */ {
 public:
  inline PipelineModeValue() : PipelineModeValue(nullptr) {}
  virtual ~PipelineModeValue();
  explicit constexpr PipelineModeValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PipelineModeValue(const PipelineModeValue& from);
  PipelineModeValue(PipelineModeValue&& from) noexcept
    : PipelineModeValue() {
    *this = ::std::move(from);
  }

  inline PipelineModeValue& operator=(const PipelineModeValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PipelineModeValue& operator=(PipelineModeValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PipelineModeValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const PipelineModeValue* internal_default_instance() {
    return reinterpret_cast<const PipelineModeValue*>(
               &_PipelineModeValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PipelineModeValue& a, PipelineModeValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PipelineModeValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PipelineModeValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PipelineModeValue* New() const final {
    return CreateMaybeMessage<PipelineModeValue>(nullptr);
  }

  PipelineModeValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PipelineModeValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PipelineModeValue& from);
  void MergeFrom(const PipelineModeValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PipelineModeValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.PipelineModeValue";
  }
  protected:
  explicit PipelineModeValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPipelineModeFieldNumber = 1,
  };
  // .com.bcom.solar.gprc.PipelineMode pipeline_mode = 1;
  void clear_pipeline_mode();
  ::com::bcom::solar::gprc::PipelineMode pipeline_mode() const;
  void set_pipeline_mode(::com::bcom::solar::gprc::PipelineMode value);
  private:
  ::com::bcom::solar::gprc::PipelineMode _internal_pipeline_mode() const;
  void _internal_set_pipeline_mode(::com::bcom::solar::gprc::PipelineMode value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.PipelineModeValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int pipeline_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  virtual ~Message();
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class CameraParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.CameraParameters) */ {
 public:
  inline CameraParameters() : CameraParameters(nullptr) {}
  virtual ~CameraParameters();
  explicit constexpr CameraParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraParameters(const CameraParameters& from);
  CameraParameters(CameraParameters&& from) noexcept
    : CameraParameters() {
    *this = ::std::move(from);
  }

  inline CameraParameters& operator=(const CameraParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraParameters& operator=(CameraParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraParameters* internal_default_instance() {
    return reinterpret_cast<const CameraParameters*>(
               &_CameraParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CameraParameters& a, CameraParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraParameters* New() const final {
    return CreateMaybeMessage<CameraParameters>(nullptr);
  }

  CameraParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraParameters& from);
  void MergeFrom(const CameraParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.CameraParameters";
  }
  protected:
  explicit CameraParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIntrinsicsFieldNumber = 6,
    kDistortionFieldNumber = 7,
    kIdFieldNumber = 2,
    kCameraTypeFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .com.bcom.solar.gprc.Matrix3x3 intrinsics = 6;
  bool has_intrinsics() const;
  private:
  bool _internal_has_intrinsics() const;
  public:
  void clear_intrinsics();
  const ::com::bcom::solar::gprc::Matrix3x3& intrinsics() const;
  ::com::bcom::solar::gprc::Matrix3x3* release_intrinsics();
  ::com::bcom::solar::gprc::Matrix3x3* mutable_intrinsics();
  void set_allocated_intrinsics(::com::bcom::solar::gprc::Matrix3x3* intrinsics);
  private:
  const ::com::bcom::solar::gprc::Matrix3x3& _internal_intrinsics() const;
  ::com::bcom::solar::gprc::Matrix3x3* _internal_mutable_intrinsics();
  public:
  void unsafe_arena_set_allocated_intrinsics(
      ::com::bcom::solar::gprc::Matrix3x3* intrinsics);
  ::com::bcom::solar::gprc::Matrix3x3* unsafe_arena_release_intrinsics();

  // .com.bcom.solar.gprc.CameraDistortion distortion = 7;
  bool has_distortion() const;
  private:
  bool _internal_has_distortion() const;
  public:
  void clear_distortion();
  const ::com::bcom::solar::gprc::CameraDistortion& distortion() const;
  ::com::bcom::solar::gprc::CameraDistortion* release_distortion();
  ::com::bcom::solar::gprc::CameraDistortion* mutable_distortion();
  void set_allocated_distortion(::com::bcom::solar::gprc::CameraDistortion* distortion);
  private:
  const ::com::bcom::solar::gprc::CameraDistortion& _internal_distortion() const;
  ::com::bcom::solar::gprc::CameraDistortion* _internal_mutable_distortion();
  public:
  void unsafe_arena_set_allocated_distortion(
      ::com::bcom::solar::gprc::CameraDistortion* distortion);
  ::com::bcom::solar::gprc::CameraDistortion* unsafe_arena_release_distortion();

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .com.bcom.solar.gprc.CameraType camera_type = 3;
  void clear_camera_type();
  ::com::bcom::solar::gprc::CameraType camera_type() const;
  void set_camera_type(::com::bcom::solar::gprc::CameraType value);
  private:
  ::com::bcom::solar::gprc::CameraType _internal_camera_type() const;
  void _internal_set_camera_type(::com::bcom::solar::gprc::CameraType value);
  public:

  // uint32 width = 4;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 5;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.CameraParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::com::bcom::solar::gprc::Matrix3x3* intrinsics_;
  ::com::bcom::solar::gprc::CameraDistortion* distortion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int camera_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class CameraDistortion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.CameraDistortion) */ {
 public:
  inline CameraDistortion() : CameraDistortion(nullptr) {}
  virtual ~CameraDistortion();
  explicit constexpr CameraDistortion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraDistortion(const CameraDistortion& from);
  CameraDistortion(CameraDistortion&& from) noexcept
    : CameraDistortion() {
    *this = ::std::move(from);
  }

  inline CameraDistortion& operator=(const CameraDistortion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraDistortion& operator=(CameraDistortion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraDistortion& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraDistortion* internal_default_instance() {
    return reinterpret_cast<const CameraDistortion*>(
               &_CameraDistortion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CameraDistortion& a, CameraDistortion& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraDistortion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraDistortion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraDistortion* New() const final {
    return CreateMaybeMessage<CameraDistortion>(nullptr);
  }

  CameraDistortion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraDistortion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraDistortion& from);
  void MergeFrom(const CameraDistortion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraDistortion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.CameraDistortion";
  }
  protected:
  explicit CameraDistortion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kK1FieldNumber = 1,
    kK2FieldNumber = 2,
    kP1FieldNumber = 3,
    kP2FieldNumber = 4,
    kK3FieldNumber = 5,
  };
  // float K_1 = 1;
  void clear_k_1();
  float k_1() const;
  void set_k_1(float value);
  private:
  float _internal_k_1() const;
  void _internal_set_k_1(float value);
  public:

  // float K_2 = 2;
  void clear_k_2();
  float k_2() const;
  void set_k_2(float value);
  private:
  float _internal_k_2() const;
  void _internal_set_k_2(float value);
  public:

  // float P_1 = 3;
  void clear_p_1();
  float p_1() const;
  void set_p_1(float value);
  private:
  float _internal_p_1() const;
  void _internal_set_p_1(float value);
  public:

  // float P_2 = 4;
  void clear_p_2();
  float p_2() const;
  void set_p_2(float value);
  private:
  float _internal_p_2() const;
  void _internal_set_p_2(float value);
  public:

  // float K_3 = 5;
  void clear_k_3();
  float k_3() const;
  void set_k_3(float value);
  private:
  float _internal_k_3() const;
  void _internal_set_k_3(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.CameraDistortion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float k_1_;
  float k_2_;
  float p_1_;
  float p_2_;
  float k_3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class RectificationParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.RectificationParameters) */ {
 public:
  inline RectificationParameters() : RectificationParameters(nullptr) {}
  virtual ~RectificationParameters();
  explicit constexpr RectificationParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RectificationParameters(const RectificationParameters& from);
  RectificationParameters(RectificationParameters&& from) noexcept
    : RectificationParameters() {
    *this = ::std::move(from);
  }

  inline RectificationParameters& operator=(const RectificationParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline RectificationParameters& operator=(RectificationParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RectificationParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const RectificationParameters* internal_default_instance() {
    return reinterpret_cast<const RectificationParameters*>(
               &_RectificationParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RectificationParameters& a, RectificationParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(RectificationParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RectificationParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RectificationParameters* New() const final {
    return CreateMaybeMessage<RectificationParameters>(nullptr);
  }

  RectificationParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RectificationParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RectificationParameters& from);
  void MergeFrom(const RectificationParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RectificationParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.RectificationParameters";
  }
  protected:
  explicit RectificationParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCam1RotationFieldNumber = 1,
    kCam1ProjectionFieldNumber = 2,
    kCam2RotationFieldNumber = 5,
    kCam2ProjectionFieldNumber = 6,
    kCam1StereoTypeFieldNumber = 3,
    kCam1BaselineFieldNumber = 4,
    kCam2StereoTypeFieldNumber = 7,
    kCam2BaselineFieldNumber = 8,
  };
  // .com.bcom.solar.gprc.Matrix3x3 cam1_rotation = 1;
  bool has_cam1_rotation() const;
  private:
  bool _internal_has_cam1_rotation() const;
  public:
  void clear_cam1_rotation();
  const ::com::bcom::solar::gprc::Matrix3x3& cam1_rotation() const;
  ::com::bcom::solar::gprc::Matrix3x3* release_cam1_rotation();
  ::com::bcom::solar::gprc::Matrix3x3* mutable_cam1_rotation();
  void set_allocated_cam1_rotation(::com::bcom::solar::gprc::Matrix3x3* cam1_rotation);
  private:
  const ::com::bcom::solar::gprc::Matrix3x3& _internal_cam1_rotation() const;
  ::com::bcom::solar::gprc::Matrix3x3* _internal_mutable_cam1_rotation();
  public:
  void unsafe_arena_set_allocated_cam1_rotation(
      ::com::bcom::solar::gprc::Matrix3x3* cam1_rotation);
  ::com::bcom::solar::gprc::Matrix3x3* unsafe_arena_release_cam1_rotation();

  // .com.bcom.solar.gprc.Matrix3x4 cam1_projection = 2;
  bool has_cam1_projection() const;
  private:
  bool _internal_has_cam1_projection() const;
  public:
  void clear_cam1_projection();
  const ::com::bcom::solar::gprc::Matrix3x4& cam1_projection() const;
  ::com::bcom::solar::gprc::Matrix3x4* release_cam1_projection();
  ::com::bcom::solar::gprc::Matrix3x4* mutable_cam1_projection();
  void set_allocated_cam1_projection(::com::bcom::solar::gprc::Matrix3x4* cam1_projection);
  private:
  const ::com::bcom::solar::gprc::Matrix3x4& _internal_cam1_projection() const;
  ::com::bcom::solar::gprc::Matrix3x4* _internal_mutable_cam1_projection();
  public:
  void unsafe_arena_set_allocated_cam1_projection(
      ::com::bcom::solar::gprc::Matrix3x4* cam1_projection);
  ::com::bcom::solar::gprc::Matrix3x4* unsafe_arena_release_cam1_projection();

  // .com.bcom.solar.gprc.Matrix3x3 cam2_rotation = 5;
  bool has_cam2_rotation() const;
  private:
  bool _internal_has_cam2_rotation() const;
  public:
  void clear_cam2_rotation();
  const ::com::bcom::solar::gprc::Matrix3x3& cam2_rotation() const;
  ::com::bcom::solar::gprc::Matrix3x3* release_cam2_rotation();
  ::com::bcom::solar::gprc::Matrix3x3* mutable_cam2_rotation();
  void set_allocated_cam2_rotation(::com::bcom::solar::gprc::Matrix3x3* cam2_rotation);
  private:
  const ::com::bcom::solar::gprc::Matrix3x3& _internal_cam2_rotation() const;
  ::com::bcom::solar::gprc::Matrix3x3* _internal_mutable_cam2_rotation();
  public:
  void unsafe_arena_set_allocated_cam2_rotation(
      ::com::bcom::solar::gprc::Matrix3x3* cam2_rotation);
  ::com::bcom::solar::gprc::Matrix3x3* unsafe_arena_release_cam2_rotation();

  // .com.bcom.solar.gprc.Matrix3x4 cam2_projection = 6;
  bool has_cam2_projection() const;
  private:
  bool _internal_has_cam2_projection() const;
  public:
  void clear_cam2_projection();
  const ::com::bcom::solar::gprc::Matrix3x4& cam2_projection() const;
  ::com::bcom::solar::gprc::Matrix3x4* release_cam2_projection();
  ::com::bcom::solar::gprc::Matrix3x4* mutable_cam2_projection();
  void set_allocated_cam2_projection(::com::bcom::solar::gprc::Matrix3x4* cam2_projection);
  private:
  const ::com::bcom::solar::gprc::Matrix3x4& _internal_cam2_projection() const;
  ::com::bcom::solar::gprc::Matrix3x4* _internal_mutable_cam2_projection();
  public:
  void unsafe_arena_set_allocated_cam2_projection(
      ::com::bcom::solar::gprc::Matrix3x4* cam2_projection);
  ::com::bcom::solar::gprc::Matrix3x4* unsafe_arena_release_cam2_projection();

  // .com.bcom.solar.gprc.StereoType cam1_stereo_type = 3;
  void clear_cam1_stereo_type();
  ::com::bcom::solar::gprc::StereoType cam1_stereo_type() const;
  void set_cam1_stereo_type(::com::bcom::solar::gprc::StereoType value);
  private:
  ::com::bcom::solar::gprc::StereoType _internal_cam1_stereo_type() const;
  void _internal_set_cam1_stereo_type(::com::bcom::solar::gprc::StereoType value);
  public:

  // float cam1_baseline = 4;
  void clear_cam1_baseline();
  float cam1_baseline() const;
  void set_cam1_baseline(float value);
  private:
  float _internal_cam1_baseline() const;
  void _internal_set_cam1_baseline(float value);
  public:

  // .com.bcom.solar.gprc.StereoType cam2_stereo_type = 7;
  void clear_cam2_stereo_type();
  ::com::bcom::solar::gprc::StereoType cam2_stereo_type() const;
  void set_cam2_stereo_type(::com::bcom::solar::gprc::StereoType value);
  private:
  ::com::bcom::solar::gprc::StereoType _internal_cam2_stereo_type() const;
  void _internal_set_cam2_stereo_type(::com::bcom::solar::gprc::StereoType value);
  public:

  // float cam2_baseline = 8;
  void clear_cam2_baseline();
  float cam2_baseline() const;
  void set_cam2_baseline(float value);
  private:
  float _internal_cam2_baseline() const;
  void _internal_set_cam2_baseline(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.RectificationParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::bcom::solar::gprc::Matrix3x3* cam1_rotation_;
  ::com::bcom::solar::gprc::Matrix3x4* cam1_projection_;
  ::com::bcom::solar::gprc::Matrix3x3* cam2_rotation_;
  ::com::bcom::solar::gprc::Matrix3x4* cam2_projection_;
  int cam1_stereo_type_;
  float cam1_baseline_;
  int cam2_stereo_type_;
  float cam2_baseline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class RelocalizationResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.RelocalizationResult) */ {
 public:
  inline RelocalizationResult() : RelocalizationResult(nullptr) {}
  virtual ~RelocalizationResult();
  explicit constexpr RelocalizationResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelocalizationResult(const RelocalizationResult& from);
  RelocalizationResult(RelocalizationResult&& from) noexcept
    : RelocalizationResult() {
    *this = ::std::move(from);
  }

  inline RelocalizationResult& operator=(const RelocalizationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelocalizationResult& operator=(RelocalizationResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelocalizationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelocalizationResult* internal_default_instance() {
    return reinterpret_cast<const RelocalizationResult*>(
               &_RelocalizationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RelocalizationResult& a, RelocalizationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RelocalizationResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelocalizationResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelocalizationResult* New() const final {
    return CreateMaybeMessage<RelocalizationResult>(nullptr);
  }

  RelocalizationResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelocalizationResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelocalizationResult& from);
  void MergeFrom(const RelocalizationResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelocalizationResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.RelocalizationResult";
  }
  protected:
  explicit RelocalizationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 2,
    kPoseStatusFieldNumber = 1,
    kConfidenceFieldNumber = 3,
  };
  // .com.bcom.solar.gprc.Matrix4x4 pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::com::bcom::solar::gprc::Matrix4x4& pose() const;
  ::com::bcom::solar::gprc::Matrix4x4* release_pose();
  ::com::bcom::solar::gprc::Matrix4x4* mutable_pose();
  void set_allocated_pose(::com::bcom::solar::gprc::Matrix4x4* pose);
  private:
  const ::com::bcom::solar::gprc::Matrix4x4& _internal_pose() const;
  ::com::bcom::solar::gprc::Matrix4x4* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::com::bcom::solar::gprc::Matrix4x4* pose);
  ::com::bcom::solar::gprc::Matrix4x4* unsafe_arena_release_pose();

  // .com.bcom.solar.gprc.RelocalizationPoseStatus pose_status = 1;
  void clear_pose_status();
  ::com::bcom::solar::gprc::RelocalizationPoseStatus pose_status() const;
  void set_pose_status(::com::bcom::solar::gprc::RelocalizationPoseStatus value);
  private:
  ::com::bcom::solar::gprc::RelocalizationPoseStatus _internal_pose_status() const;
  void _internal_set_pose_status(::com::bcom::solar::gprc::RelocalizationPoseStatus value);
  public:

  // float confidence = 3;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.RelocalizationResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::bcom::solar::gprc::Matrix4x4* pose_;
  int pose_status_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  virtual ~Image();
  explicit constexpr Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kLayoutFieldNumber = 4,
    kImageCompressionFieldNumber = 5,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .com.bcom.solar.gprc.ImageLayout layout = 4;
  void clear_layout();
  ::com::bcom::solar::gprc::ImageLayout layout() const;
  void set_layout(::com::bcom::solar::gprc::ImageLayout value);
  private:
  ::com::bcom::solar::gprc::ImageLayout _internal_layout() const;
  void _internal_set_layout(::com::bcom::solar::gprc::ImageLayout value);
  public:

  // .com.bcom.solar.gprc.ImageCompression imageCompression = 5;
  void clear_imagecompression();
  ::com::bcom::solar::gprc::ImageCompression imagecompression() const;
  void set_imagecompression(::com::bcom::solar::gprc::ImageCompression value);
  private:
  ::com::bcom::solar::gprc::ImageCompression _internal_imagecompression() const;
  void _internal_set_imagecompression(::com::bcom::solar::gprc::ImageCompression value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  int layout_;
  int imagecompression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Frames PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Frames) */ {
 public:
  inline Frames() : Frames(nullptr) {}
  virtual ~Frames();
  explicit constexpr Frames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frames(const Frames& from);
  Frames(Frames&& from) noexcept
    : Frames() {
    *this = ::std::move(from);
  }

  inline Frames& operator=(const Frames& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frames& operator=(Frames&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frames& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frames* internal_default_instance() {
    return reinterpret_cast<const Frames*>(
               &_Frames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Frames& a, Frames& b) {
    a.Swap(&b);
  }
  inline void Swap(Frames* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frames* New() const final {
    return CreateMaybeMessage<Frames>(nullptr);
  }

  Frames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frames>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frames& from);
  void MergeFrom(const Frames& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frames* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Frames";
  }
  protected:
  explicit Frames(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
  };
  // repeated .com.bcom.solar.gprc.Frame frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::com::bcom::solar::gprc::Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::bcom::solar::gprc::Frame >*
      mutable_frames();
  private:
  const ::com::bcom::solar::gprc::Frame& _internal_frames(int index) const;
  ::com::bcom::solar::gprc::Frame* _internal_add_frames();
  public:
  const ::com::bcom::solar::gprc::Frame& frames(int index) const;
  ::com::bcom::solar::gprc::Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::bcom::solar::gprc::Frame >&
      frames() const;

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Frames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::bcom::solar::gprc::Frame > frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  virtual ~Frame();
  explicit constexpr Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kPoseFieldNumber = 4,
    kTimestampFieldNumber = 3,
    kSensorIdFieldNumber = 1,
  };
  // .com.bcom.solar.gprc.Image image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::com::bcom::solar::gprc::Image& image() const;
  ::com::bcom::solar::gprc::Image* release_image();
  ::com::bcom::solar::gprc::Image* mutable_image();
  void set_allocated_image(::com::bcom::solar::gprc::Image* image);
  private:
  const ::com::bcom::solar::gprc::Image& _internal_image() const;
  ::com::bcom::solar::gprc::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::com::bcom::solar::gprc::Image* image);
  ::com::bcom::solar::gprc::Image* unsafe_arena_release_image();

  // .com.bcom.solar.gprc.Matrix4x4 pose = 4;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::com::bcom::solar::gprc::Matrix4x4& pose() const;
  ::com::bcom::solar::gprc::Matrix4x4* release_pose();
  ::com::bcom::solar::gprc::Matrix4x4* mutable_pose();
  void set_allocated_pose(::com::bcom::solar::gprc::Matrix4x4* pose);
  private:
  const ::com::bcom::solar::gprc::Matrix4x4& _internal_pose() const;
  ::com::bcom::solar::gprc::Matrix4x4* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::com::bcom::solar::gprc::Matrix4x4* pose);
  ::com::bcom::solar::gprc::Matrix4x4* unsafe_arena_release_pose();

  // uint64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 sensor_id = 1;
  void clear_sensor_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sensor_id() const;
  void set_sensor_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sensor_id() const;
  void _internal_set_sensor_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::bcom::solar::gprc::Image* image_;
  ::com::bcom::solar::gprc::Matrix4x4* pose_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 sensor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Matrix4x4 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Matrix4x4) */ {
 public:
  inline Matrix4x4() : Matrix4x4(nullptr) {}
  virtual ~Matrix4x4();
  explicit constexpr Matrix4x4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Matrix4x4(const Matrix4x4& from);
  Matrix4x4(Matrix4x4&& from) noexcept
    : Matrix4x4() {
    *this = ::std::move(from);
  }

  inline Matrix4x4& operator=(const Matrix4x4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix4x4& operator=(Matrix4x4&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Matrix4x4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Matrix4x4* internal_default_instance() {
    return reinterpret_cast<const Matrix4x4*>(
               &_Matrix4x4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Matrix4x4& a, Matrix4x4& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix4x4* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix4x4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Matrix4x4* New() const final {
    return CreateMaybeMessage<Matrix4x4>(nullptr);
  }

  Matrix4x4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Matrix4x4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Matrix4x4& from);
  void MergeFrom(const Matrix4x4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix4x4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Matrix4x4";
  }
  protected:
  explicit Matrix4x4(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kM11FieldNumber = 1,
    kM12FieldNumber = 2,
    kM13FieldNumber = 3,
    kM14FieldNumber = 4,
    kM21FieldNumber = 5,
    kM22FieldNumber = 6,
    kM23FieldNumber = 7,
    kM24FieldNumber = 8,
    kM31FieldNumber = 9,
    kM32FieldNumber = 10,
    kM33FieldNumber = 11,
    kM34FieldNumber = 12,
    kM41FieldNumber = 13,
    kM42FieldNumber = 14,
    kM43FieldNumber = 15,
    kM44FieldNumber = 16,
  };
  // float m11 = 1;
  void clear_m11();
  float m11() const;
  void set_m11(float value);
  private:
  float _internal_m11() const;
  void _internal_set_m11(float value);
  public:

  // float m12 = 2;
  void clear_m12();
  float m12() const;
  void set_m12(float value);
  private:
  float _internal_m12() const;
  void _internal_set_m12(float value);
  public:

  // float m13 = 3;
  void clear_m13();
  float m13() const;
  void set_m13(float value);
  private:
  float _internal_m13() const;
  void _internal_set_m13(float value);
  public:

  // float m14 = 4;
  void clear_m14();
  float m14() const;
  void set_m14(float value);
  private:
  float _internal_m14() const;
  void _internal_set_m14(float value);
  public:

  // float m21 = 5;
  void clear_m21();
  float m21() const;
  void set_m21(float value);
  private:
  float _internal_m21() const;
  void _internal_set_m21(float value);
  public:

  // float m22 = 6;
  void clear_m22();
  float m22() const;
  void set_m22(float value);
  private:
  float _internal_m22() const;
  void _internal_set_m22(float value);
  public:

  // float m23 = 7;
  void clear_m23();
  float m23() const;
  void set_m23(float value);
  private:
  float _internal_m23() const;
  void _internal_set_m23(float value);
  public:

  // float m24 = 8;
  void clear_m24();
  float m24() const;
  void set_m24(float value);
  private:
  float _internal_m24() const;
  void _internal_set_m24(float value);
  public:

  // float m31 = 9;
  void clear_m31();
  float m31() const;
  void set_m31(float value);
  private:
  float _internal_m31() const;
  void _internal_set_m31(float value);
  public:

  // float m32 = 10;
  void clear_m32();
  float m32() const;
  void set_m32(float value);
  private:
  float _internal_m32() const;
  void _internal_set_m32(float value);
  public:

  // float m33 = 11;
  void clear_m33();
  float m33() const;
  void set_m33(float value);
  private:
  float _internal_m33() const;
  void _internal_set_m33(float value);
  public:

  // float m34 = 12;
  void clear_m34();
  float m34() const;
  void set_m34(float value);
  private:
  float _internal_m34() const;
  void _internal_set_m34(float value);
  public:

  // float m41 = 13;
  void clear_m41();
  float m41() const;
  void set_m41(float value);
  private:
  float _internal_m41() const;
  void _internal_set_m41(float value);
  public:

  // float m42 = 14;
  void clear_m42();
  float m42() const;
  void set_m42(float value);
  private:
  float _internal_m42() const;
  void _internal_set_m42(float value);
  public:

  // float m43 = 15;
  void clear_m43();
  float m43() const;
  void set_m43(float value);
  private:
  float _internal_m43() const;
  void _internal_set_m43(float value);
  public:

  // float m44 = 16;
  void clear_m44();
  float m44() const;
  void set_m44(float value);
  private:
  float _internal_m44() const;
  void _internal_set_m44(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Matrix4x4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float m11_;
  float m12_;
  float m13_;
  float m14_;
  float m21_;
  float m22_;
  float m23_;
  float m24_;
  float m31_;
  float m32_;
  float m33_;
  float m34_;
  float m41_;
  float m42_;
  float m43_;
  float m44_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Matrix3x3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Matrix3x3) */ {
 public:
  inline Matrix3x3() : Matrix3x3(nullptr) {}
  virtual ~Matrix3x3();
  explicit constexpr Matrix3x3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Matrix3x3(const Matrix3x3& from);
  Matrix3x3(Matrix3x3&& from) noexcept
    : Matrix3x3() {
    *this = ::std::move(from);
  }

  inline Matrix3x3& operator=(const Matrix3x3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix3x3& operator=(Matrix3x3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Matrix3x3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Matrix3x3* internal_default_instance() {
    return reinterpret_cast<const Matrix3x3*>(
               &_Matrix3x3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Matrix3x3& a, Matrix3x3& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix3x3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix3x3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Matrix3x3* New() const final {
    return CreateMaybeMessage<Matrix3x3>(nullptr);
  }

  Matrix3x3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Matrix3x3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Matrix3x3& from);
  void MergeFrom(const Matrix3x3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix3x3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Matrix3x3";
  }
  protected:
  explicit Matrix3x3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kM11FieldNumber = 1,
    kM12FieldNumber = 2,
    kM13FieldNumber = 3,
    kM21FieldNumber = 4,
    kM22FieldNumber = 5,
    kM23FieldNumber = 6,
    kM31FieldNumber = 7,
    kM32FieldNumber = 8,
    kM33FieldNumber = 9,
  };
  // float m11 = 1;
  void clear_m11();
  float m11() const;
  void set_m11(float value);
  private:
  float _internal_m11() const;
  void _internal_set_m11(float value);
  public:

  // float m12 = 2;
  void clear_m12();
  float m12() const;
  void set_m12(float value);
  private:
  float _internal_m12() const;
  void _internal_set_m12(float value);
  public:

  // float m13 = 3;
  void clear_m13();
  float m13() const;
  void set_m13(float value);
  private:
  float _internal_m13() const;
  void _internal_set_m13(float value);
  public:

  // float m21 = 4;
  void clear_m21();
  float m21() const;
  void set_m21(float value);
  private:
  float _internal_m21() const;
  void _internal_set_m21(float value);
  public:

  // float m22 = 5;
  void clear_m22();
  float m22() const;
  void set_m22(float value);
  private:
  float _internal_m22() const;
  void _internal_set_m22(float value);
  public:

  // float m23 = 6;
  void clear_m23();
  float m23() const;
  void set_m23(float value);
  private:
  float _internal_m23() const;
  void _internal_set_m23(float value);
  public:

  // float m31 = 7;
  void clear_m31();
  float m31() const;
  void set_m31(float value);
  private:
  float _internal_m31() const;
  void _internal_set_m31(float value);
  public:

  // float m32 = 8;
  void clear_m32();
  float m32() const;
  void set_m32(float value);
  private:
  float _internal_m32() const;
  void _internal_set_m32(float value);
  public:

  // float m33 = 9;
  void clear_m33();
  float m33() const;
  void set_m33(float value);
  private:
  float _internal_m33() const;
  void _internal_set_m33(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Matrix3x3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float m11_;
  float m12_;
  float m13_;
  float m21_;
  float m22_;
  float m23_;
  float m31_;
  float m32_;
  float m33_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Matrix3x4 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Matrix3x4) */ {
 public:
  inline Matrix3x4() : Matrix3x4(nullptr) {}
  virtual ~Matrix3x4();
  explicit constexpr Matrix3x4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Matrix3x4(const Matrix3x4& from);
  Matrix3x4(Matrix3x4&& from) noexcept
    : Matrix3x4() {
    *this = ::std::move(from);
  }

  inline Matrix3x4& operator=(const Matrix3x4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix3x4& operator=(Matrix3x4&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Matrix3x4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Matrix3x4* internal_default_instance() {
    return reinterpret_cast<const Matrix3x4*>(
               &_Matrix3x4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Matrix3x4& a, Matrix3x4& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix3x4* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix3x4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Matrix3x4* New() const final {
    return CreateMaybeMessage<Matrix3x4>(nullptr);
  }

  Matrix3x4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Matrix3x4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Matrix3x4& from);
  void MergeFrom(const Matrix3x4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix3x4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Matrix3x4";
  }
  protected:
  explicit Matrix3x4(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kM11FieldNumber = 1,
    kM12FieldNumber = 2,
    kM13FieldNumber = 3,
    kM14FieldNumber = 4,
    kM21FieldNumber = 5,
    kM22FieldNumber = 6,
    kM23FieldNumber = 7,
    kM24FieldNumber = 8,
    kM31FieldNumber = 9,
    kM32FieldNumber = 10,
    kM33FieldNumber = 11,
    kM34FieldNumber = 12,
  };
  // float m11 = 1;
  void clear_m11();
  float m11() const;
  void set_m11(float value);
  private:
  float _internal_m11() const;
  void _internal_set_m11(float value);
  public:

  // float m12 = 2;
  void clear_m12();
  float m12() const;
  void set_m12(float value);
  private:
  float _internal_m12() const;
  void _internal_set_m12(float value);
  public:

  // float m13 = 3;
  void clear_m13();
  float m13() const;
  void set_m13(float value);
  private:
  float _internal_m13() const;
  void _internal_set_m13(float value);
  public:

  // float m14 = 4;
  void clear_m14();
  float m14() const;
  void set_m14(float value);
  private:
  float _internal_m14() const;
  void _internal_set_m14(float value);
  public:

  // float m21 = 5;
  void clear_m21();
  float m21() const;
  void set_m21(float value);
  private:
  float _internal_m21() const;
  void _internal_set_m21(float value);
  public:

  // float m22 = 6;
  void clear_m22();
  float m22() const;
  void set_m22(float value);
  private:
  float _internal_m22() const;
  void _internal_set_m22(float value);
  public:

  // float m23 = 7;
  void clear_m23();
  float m23() const;
  void set_m23(float value);
  private:
  float _internal_m23() const;
  void _internal_set_m23(float value);
  public:

  // float m24 = 8;
  void clear_m24();
  float m24() const;
  void set_m24(float value);
  private:
  float _internal_m24() const;
  void _internal_set_m24(float value);
  public:

  // float m31 = 9;
  void clear_m31();
  float m31() const;
  void set_m31(float value);
  private:
  float _internal_m31() const;
  void _internal_set_m31(float value);
  public:

  // float m32 = 10;
  void clear_m32();
  float m32() const;
  void set_m32(float value);
  private:
  float _internal_m32() const;
  void _internal_set_m32(float value);
  public:

  // float m33 = 11;
  void clear_m33();
  float m33() const;
  void set_m33(float value);
  private:
  float _internal_m33() const;
  void _internal_set_m33(float value);
  public:

  // float m34 = 12;
  void clear_m34();
  float m34() const;
  void set_m34(float value);
  private:
  float _internal_m34() const;
  void _internal_set_m34(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Matrix3x4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float m11_;
  float m12_;
  float m13_;
  float m14_;
  float m21_;
  float m22_;
  float m23_;
  float m24_;
  float m31_;
  float m32_;
  float m33_;
  float m34_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// PipelineModeValue

// .com.bcom.solar.gprc.PipelineMode pipeline_mode = 1;
inline void PipelineModeValue::clear_pipeline_mode() {
  pipeline_mode_ = 0;
}
inline ::com::bcom::solar::gprc::PipelineMode PipelineModeValue::_internal_pipeline_mode() const {
  return static_cast< ::com::bcom::solar::gprc::PipelineMode >(pipeline_mode_);
}
inline ::com::bcom::solar::gprc::PipelineMode PipelineModeValue::pipeline_mode() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.PipelineModeValue.pipeline_mode)
  return _internal_pipeline_mode();
}
inline void PipelineModeValue::_internal_set_pipeline_mode(::com::bcom::solar::gprc::PipelineMode value) {
  
  pipeline_mode_ = value;
}
inline void PipelineModeValue::set_pipeline_mode(::com::bcom::solar::gprc::PipelineMode value) {
  _internal_set_pipeline_mode(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.PipelineModeValue.pipeline_mode)
}

// -------------------------------------------------------------------

// Message

// string message = 1;
inline void Message::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Message::message() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Message.message)
  return _internal_message();
}
inline void Message::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Message.message)
}
inline std::string* Message::mutable_message() {
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.Message.message)
  return _internal_mutable_message();
}
inline const std::string& Message::_internal_message() const {
  return message_.Get();
}
inline void Message::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.bcom.solar.gprc.Message.message)
}
inline void Message::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.bcom.solar.gprc.Message.message)
}
inline void Message::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.bcom.solar.gprc.Message.message)
}
inline std::string* Message::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message::release_message() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.Message.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.Message.message)
}

// -------------------------------------------------------------------

// CameraParameters

// string name = 1;
inline void CameraParameters::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CameraParameters::name() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParameters.name)
  return _internal_name();
}
inline void CameraParameters::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParameters.name)
}
inline std::string* CameraParameters::mutable_name() {
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.CameraParameters.name)
  return _internal_mutable_name();
}
inline const std::string& CameraParameters::_internal_name() const {
  return name_.Get();
}
inline void CameraParameters::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CameraParameters::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.bcom.solar.gprc.CameraParameters.name)
}
inline void CameraParameters::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.bcom.solar.gprc.CameraParameters.name)
}
inline void CameraParameters::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.bcom.solar.gprc.CameraParameters.name)
}
inline std::string* CameraParameters::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CameraParameters::release_name() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.CameraParameters.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraParameters::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.CameraParameters.name)
}

// uint32 id = 2;
inline void CameraParameters::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraParameters::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraParameters::id() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParameters.id)
  return _internal_id();
}
inline void CameraParameters::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CameraParameters::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParameters.id)
}

// .com.bcom.solar.gprc.CameraType camera_type = 3;
inline void CameraParameters::clear_camera_type() {
  camera_type_ = 0;
}
inline ::com::bcom::solar::gprc::CameraType CameraParameters::_internal_camera_type() const {
  return static_cast< ::com::bcom::solar::gprc::CameraType >(camera_type_);
}
inline ::com::bcom::solar::gprc::CameraType CameraParameters::camera_type() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParameters.camera_type)
  return _internal_camera_type();
}
inline void CameraParameters::_internal_set_camera_type(::com::bcom::solar::gprc::CameraType value) {
  
  camera_type_ = value;
}
inline void CameraParameters::set_camera_type(::com::bcom::solar::gprc::CameraType value) {
  _internal_set_camera_type(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParameters.camera_type)
}

// uint32 width = 4;
inline void CameraParameters::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraParameters::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraParameters::width() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParameters.width)
  return _internal_width();
}
inline void CameraParameters::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void CameraParameters::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParameters.width)
}

// uint32 height = 5;
inline void CameraParameters::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraParameters::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraParameters::height() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParameters.height)
  return _internal_height();
}
inline void CameraParameters::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void CameraParameters::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParameters.height)
}

// .com.bcom.solar.gprc.Matrix3x3 intrinsics = 6;
inline bool CameraParameters::_internal_has_intrinsics() const {
  return this != internal_default_instance() && intrinsics_ != nullptr;
}
inline bool CameraParameters::has_intrinsics() const {
  return _internal_has_intrinsics();
}
inline void CameraParameters::clear_intrinsics() {
  if (GetArena() == nullptr && intrinsics_ != nullptr) {
    delete intrinsics_;
  }
  intrinsics_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix3x3& CameraParameters::_internal_intrinsics() const {
  const ::com::bcom::solar::gprc::Matrix3x3* p = intrinsics_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix3x3&>(
      ::com::bcom::solar::gprc::_Matrix3x3_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix3x3& CameraParameters::intrinsics() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParameters.intrinsics)
  return _internal_intrinsics();
}
inline void CameraParameters::unsafe_arena_set_allocated_intrinsics(
    ::com::bcom::solar::gprc::Matrix3x3* intrinsics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intrinsics_);
  }
  intrinsics_ = intrinsics;
  if (intrinsics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.CameraParameters.intrinsics)
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParameters::release_intrinsics() {
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = intrinsics_;
  intrinsics_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParameters::unsafe_arena_release_intrinsics() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.CameraParameters.intrinsics)
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = intrinsics_;
  intrinsics_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParameters::_internal_mutable_intrinsics() {
  
  if (intrinsics_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x3>(GetArena());
    intrinsics_ = p;
  }
  return intrinsics_;
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParameters::mutable_intrinsics() {
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.CameraParameters.intrinsics)
  return _internal_mutable_intrinsics();
}
inline void CameraParameters::set_allocated_intrinsics(::com::bcom::solar::gprc::Matrix3x3* intrinsics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete intrinsics_;
  }
  if (intrinsics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(intrinsics);
    if (message_arena != submessage_arena) {
      intrinsics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intrinsics, submessage_arena);
    }
    
  } else {
    
  }
  intrinsics_ = intrinsics;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.CameraParameters.intrinsics)
}

// .com.bcom.solar.gprc.CameraDistortion distortion = 7;
inline bool CameraParameters::_internal_has_distortion() const {
  return this != internal_default_instance() && distortion_ != nullptr;
}
inline bool CameraParameters::has_distortion() const {
  return _internal_has_distortion();
}
inline void CameraParameters::clear_distortion() {
  if (GetArena() == nullptr && distortion_ != nullptr) {
    delete distortion_;
  }
  distortion_ = nullptr;
}
inline const ::com::bcom::solar::gprc::CameraDistortion& CameraParameters::_internal_distortion() const {
  const ::com::bcom::solar::gprc::CameraDistortion* p = distortion_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::CameraDistortion&>(
      ::com::bcom::solar::gprc::_CameraDistortion_default_instance_);
}
inline const ::com::bcom::solar::gprc::CameraDistortion& CameraParameters::distortion() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParameters.distortion)
  return _internal_distortion();
}
inline void CameraParameters::unsafe_arena_set_allocated_distortion(
    ::com::bcom::solar::gprc::CameraDistortion* distortion) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(distortion_);
  }
  distortion_ = distortion;
  if (distortion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.CameraParameters.distortion)
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParameters::release_distortion() {
  
  ::com::bcom::solar::gprc::CameraDistortion* temp = distortion_;
  distortion_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParameters::unsafe_arena_release_distortion() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.CameraParameters.distortion)
  
  ::com::bcom::solar::gprc::CameraDistortion* temp = distortion_;
  distortion_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParameters::_internal_mutable_distortion() {
  
  if (distortion_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::CameraDistortion>(GetArena());
    distortion_ = p;
  }
  return distortion_;
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParameters::mutable_distortion() {
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.CameraParameters.distortion)
  return _internal_mutable_distortion();
}
inline void CameraParameters::set_allocated_distortion(::com::bcom::solar::gprc::CameraDistortion* distortion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete distortion_;
  }
  if (distortion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(distortion);
    if (message_arena != submessage_arena) {
      distortion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distortion, submessage_arena);
    }
    
  } else {
    
  }
  distortion_ = distortion;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.CameraParameters.distortion)
}

// -------------------------------------------------------------------

// CameraDistortion

// float K_1 = 1;
inline void CameraDistortion::clear_k_1() {
  k_1_ = 0;
}
inline float CameraDistortion::_internal_k_1() const {
  return k_1_;
}
inline float CameraDistortion::k_1() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraDistortion.K_1)
  return _internal_k_1();
}
inline void CameraDistortion::_internal_set_k_1(float value) {
  
  k_1_ = value;
}
inline void CameraDistortion::set_k_1(float value) {
  _internal_set_k_1(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraDistortion.K_1)
}

// float K_2 = 2;
inline void CameraDistortion::clear_k_2() {
  k_2_ = 0;
}
inline float CameraDistortion::_internal_k_2() const {
  return k_2_;
}
inline float CameraDistortion::k_2() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraDistortion.K_2)
  return _internal_k_2();
}
inline void CameraDistortion::_internal_set_k_2(float value) {
  
  k_2_ = value;
}
inline void CameraDistortion::set_k_2(float value) {
  _internal_set_k_2(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraDistortion.K_2)
}

// float P_1 = 3;
inline void CameraDistortion::clear_p_1() {
  p_1_ = 0;
}
inline float CameraDistortion::_internal_p_1() const {
  return p_1_;
}
inline float CameraDistortion::p_1() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraDistortion.P_1)
  return _internal_p_1();
}
inline void CameraDistortion::_internal_set_p_1(float value) {
  
  p_1_ = value;
}
inline void CameraDistortion::set_p_1(float value) {
  _internal_set_p_1(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraDistortion.P_1)
}

// float P_2 = 4;
inline void CameraDistortion::clear_p_2() {
  p_2_ = 0;
}
inline float CameraDistortion::_internal_p_2() const {
  return p_2_;
}
inline float CameraDistortion::p_2() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraDistortion.P_2)
  return _internal_p_2();
}
inline void CameraDistortion::_internal_set_p_2(float value) {
  
  p_2_ = value;
}
inline void CameraDistortion::set_p_2(float value) {
  _internal_set_p_2(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraDistortion.P_2)
}

// float K_3 = 5;
inline void CameraDistortion::clear_k_3() {
  k_3_ = 0;
}
inline float CameraDistortion::_internal_k_3() const {
  return k_3_;
}
inline float CameraDistortion::k_3() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraDistortion.K_3)
  return _internal_k_3();
}
inline void CameraDistortion::_internal_set_k_3(float value) {
  
  k_3_ = value;
}
inline void CameraDistortion::set_k_3(float value) {
  _internal_set_k_3(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraDistortion.K_3)
}

// -------------------------------------------------------------------

// RectificationParameters

// .com.bcom.solar.gprc.Matrix3x3 cam1_rotation = 1;
inline bool RectificationParameters::_internal_has_cam1_rotation() const {
  return this != internal_default_instance() && cam1_rotation_ != nullptr;
}
inline bool RectificationParameters::has_cam1_rotation() const {
  return _internal_has_cam1_rotation();
}
inline void RectificationParameters::clear_cam1_rotation() {
  if (GetArena() == nullptr && cam1_rotation_ != nullptr) {
    delete cam1_rotation_;
  }
  cam1_rotation_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix3x3& RectificationParameters::_internal_cam1_rotation() const {
  const ::com::bcom::solar::gprc::Matrix3x3* p = cam1_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix3x3&>(
      ::com::bcom::solar::gprc::_Matrix3x3_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix3x3& RectificationParameters::cam1_rotation() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam1_rotation)
  return _internal_cam1_rotation();
}
inline void RectificationParameters::unsafe_arena_set_allocated_cam1_rotation(
    ::com::bcom::solar::gprc::Matrix3x3* cam1_rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cam1_rotation_);
  }
  cam1_rotation_ = cam1_rotation;
  if (cam1_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam1_rotation)
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::release_cam1_rotation() {
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = cam1_rotation_;
  cam1_rotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::unsafe_arena_release_cam1_rotation() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.RectificationParameters.cam1_rotation)
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = cam1_rotation_;
  cam1_rotation_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::_internal_mutable_cam1_rotation() {
  
  if (cam1_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x3>(GetArena());
    cam1_rotation_ = p;
  }
  return cam1_rotation_;
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::mutable_cam1_rotation() {
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.RectificationParameters.cam1_rotation)
  return _internal_mutable_cam1_rotation();
}
inline void RectificationParameters::set_allocated_cam1_rotation(::com::bcom::solar::gprc::Matrix3x3* cam1_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cam1_rotation_;
  }
  if (cam1_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cam1_rotation);
    if (message_arena != submessage_arena) {
      cam1_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cam1_rotation, submessage_arena);
    }
    
  } else {
    
  }
  cam1_rotation_ = cam1_rotation;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam1_rotation)
}

// .com.bcom.solar.gprc.Matrix3x4 cam1_projection = 2;
inline bool RectificationParameters::_internal_has_cam1_projection() const {
  return this != internal_default_instance() && cam1_projection_ != nullptr;
}
inline bool RectificationParameters::has_cam1_projection() const {
  return _internal_has_cam1_projection();
}
inline void RectificationParameters::clear_cam1_projection() {
  if (GetArena() == nullptr && cam1_projection_ != nullptr) {
    delete cam1_projection_;
  }
  cam1_projection_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix3x4& RectificationParameters::_internal_cam1_projection() const {
  const ::com::bcom::solar::gprc::Matrix3x4* p = cam1_projection_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix3x4&>(
      ::com::bcom::solar::gprc::_Matrix3x4_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix3x4& RectificationParameters::cam1_projection() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam1_projection)
  return _internal_cam1_projection();
}
inline void RectificationParameters::unsafe_arena_set_allocated_cam1_projection(
    ::com::bcom::solar::gprc::Matrix3x4* cam1_projection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cam1_projection_);
  }
  cam1_projection_ = cam1_projection;
  if (cam1_projection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam1_projection)
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::release_cam1_projection() {
  
  ::com::bcom::solar::gprc::Matrix3x4* temp = cam1_projection_;
  cam1_projection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::unsafe_arena_release_cam1_projection() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.RectificationParameters.cam1_projection)
  
  ::com::bcom::solar::gprc::Matrix3x4* temp = cam1_projection_;
  cam1_projection_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::_internal_mutable_cam1_projection() {
  
  if (cam1_projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x4>(GetArena());
    cam1_projection_ = p;
  }
  return cam1_projection_;
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::mutable_cam1_projection() {
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.RectificationParameters.cam1_projection)
  return _internal_mutable_cam1_projection();
}
inline void RectificationParameters::set_allocated_cam1_projection(::com::bcom::solar::gprc::Matrix3x4* cam1_projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cam1_projection_;
  }
  if (cam1_projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cam1_projection);
    if (message_arena != submessage_arena) {
      cam1_projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cam1_projection, submessage_arena);
    }
    
  } else {
    
  }
  cam1_projection_ = cam1_projection;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam1_projection)
}

// .com.bcom.solar.gprc.StereoType cam1_stereo_type = 3;
inline void RectificationParameters::clear_cam1_stereo_type() {
  cam1_stereo_type_ = 0;
}
inline ::com::bcom::solar::gprc::StereoType RectificationParameters::_internal_cam1_stereo_type() const {
  return static_cast< ::com::bcom::solar::gprc::StereoType >(cam1_stereo_type_);
}
inline ::com::bcom::solar::gprc::StereoType RectificationParameters::cam1_stereo_type() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam1_stereo_type)
  return _internal_cam1_stereo_type();
}
inline void RectificationParameters::_internal_set_cam1_stereo_type(::com::bcom::solar::gprc::StereoType value) {
  
  cam1_stereo_type_ = value;
}
inline void RectificationParameters::set_cam1_stereo_type(::com::bcom::solar::gprc::StereoType value) {
  _internal_set_cam1_stereo_type(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.RectificationParameters.cam1_stereo_type)
}

// float cam1_baseline = 4;
inline void RectificationParameters::clear_cam1_baseline() {
  cam1_baseline_ = 0;
}
inline float RectificationParameters::_internal_cam1_baseline() const {
  return cam1_baseline_;
}
inline float RectificationParameters::cam1_baseline() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam1_baseline)
  return _internal_cam1_baseline();
}
inline void RectificationParameters::_internal_set_cam1_baseline(float value) {
  
  cam1_baseline_ = value;
}
inline void RectificationParameters::set_cam1_baseline(float value) {
  _internal_set_cam1_baseline(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.RectificationParameters.cam1_baseline)
}

// .com.bcom.solar.gprc.Matrix3x3 cam2_rotation = 5;
inline bool RectificationParameters::_internal_has_cam2_rotation() const {
  return this != internal_default_instance() && cam2_rotation_ != nullptr;
}
inline bool RectificationParameters::has_cam2_rotation() const {
  return _internal_has_cam2_rotation();
}
inline void RectificationParameters::clear_cam2_rotation() {
  if (GetArena() == nullptr && cam2_rotation_ != nullptr) {
    delete cam2_rotation_;
  }
  cam2_rotation_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix3x3& RectificationParameters::_internal_cam2_rotation() const {
  const ::com::bcom::solar::gprc::Matrix3x3* p = cam2_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix3x3&>(
      ::com::bcom::solar::gprc::_Matrix3x3_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix3x3& RectificationParameters::cam2_rotation() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam2_rotation)
  return _internal_cam2_rotation();
}
inline void RectificationParameters::unsafe_arena_set_allocated_cam2_rotation(
    ::com::bcom::solar::gprc::Matrix3x3* cam2_rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cam2_rotation_);
  }
  cam2_rotation_ = cam2_rotation;
  if (cam2_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam2_rotation)
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::release_cam2_rotation() {
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = cam2_rotation_;
  cam2_rotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::unsafe_arena_release_cam2_rotation() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.RectificationParameters.cam2_rotation)
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = cam2_rotation_;
  cam2_rotation_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::_internal_mutable_cam2_rotation() {
  
  if (cam2_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x3>(GetArena());
    cam2_rotation_ = p;
  }
  return cam2_rotation_;
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::mutable_cam2_rotation() {
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.RectificationParameters.cam2_rotation)
  return _internal_mutable_cam2_rotation();
}
inline void RectificationParameters::set_allocated_cam2_rotation(::com::bcom::solar::gprc::Matrix3x3* cam2_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cam2_rotation_;
  }
  if (cam2_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cam2_rotation);
    if (message_arena != submessage_arena) {
      cam2_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cam2_rotation, submessage_arena);
    }
    
  } else {
    
  }
  cam2_rotation_ = cam2_rotation;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam2_rotation)
}

// .com.bcom.solar.gprc.Matrix3x4 cam2_projection = 6;
inline bool RectificationParameters::_internal_has_cam2_projection() const {
  return this != internal_default_instance() && cam2_projection_ != nullptr;
}
inline bool RectificationParameters::has_cam2_projection() const {
  return _internal_has_cam2_projection();
}
inline void RectificationParameters::clear_cam2_projection() {
  if (GetArena() == nullptr && cam2_projection_ != nullptr) {
    delete cam2_projection_;
  }
  cam2_projection_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix3x4& RectificationParameters::_internal_cam2_projection() const {
  const ::com::bcom::solar::gprc::Matrix3x4* p = cam2_projection_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix3x4&>(
      ::com::bcom::solar::gprc::_Matrix3x4_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix3x4& RectificationParameters::cam2_projection() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam2_projection)
  return _internal_cam2_projection();
}
inline void RectificationParameters::unsafe_arena_set_allocated_cam2_projection(
    ::com::bcom::solar::gprc::Matrix3x4* cam2_projection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cam2_projection_);
  }
  cam2_projection_ = cam2_projection;
  if (cam2_projection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam2_projection)
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::release_cam2_projection() {
  
  ::com::bcom::solar::gprc::Matrix3x4* temp = cam2_projection_;
  cam2_projection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::unsafe_arena_release_cam2_projection() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.RectificationParameters.cam2_projection)
  
  ::com::bcom::solar::gprc::Matrix3x4* temp = cam2_projection_;
  cam2_projection_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::_internal_mutable_cam2_projection() {
  
  if (cam2_projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x4>(GetArena());
    cam2_projection_ = p;
  }
  return cam2_projection_;
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::mutable_cam2_projection() {
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.RectificationParameters.cam2_projection)
  return _internal_mutable_cam2_projection();
}
inline void RectificationParameters::set_allocated_cam2_projection(::com::bcom::solar::gprc::Matrix3x4* cam2_projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cam2_projection_;
  }
  if (cam2_projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cam2_projection);
    if (message_arena != submessage_arena) {
      cam2_projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cam2_projection, submessage_arena);
    }
    
  } else {
    
  }
  cam2_projection_ = cam2_projection;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam2_projection)
}

// .com.bcom.solar.gprc.StereoType cam2_stereo_type = 7;
inline void RectificationParameters::clear_cam2_stereo_type() {
  cam2_stereo_type_ = 0;
}
inline ::com::bcom::solar::gprc::StereoType RectificationParameters::_internal_cam2_stereo_type() const {
  return static_cast< ::com::bcom::solar::gprc::StereoType >(cam2_stereo_type_);
}
inline ::com::bcom::solar::gprc::StereoType RectificationParameters::cam2_stereo_type() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam2_stereo_type)
  return _internal_cam2_stereo_type();
}
inline void RectificationParameters::_internal_set_cam2_stereo_type(::com::bcom::solar::gprc::StereoType value) {
  
  cam2_stereo_type_ = value;
}
inline void RectificationParameters::set_cam2_stereo_type(::com::bcom::solar::gprc::StereoType value) {
  _internal_set_cam2_stereo_type(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.RectificationParameters.cam2_stereo_type)
}

// float cam2_baseline = 8;
inline void RectificationParameters::clear_cam2_baseline() {
  cam2_baseline_ = 0;
}
inline float RectificationParameters::_internal_cam2_baseline() const {
  return cam2_baseline_;
}
inline float RectificationParameters::cam2_baseline() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam2_baseline)
  return _internal_cam2_baseline();
}
inline void RectificationParameters::_internal_set_cam2_baseline(float value) {
  
  cam2_baseline_ = value;
}
inline void RectificationParameters::set_cam2_baseline(float value) {
  _internal_set_cam2_baseline(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.RectificationParameters.cam2_baseline)
}

// -------------------------------------------------------------------

// RelocalizationResult

// .com.bcom.solar.gprc.RelocalizationPoseStatus pose_status = 1;
inline void RelocalizationResult::clear_pose_status() {
  pose_status_ = 0;
}
inline ::com::bcom::solar::gprc::RelocalizationPoseStatus RelocalizationResult::_internal_pose_status() const {
  return static_cast< ::com::bcom::solar::gprc::RelocalizationPoseStatus >(pose_status_);
}
inline ::com::bcom::solar::gprc::RelocalizationPoseStatus RelocalizationResult::pose_status() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RelocalizationResult.pose_status)
  return _internal_pose_status();
}
inline void RelocalizationResult::_internal_set_pose_status(::com::bcom::solar::gprc::RelocalizationPoseStatus value) {
  
  pose_status_ = value;
}
inline void RelocalizationResult::set_pose_status(::com::bcom::solar::gprc::RelocalizationPoseStatus value) {
  _internal_set_pose_status(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.RelocalizationResult.pose_status)
}

// .com.bcom.solar.gprc.Matrix4x4 pose = 2;
inline bool RelocalizationResult::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool RelocalizationResult::has_pose() const {
  return _internal_has_pose();
}
inline void RelocalizationResult::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix4x4& RelocalizationResult::_internal_pose() const {
  const ::com::bcom::solar::gprc::Matrix4x4* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix4x4&>(
      ::com::bcom::solar::gprc::_Matrix4x4_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix4x4& RelocalizationResult::pose() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RelocalizationResult.pose)
  return _internal_pose();
}
inline void RelocalizationResult::unsafe_arena_set_allocated_pose(
    ::com::bcom::solar::gprc::Matrix4x4* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.RelocalizationResult.pose)
}
inline ::com::bcom::solar::gprc::Matrix4x4* RelocalizationResult::release_pose() {
  
  ::com::bcom::solar::gprc::Matrix4x4* temp = pose_;
  pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix4x4* RelocalizationResult::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.RelocalizationResult.pose)
  
  ::com::bcom::solar::gprc::Matrix4x4* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix4x4* RelocalizationResult::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix4x4>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::com::bcom::solar::gprc::Matrix4x4* RelocalizationResult::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.RelocalizationResult.pose)
  return _internal_mutable_pose();
}
inline void RelocalizationResult::set_allocated_pose(::com::bcom::solar::gprc::Matrix4x4* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.RelocalizationResult.pose)
}

// float confidence = 3;
inline void RelocalizationResult::clear_confidence() {
  confidence_ = 0;
}
inline float RelocalizationResult::_internal_confidence() const {
  return confidence_;
}
inline float RelocalizationResult::confidence() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RelocalizationResult.confidence)
  return _internal_confidence();
}
inline void RelocalizationResult::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void RelocalizationResult::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.RelocalizationResult.confidence)
}

// -------------------------------------------------------------------

// Image

// uint32 width = 1;
inline void Image::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::width() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Image.width)
  return _internal_width();
}
inline void Image::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void Image::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Image.width)
}

// uint32 height = 2;
inline void Image::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::height() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Image.height)
  return _internal_height();
}
inline void Image::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void Image::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Image.height)
}

// bytes data = 3;
inline void Image::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Image.data)
  return _internal_data();
}
inline void Image::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Image.data)
}
inline std::string* Image::mutable_data() {
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.Image.data)
  return _internal_mutable_data();
}
inline const std::string& Image::_internal_data() const {
  return data_.Get();
}
inline void Image::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Image::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.bcom.solar.gprc.Image.data)
}
inline void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.bcom.solar.gprc.Image.data)
}
inline void Image::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.bcom.solar.gprc.Image.data)
}
inline std::string* Image::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.Image.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Image::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.Image.data)
}

// .com.bcom.solar.gprc.ImageLayout layout = 4;
inline void Image::clear_layout() {
  layout_ = 0;
}
inline ::com::bcom::solar::gprc::ImageLayout Image::_internal_layout() const {
  return static_cast< ::com::bcom::solar::gprc::ImageLayout >(layout_);
}
inline ::com::bcom::solar::gprc::ImageLayout Image::layout() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Image.layout)
  return _internal_layout();
}
inline void Image::_internal_set_layout(::com::bcom::solar::gprc::ImageLayout value) {
  
  layout_ = value;
}
inline void Image::set_layout(::com::bcom::solar::gprc::ImageLayout value) {
  _internal_set_layout(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Image.layout)
}

// .com.bcom.solar.gprc.ImageCompression imageCompression = 5;
inline void Image::clear_imagecompression() {
  imagecompression_ = 0;
}
inline ::com::bcom::solar::gprc::ImageCompression Image::_internal_imagecompression() const {
  return static_cast< ::com::bcom::solar::gprc::ImageCompression >(imagecompression_);
}
inline ::com::bcom::solar::gprc::ImageCompression Image::imagecompression() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Image.imageCompression)
  return _internal_imagecompression();
}
inline void Image::_internal_set_imagecompression(::com::bcom::solar::gprc::ImageCompression value) {
  
  imagecompression_ = value;
}
inline void Image::set_imagecompression(::com::bcom::solar::gprc::ImageCompression value) {
  _internal_set_imagecompression(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Image.imageCompression)
}

// -------------------------------------------------------------------

// Frames

// repeated .com.bcom.solar.gprc.Frame frames = 1;
inline int Frames::_internal_frames_size() const {
  return frames_.size();
}
inline int Frames::frames_size() const {
  return _internal_frames_size();
}
inline void Frames::clear_frames() {
  frames_.Clear();
}
inline ::com::bcom::solar::gprc::Frame* Frames::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.Frames.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::bcom::solar::gprc::Frame >*
Frames::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:com.bcom.solar.gprc.Frames.frames)
  return &frames_;
}
inline const ::com::bcom::solar::gprc::Frame& Frames::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::com::bcom::solar::gprc::Frame& Frames::frames(int index) const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Frames.frames)
  return _internal_frames(index);
}
inline ::com::bcom::solar::gprc::Frame* Frames::_internal_add_frames() {
  return frames_.Add();
}
inline ::com::bcom::solar::gprc::Frame* Frames::add_frames() {
  // @@protoc_insertion_point(field_add:com.bcom.solar.gprc.Frames.frames)
  return _internal_add_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::bcom::solar::gprc::Frame >&
Frames::frames() const {
  // @@protoc_insertion_point(field_list:com.bcom.solar.gprc.Frames.frames)
  return frames_;
}

// -------------------------------------------------------------------

// Frame

// int32 sensor_id = 1;
inline void Frame::clear_sensor_id() {
  sensor_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_sensor_id() const {
  return sensor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::sensor_id() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Frame.sensor_id)
  return _internal_sensor_id();
}
inline void Frame::_internal_set_sensor_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sensor_id_ = value;
}
inline void Frame::set_sensor_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sensor_id(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Frame.sensor_id)
}

// .com.bcom.solar.gprc.Image image = 2;
inline bool Frame::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool Frame::has_image() const {
  return _internal_has_image();
}
inline void Frame::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Image& Frame::_internal_image() const {
  const ::com::bcom::solar::gprc::Image* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Image&>(
      ::com::bcom::solar::gprc::_Image_default_instance_);
}
inline const ::com::bcom::solar::gprc::Image& Frame::image() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Frame.image)
  return _internal_image();
}
inline void Frame::unsafe_arena_set_allocated_image(
    ::com::bcom::solar::gprc::Image* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.Frame.image)
}
inline ::com::bcom::solar::gprc::Image* Frame::release_image() {
  
  ::com::bcom::solar::gprc::Image* temp = image_;
  image_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::bcom::solar::gprc::Image* Frame::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.Frame.image)
  
  ::com::bcom::solar::gprc::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Image* Frame::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Image>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::com::bcom::solar::gprc::Image* Frame::mutable_image() {
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.Frame.image)
  return _internal_mutable_image();
}
inline void Frame::set_allocated_image(::com::bcom::solar::gprc::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.Frame.image)
}

// uint64 timestamp = 3;
inline void Frame::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Frame::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Frame::timestamp() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Frame.timestamp)
  return _internal_timestamp();
}
inline void Frame::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Frame::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Frame.timestamp)
}

// .com.bcom.solar.gprc.Matrix4x4 pose = 4;
inline bool Frame::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Frame::has_pose() const {
  return _internal_has_pose();
}
inline void Frame::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix4x4& Frame::_internal_pose() const {
  const ::com::bcom::solar::gprc::Matrix4x4* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix4x4&>(
      ::com::bcom::solar::gprc::_Matrix4x4_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix4x4& Frame::pose() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Frame.pose)
  return _internal_pose();
}
inline void Frame::unsafe_arena_set_allocated_pose(
    ::com::bcom::solar::gprc::Matrix4x4* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.Frame.pose)
}
inline ::com::bcom::solar::gprc::Matrix4x4* Frame::release_pose() {
  
  ::com::bcom::solar::gprc::Matrix4x4* temp = pose_;
  pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix4x4* Frame::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.Frame.pose)
  
  ::com::bcom::solar::gprc::Matrix4x4* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix4x4* Frame::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix4x4>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::com::bcom::solar::gprc::Matrix4x4* Frame::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.Frame.pose)
  return _internal_mutable_pose();
}
inline void Frame::set_allocated_pose(::com::bcom::solar::gprc::Matrix4x4* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.Frame.pose)
}

// -------------------------------------------------------------------

// Matrix4x4

// float m11 = 1;
inline void Matrix4x4::clear_m11() {
  m11_ = 0;
}
inline float Matrix4x4::_internal_m11() const {
  return m11_;
}
inline float Matrix4x4::m11() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m11)
  return _internal_m11();
}
inline void Matrix4x4::_internal_set_m11(float value) {
  
  m11_ = value;
}
inline void Matrix4x4::set_m11(float value) {
  _internal_set_m11(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m11)
}

// float m12 = 2;
inline void Matrix4x4::clear_m12() {
  m12_ = 0;
}
inline float Matrix4x4::_internal_m12() const {
  return m12_;
}
inline float Matrix4x4::m12() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m12)
  return _internal_m12();
}
inline void Matrix4x4::_internal_set_m12(float value) {
  
  m12_ = value;
}
inline void Matrix4x4::set_m12(float value) {
  _internal_set_m12(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m12)
}

// float m13 = 3;
inline void Matrix4x4::clear_m13() {
  m13_ = 0;
}
inline float Matrix4x4::_internal_m13() const {
  return m13_;
}
inline float Matrix4x4::m13() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m13)
  return _internal_m13();
}
inline void Matrix4x4::_internal_set_m13(float value) {
  
  m13_ = value;
}
inline void Matrix4x4::set_m13(float value) {
  _internal_set_m13(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m13)
}

// float m14 = 4;
inline void Matrix4x4::clear_m14() {
  m14_ = 0;
}
inline float Matrix4x4::_internal_m14() const {
  return m14_;
}
inline float Matrix4x4::m14() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m14)
  return _internal_m14();
}
inline void Matrix4x4::_internal_set_m14(float value) {
  
  m14_ = value;
}
inline void Matrix4x4::set_m14(float value) {
  _internal_set_m14(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m14)
}

// float m21 = 5;
inline void Matrix4x4::clear_m21() {
  m21_ = 0;
}
inline float Matrix4x4::_internal_m21() const {
  return m21_;
}
inline float Matrix4x4::m21() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m21)
  return _internal_m21();
}
inline void Matrix4x4::_internal_set_m21(float value) {
  
  m21_ = value;
}
inline void Matrix4x4::set_m21(float value) {
  _internal_set_m21(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m21)
}

// float m22 = 6;
inline void Matrix4x4::clear_m22() {
  m22_ = 0;
}
inline float Matrix4x4::_internal_m22() const {
  return m22_;
}
inline float Matrix4x4::m22() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m22)
  return _internal_m22();
}
inline void Matrix4x4::_internal_set_m22(float value) {
  
  m22_ = value;
}
inline void Matrix4x4::set_m22(float value) {
  _internal_set_m22(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m22)
}

// float m23 = 7;
inline void Matrix4x4::clear_m23() {
  m23_ = 0;
}
inline float Matrix4x4::_internal_m23() const {
  return m23_;
}
inline float Matrix4x4::m23() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m23)
  return _internal_m23();
}
inline void Matrix4x4::_internal_set_m23(float value) {
  
  m23_ = value;
}
inline void Matrix4x4::set_m23(float value) {
  _internal_set_m23(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m23)
}

// float m24 = 8;
inline void Matrix4x4::clear_m24() {
  m24_ = 0;
}
inline float Matrix4x4::_internal_m24() const {
  return m24_;
}
inline float Matrix4x4::m24() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m24)
  return _internal_m24();
}
inline void Matrix4x4::_internal_set_m24(float value) {
  
  m24_ = value;
}
inline void Matrix4x4::set_m24(float value) {
  _internal_set_m24(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m24)
}

// float m31 = 9;
inline void Matrix4x4::clear_m31() {
  m31_ = 0;
}
inline float Matrix4x4::_internal_m31() const {
  return m31_;
}
inline float Matrix4x4::m31() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m31)
  return _internal_m31();
}
inline void Matrix4x4::_internal_set_m31(float value) {
  
  m31_ = value;
}
inline void Matrix4x4::set_m31(float value) {
  _internal_set_m31(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m31)
}

// float m32 = 10;
inline void Matrix4x4::clear_m32() {
  m32_ = 0;
}
inline float Matrix4x4::_internal_m32() const {
  return m32_;
}
inline float Matrix4x4::m32() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m32)
  return _internal_m32();
}
inline void Matrix4x4::_internal_set_m32(float value) {
  
  m32_ = value;
}
inline void Matrix4x4::set_m32(float value) {
  _internal_set_m32(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m32)
}

// float m33 = 11;
inline void Matrix4x4::clear_m33() {
  m33_ = 0;
}
inline float Matrix4x4::_internal_m33() const {
  return m33_;
}
inline float Matrix4x4::m33() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m33)
  return _internal_m33();
}
inline void Matrix4x4::_internal_set_m33(float value) {
  
  m33_ = value;
}
inline void Matrix4x4::set_m33(float value) {
  _internal_set_m33(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m33)
}

// float m34 = 12;
inline void Matrix4x4::clear_m34() {
  m34_ = 0;
}
inline float Matrix4x4::_internal_m34() const {
  return m34_;
}
inline float Matrix4x4::m34() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m34)
  return _internal_m34();
}
inline void Matrix4x4::_internal_set_m34(float value) {
  
  m34_ = value;
}
inline void Matrix4x4::set_m34(float value) {
  _internal_set_m34(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m34)
}

// float m41 = 13;
inline void Matrix4x4::clear_m41() {
  m41_ = 0;
}
inline float Matrix4x4::_internal_m41() const {
  return m41_;
}
inline float Matrix4x4::m41() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m41)
  return _internal_m41();
}
inline void Matrix4x4::_internal_set_m41(float value) {
  
  m41_ = value;
}
inline void Matrix4x4::set_m41(float value) {
  _internal_set_m41(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m41)
}

// float m42 = 14;
inline void Matrix4x4::clear_m42() {
  m42_ = 0;
}
inline float Matrix4x4::_internal_m42() const {
  return m42_;
}
inline float Matrix4x4::m42() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m42)
  return _internal_m42();
}
inline void Matrix4x4::_internal_set_m42(float value) {
  
  m42_ = value;
}
inline void Matrix4x4::set_m42(float value) {
  _internal_set_m42(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m42)
}

// float m43 = 15;
inline void Matrix4x4::clear_m43() {
  m43_ = 0;
}
inline float Matrix4x4::_internal_m43() const {
  return m43_;
}
inline float Matrix4x4::m43() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m43)
  return _internal_m43();
}
inline void Matrix4x4::_internal_set_m43(float value) {
  
  m43_ = value;
}
inline void Matrix4x4::set_m43(float value) {
  _internal_set_m43(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m43)
}

// float m44 = 16;
inline void Matrix4x4::clear_m44() {
  m44_ = 0;
}
inline float Matrix4x4::_internal_m44() const {
  return m44_;
}
inline float Matrix4x4::m44() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m44)
  return _internal_m44();
}
inline void Matrix4x4::_internal_set_m44(float value) {
  
  m44_ = value;
}
inline void Matrix4x4::set_m44(float value) {
  _internal_set_m44(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m44)
}

// -------------------------------------------------------------------

// Matrix3x3

// float m11 = 1;
inline void Matrix3x3::clear_m11() {
  m11_ = 0;
}
inline float Matrix3x3::_internal_m11() const {
  return m11_;
}
inline float Matrix3x3::m11() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m11)
  return _internal_m11();
}
inline void Matrix3x3::_internal_set_m11(float value) {
  
  m11_ = value;
}
inline void Matrix3x3::set_m11(float value) {
  _internal_set_m11(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m11)
}

// float m12 = 2;
inline void Matrix3x3::clear_m12() {
  m12_ = 0;
}
inline float Matrix3x3::_internal_m12() const {
  return m12_;
}
inline float Matrix3x3::m12() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m12)
  return _internal_m12();
}
inline void Matrix3x3::_internal_set_m12(float value) {
  
  m12_ = value;
}
inline void Matrix3x3::set_m12(float value) {
  _internal_set_m12(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m12)
}

// float m13 = 3;
inline void Matrix3x3::clear_m13() {
  m13_ = 0;
}
inline float Matrix3x3::_internal_m13() const {
  return m13_;
}
inline float Matrix3x3::m13() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m13)
  return _internal_m13();
}
inline void Matrix3x3::_internal_set_m13(float value) {
  
  m13_ = value;
}
inline void Matrix3x3::set_m13(float value) {
  _internal_set_m13(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m13)
}

// float m21 = 4;
inline void Matrix3x3::clear_m21() {
  m21_ = 0;
}
inline float Matrix3x3::_internal_m21() const {
  return m21_;
}
inline float Matrix3x3::m21() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m21)
  return _internal_m21();
}
inline void Matrix3x3::_internal_set_m21(float value) {
  
  m21_ = value;
}
inline void Matrix3x3::set_m21(float value) {
  _internal_set_m21(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m21)
}

// float m22 = 5;
inline void Matrix3x3::clear_m22() {
  m22_ = 0;
}
inline float Matrix3x3::_internal_m22() const {
  return m22_;
}
inline float Matrix3x3::m22() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m22)
  return _internal_m22();
}
inline void Matrix3x3::_internal_set_m22(float value) {
  
  m22_ = value;
}
inline void Matrix3x3::set_m22(float value) {
  _internal_set_m22(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m22)
}

// float m23 = 6;
inline void Matrix3x3::clear_m23() {
  m23_ = 0;
}
inline float Matrix3x3::_internal_m23() const {
  return m23_;
}
inline float Matrix3x3::m23() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m23)
  return _internal_m23();
}
inline void Matrix3x3::_internal_set_m23(float value) {
  
  m23_ = value;
}
inline void Matrix3x3::set_m23(float value) {
  _internal_set_m23(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m23)
}

// float m31 = 7;
inline void Matrix3x3::clear_m31() {
  m31_ = 0;
}
inline float Matrix3x3::_internal_m31() const {
  return m31_;
}
inline float Matrix3x3::m31() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m31)
  return _internal_m31();
}
inline void Matrix3x3::_internal_set_m31(float value) {
  
  m31_ = value;
}
inline void Matrix3x3::set_m31(float value) {
  _internal_set_m31(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m31)
}

// float m32 = 8;
inline void Matrix3x3::clear_m32() {
  m32_ = 0;
}
inline float Matrix3x3::_internal_m32() const {
  return m32_;
}
inline float Matrix3x3::m32() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m32)
  return _internal_m32();
}
inline void Matrix3x3::_internal_set_m32(float value) {
  
  m32_ = value;
}
inline void Matrix3x3::set_m32(float value) {
  _internal_set_m32(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m32)
}

// float m33 = 9;
inline void Matrix3x3::clear_m33() {
  m33_ = 0;
}
inline float Matrix3x3::_internal_m33() const {
  return m33_;
}
inline float Matrix3x3::m33() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m33)
  return _internal_m33();
}
inline void Matrix3x3::_internal_set_m33(float value) {
  
  m33_ = value;
}
inline void Matrix3x3::set_m33(float value) {
  _internal_set_m33(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m33)
}

// -------------------------------------------------------------------

// Matrix3x4

// float m11 = 1;
inline void Matrix3x4::clear_m11() {
  m11_ = 0;
}
inline float Matrix3x4::_internal_m11() const {
  return m11_;
}
inline float Matrix3x4::m11() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m11)
  return _internal_m11();
}
inline void Matrix3x4::_internal_set_m11(float value) {
  
  m11_ = value;
}
inline void Matrix3x4::set_m11(float value) {
  _internal_set_m11(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m11)
}

// float m12 = 2;
inline void Matrix3x4::clear_m12() {
  m12_ = 0;
}
inline float Matrix3x4::_internal_m12() const {
  return m12_;
}
inline float Matrix3x4::m12() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m12)
  return _internal_m12();
}
inline void Matrix3x4::_internal_set_m12(float value) {
  
  m12_ = value;
}
inline void Matrix3x4::set_m12(float value) {
  _internal_set_m12(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m12)
}

// float m13 = 3;
inline void Matrix3x4::clear_m13() {
  m13_ = 0;
}
inline float Matrix3x4::_internal_m13() const {
  return m13_;
}
inline float Matrix3x4::m13() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m13)
  return _internal_m13();
}
inline void Matrix3x4::_internal_set_m13(float value) {
  
  m13_ = value;
}
inline void Matrix3x4::set_m13(float value) {
  _internal_set_m13(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m13)
}

// float m14 = 4;
inline void Matrix3x4::clear_m14() {
  m14_ = 0;
}
inline float Matrix3x4::_internal_m14() const {
  return m14_;
}
inline float Matrix3x4::m14() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m14)
  return _internal_m14();
}
inline void Matrix3x4::_internal_set_m14(float value) {
  
  m14_ = value;
}
inline void Matrix3x4::set_m14(float value) {
  _internal_set_m14(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m14)
}

// float m21 = 5;
inline void Matrix3x4::clear_m21() {
  m21_ = 0;
}
inline float Matrix3x4::_internal_m21() const {
  return m21_;
}
inline float Matrix3x4::m21() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m21)
  return _internal_m21();
}
inline void Matrix3x4::_internal_set_m21(float value) {
  
  m21_ = value;
}
inline void Matrix3x4::set_m21(float value) {
  _internal_set_m21(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m21)
}

// float m22 = 6;
inline void Matrix3x4::clear_m22() {
  m22_ = 0;
}
inline float Matrix3x4::_internal_m22() const {
  return m22_;
}
inline float Matrix3x4::m22() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m22)
  return _internal_m22();
}
inline void Matrix3x4::_internal_set_m22(float value) {
  
  m22_ = value;
}
inline void Matrix3x4::set_m22(float value) {
  _internal_set_m22(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m22)
}

// float m23 = 7;
inline void Matrix3x4::clear_m23() {
  m23_ = 0;
}
inline float Matrix3x4::_internal_m23() const {
  return m23_;
}
inline float Matrix3x4::m23() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m23)
  return _internal_m23();
}
inline void Matrix3x4::_internal_set_m23(float value) {
  
  m23_ = value;
}
inline void Matrix3x4::set_m23(float value) {
  _internal_set_m23(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m23)
}

// float m24 = 8;
inline void Matrix3x4::clear_m24() {
  m24_ = 0;
}
inline float Matrix3x4::_internal_m24() const {
  return m24_;
}
inline float Matrix3x4::m24() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m24)
  return _internal_m24();
}
inline void Matrix3x4::_internal_set_m24(float value) {
  
  m24_ = value;
}
inline void Matrix3x4::set_m24(float value) {
  _internal_set_m24(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m24)
}

// float m31 = 9;
inline void Matrix3x4::clear_m31() {
  m31_ = 0;
}
inline float Matrix3x4::_internal_m31() const {
  return m31_;
}
inline float Matrix3x4::m31() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m31)
  return _internal_m31();
}
inline void Matrix3x4::_internal_set_m31(float value) {
  
  m31_ = value;
}
inline void Matrix3x4::set_m31(float value) {
  _internal_set_m31(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m31)
}

// float m32 = 10;
inline void Matrix3x4::clear_m32() {
  m32_ = 0;
}
inline float Matrix3x4::_internal_m32() const {
  return m32_;
}
inline float Matrix3x4::m32() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m32)
  return _internal_m32();
}
inline void Matrix3x4::_internal_set_m32(float value) {
  
  m32_ = value;
}
inline void Matrix3x4::set_m32(float value) {
  _internal_set_m32(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m32)
}

// float m33 = 11;
inline void Matrix3x4::clear_m33() {
  m33_ = 0;
}
inline float Matrix3x4::_internal_m33() const {
  return m33_;
}
inline float Matrix3x4::m33() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m33)
  return _internal_m33();
}
inline void Matrix3x4::_internal_set_m33(float value) {
  
  m33_ = value;
}
inline void Matrix3x4::set_m33(float value) {
  _internal_set_m33(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m33)
}

// float m34 = 12;
inline void Matrix3x4::clear_m34() {
  m34_ = 0;
}
inline float Matrix3x4::_internal_m34() const {
  return m34_;
}
inline float Matrix3x4::m34() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m34)
  return _internal_m34();
}
inline void Matrix3x4::_internal_set_m34(float value) {
  
  m34_ = value;
}
inline void Matrix3x4::set_m34(float value) {
  _internal_set_m34(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m34)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gprc
}  // namespace solar
}  // namespace bcom
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::bcom::solar::gprc::PipelineMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::bcom::solar::gprc::PipelineMode>() {
  return ::com::bcom::solar::gprc::PipelineMode_descriptor();
}
template <> struct is_proto_enum< ::com::bcom::solar::gprc::CameraType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::bcom::solar::gprc::CameraType>() {
  return ::com::bcom::solar::gprc::CameraType_descriptor();
}
template <> struct is_proto_enum< ::com::bcom::solar::gprc::StereoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::bcom::solar::gprc::StereoType>() {
  return ::com::bcom::solar::gprc::StereoType_descriptor();
}
template <> struct is_proto_enum< ::com::bcom::solar::gprc::RelocalizationPoseStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::bcom::solar::gprc::RelocalizationPoseStatus>() {
  return ::com::bcom::solar::gprc::RelocalizationPoseStatus_descriptor();
}
template <> struct is_proto_enum< ::com::bcom::solar::gprc::ImageLayout> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::bcom::solar::gprc::ImageLayout>() {
  return ::com::bcom::solar::gprc::ImageLayout_descriptor();
}
template <> struct is_proto_enum< ::com::bcom::solar::gprc::ImageCompression> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::bcom::solar::gprc::ImageCompression>() {
  return ::com::bcom::solar::gprc::ImageCompression_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto
