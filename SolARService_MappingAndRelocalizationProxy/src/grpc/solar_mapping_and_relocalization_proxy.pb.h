// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: solar_mapping_and_relocalization_proxy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
namespace com {
namespace bcom {
namespace solar {
namespace gprc {
class CameraDistortion;
struct CameraDistortionDefaultTypeInternal;
extern CameraDistortionDefaultTypeInternal _CameraDistortion_default_instance_;
class CameraParameters;
struct CameraParametersDefaultTypeInternal;
extern CameraParametersDefaultTypeInternal _CameraParameters_default_instance_;
class CameraParametersStereo;
struct CameraParametersStereoDefaultTypeInternal;
extern CameraParametersStereoDefaultTypeInternal _CameraParametersStereo_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Frames;
struct FramesDefaultTypeInternal;
extern FramesDefaultTypeInternal _Frames_default_instance_;
class GroundTruthFrames;
struct GroundTruthFramesDefaultTypeInternal;
extern GroundTruthFramesDefaultTypeInternal _GroundTruthFrames_default_instance_;
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Matrix3x3;
struct Matrix3x3DefaultTypeInternal;
extern Matrix3x3DefaultTypeInternal _Matrix3x3_default_instance_;
class Matrix3x4;
struct Matrix3x4DefaultTypeInternal;
extern Matrix3x4DefaultTypeInternal _Matrix3x4_default_instance_;
class Matrix4x4;
struct Matrix4x4DefaultTypeInternal;
extern Matrix4x4DefaultTypeInternal _Matrix4x4_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class PipelineModeValue;
struct PipelineModeValueDefaultTypeInternal;
extern PipelineModeValueDefaultTypeInternal _PipelineModeValue_default_instance_;
class RectificationParameters;
struct RectificationParametersDefaultTypeInternal;
extern RectificationParametersDefaultTypeInternal _RectificationParameters_default_instance_;
class RelocalizationResult;
struct RelocalizationResultDefaultTypeInternal;
extern RelocalizationResultDefaultTypeInternal _RelocalizationResult_default_instance_;
}  // namespace gprc
}  // namespace solar
}  // namespace bcom
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::bcom::solar::gprc::CameraDistortion* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::CameraDistortion>(Arena*);
template<> ::com::bcom::solar::gprc::CameraParameters* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::CameraParameters>(Arena*);
template<> ::com::bcom::solar::gprc::CameraParametersStereo* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::CameraParametersStereo>(Arena*);
template<> ::com::bcom::solar::gprc::Empty* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Empty>(Arena*);
template<> ::com::bcom::solar::gprc::Frame* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Frame>(Arena*);
template<> ::com::bcom::solar::gprc::Frames* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Frames>(Arena*);
template<> ::com::bcom::solar::gprc::GroundTruthFrames* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::GroundTruthFrames>(Arena*);
template<> ::com::bcom::solar::gprc::Image* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Image>(Arena*);
template<> ::com::bcom::solar::gprc::Matrix3x3* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x3>(Arena*);
template<> ::com::bcom::solar::gprc::Matrix3x4* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x4>(Arena*);
template<> ::com::bcom::solar::gprc::Matrix4x4* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Matrix4x4>(Arena*);
template<> ::com::bcom::solar::gprc::Message* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::Message>(Arena*);
template<> ::com::bcom::solar::gprc::PipelineModeValue* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::PipelineModeValue>(Arena*);
template<> ::com::bcom::solar::gprc::RectificationParameters* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::RectificationParameters>(Arena*);
template<> ::com::bcom::solar::gprc::RelocalizationResult* Arena::CreateMaybeMessage<::com::bcom::solar::gprc::RelocalizationResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace bcom {
namespace solar {
namespace gprc {

enum PipelineMode : int {
  RELOCALIZATION_AND_MAPPING = 0,
  RELOCALIZATION_ONLY = 1,
  PipelineMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PipelineMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PipelineMode_IsValid(int value);
constexpr PipelineMode PipelineMode_MIN = RELOCALIZATION_AND_MAPPING;
constexpr PipelineMode PipelineMode_MAX = RELOCALIZATION_ONLY;
constexpr int PipelineMode_ARRAYSIZE = PipelineMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PipelineMode_descriptor();
template<typename T>
inline const std::string& PipelineMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PipelineMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PipelineMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PipelineMode_descriptor(), enum_t_value);
}
inline bool PipelineMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PipelineMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PipelineMode>(
    PipelineMode_descriptor(), name, value);
}
enum CameraType : int {
  RGB = 0,
  GRAY = 1,
  CameraType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CameraType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CameraType_IsValid(int value);
constexpr CameraType CameraType_MIN = RGB;
constexpr CameraType CameraType_MAX = GRAY;
constexpr int CameraType_ARRAYSIZE = CameraType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraType_descriptor();
template<typename T>
inline const std::string& CameraType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraType_descriptor(), enum_t_value);
}
inline bool CameraType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraType>(
    CameraType_descriptor(), name, value);
}
enum StereoType : int {
  Horizontal = 0,
  Vertical = 1,
  StereoType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StereoType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StereoType_IsValid(int value);
constexpr StereoType StereoType_MIN = Horizontal;
constexpr StereoType StereoType_MAX = Vertical;
constexpr int StereoType_ARRAYSIZE = StereoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StereoType_descriptor();
template<typename T>
inline const std::string& StereoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StereoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StereoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StereoType_descriptor(), enum_t_value);
}
inline bool StereoType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StereoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StereoType>(
    StereoType_descriptor(), name, value);
}
enum RelocalizationPoseStatus : int {
  NO_POSE = 0,
  NEW_POSE = 1,
  LATEST_POSE = 2,
  RelocalizationPoseStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RelocalizationPoseStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RelocalizationPoseStatus_IsValid(int value);
constexpr RelocalizationPoseStatus RelocalizationPoseStatus_MIN = NO_POSE;
constexpr RelocalizationPoseStatus RelocalizationPoseStatus_MAX = LATEST_POSE;
constexpr int RelocalizationPoseStatus_ARRAYSIZE = RelocalizationPoseStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelocalizationPoseStatus_descriptor();
template<typename T>
inline const std::string& RelocalizationPoseStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RelocalizationPoseStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RelocalizationPoseStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RelocalizationPoseStatus_descriptor(), enum_t_value);
}
inline bool RelocalizationPoseStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RelocalizationPoseStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RelocalizationPoseStatus>(
    RelocalizationPoseStatus_descriptor(), name, value);
}
enum MappingStatus : int {
  BOOTSTRAP = 0,
  MAPPING = 1,
  TRACKING_LOST = 2,
  LOOP_CLOSURE = 3,
  MappingStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MappingStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MappingStatus_IsValid(int value);
constexpr MappingStatus MappingStatus_MIN = BOOTSTRAP;
constexpr MappingStatus MappingStatus_MAX = LOOP_CLOSURE;
constexpr int MappingStatus_ARRAYSIZE = MappingStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MappingStatus_descriptor();
template<typename T>
inline const std::string& MappingStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MappingStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MappingStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MappingStatus_descriptor(), enum_t_value);
}
inline bool MappingStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MappingStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MappingStatus>(
    MappingStatus_descriptor(), name, value);
}
enum ImageLayout : int {
  RGB_24 = 0,
  GREY_8 = 1,
  GREY_16 = 2,
  ImageLayout_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ImageLayout_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ImageLayout_IsValid(int value);
constexpr ImageLayout ImageLayout_MIN = RGB_24;
constexpr ImageLayout ImageLayout_MAX = GREY_16;
constexpr int ImageLayout_ARRAYSIZE = ImageLayout_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageLayout_descriptor();
template<typename T>
inline const std::string& ImageLayout_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageLayout>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageLayout_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageLayout_descriptor(), enum_t_value);
}
inline bool ImageLayout_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageLayout* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageLayout>(
    ImageLayout_descriptor(), name, value);
}
enum ImageCompression : int {
  NONE = 0,
  PNG = 1,
  JPG = 2,
  ImageCompression_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ImageCompression_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ImageCompression_IsValid(int value);
constexpr ImageCompression ImageCompression_MIN = NONE;
constexpr ImageCompression ImageCompression_MAX = JPG;
constexpr int ImageCompression_ARRAYSIZE = ImageCompression_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageCompression_descriptor();
template<typename T>
inline const std::string& ImageCompression_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageCompression>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageCompression_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageCompression_descriptor(), enum_t_value);
}
inline bool ImageCompression_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageCompression* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageCompression>(
    ImageCompression_descriptor(), name, value);
}
// ===================================================================

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class PipelineModeValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.PipelineModeValue) */ {
 public:
  inline PipelineModeValue() : PipelineModeValue(nullptr) {}
  ~PipelineModeValue() override;
  explicit PROTOBUF_CONSTEXPR PipelineModeValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PipelineModeValue(const PipelineModeValue& from);
  PipelineModeValue(PipelineModeValue&& from) noexcept
    : PipelineModeValue() {
    *this = ::std::move(from);
  }

  inline PipelineModeValue& operator=(const PipelineModeValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PipelineModeValue& operator=(PipelineModeValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PipelineModeValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const PipelineModeValue* internal_default_instance() {
    return reinterpret_cast<const PipelineModeValue*>(
               &_PipelineModeValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PipelineModeValue& a, PipelineModeValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PipelineModeValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PipelineModeValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PipelineModeValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PipelineModeValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PipelineModeValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PipelineModeValue& from) {
    PipelineModeValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PipelineModeValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.PipelineModeValue";
  }
  protected:
  explicit PipelineModeValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPipelineModeFieldNumber = 1,
  };
  // .com.bcom.solar.gprc.PipelineMode pipeline_mode = 1;
  void clear_pipeline_mode();
  ::com::bcom::solar::gprc::PipelineMode pipeline_mode() const;
  void set_pipeline_mode(::com::bcom::solar::gprc::PipelineMode value);
  private:
  ::com::bcom::solar::gprc::PipelineMode _internal_pipeline_mode() const;
  void _internal_set_pipeline_mode(::com::bcom::solar::gprc::PipelineMode value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.PipelineModeValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int pipeline_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class CameraParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.CameraParameters) */ {
 public:
  inline CameraParameters() : CameraParameters(nullptr) {}
  ~CameraParameters() override;
  explicit PROTOBUF_CONSTEXPR CameraParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraParameters(const CameraParameters& from);
  CameraParameters(CameraParameters&& from) noexcept
    : CameraParameters() {
    *this = ::std::move(from);
  }

  inline CameraParameters& operator=(const CameraParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraParameters& operator=(CameraParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraParameters* internal_default_instance() {
    return reinterpret_cast<const CameraParameters*>(
               &_CameraParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CameraParameters& a, CameraParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraParameters& from) {
    CameraParameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.CameraParameters";
  }
  protected:
  explicit CameraParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIntrinsicsFieldNumber = 6,
    kDistortionFieldNumber = 7,
    kIdFieldNumber = 2,
    kCameraTypeFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .com.bcom.solar.gprc.Matrix3x3 intrinsics = 6;
  bool has_intrinsics() const;
  private:
  bool _internal_has_intrinsics() const;
  public:
  void clear_intrinsics();
  const ::com::bcom::solar::gprc::Matrix3x3& intrinsics() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::Matrix3x3* release_intrinsics();
  ::com::bcom::solar::gprc::Matrix3x3* mutable_intrinsics();
  void set_allocated_intrinsics(::com::bcom::solar::gprc::Matrix3x3* intrinsics);
  private:
  const ::com::bcom::solar::gprc::Matrix3x3& _internal_intrinsics() const;
  ::com::bcom::solar::gprc::Matrix3x3* _internal_mutable_intrinsics();
  public:
  void unsafe_arena_set_allocated_intrinsics(
      ::com::bcom::solar::gprc::Matrix3x3* intrinsics);
  ::com::bcom::solar::gprc::Matrix3x3* unsafe_arena_release_intrinsics();

  // .com.bcom.solar.gprc.CameraDistortion distortion = 7;
  bool has_distortion() const;
  private:
  bool _internal_has_distortion() const;
  public:
  void clear_distortion();
  const ::com::bcom::solar::gprc::CameraDistortion& distortion() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::CameraDistortion* release_distortion();
  ::com::bcom::solar::gprc::CameraDistortion* mutable_distortion();
  void set_allocated_distortion(::com::bcom::solar::gprc::CameraDistortion* distortion);
  private:
  const ::com::bcom::solar::gprc::CameraDistortion& _internal_distortion() const;
  ::com::bcom::solar::gprc::CameraDistortion* _internal_mutable_distortion();
  public:
  void unsafe_arena_set_allocated_distortion(
      ::com::bcom::solar::gprc::CameraDistortion* distortion);
  ::com::bcom::solar::gprc::CameraDistortion* unsafe_arena_release_distortion();

  // uint32 id = 2;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // .com.bcom.solar.gprc.CameraType camera_type = 3;
  void clear_camera_type();
  ::com::bcom::solar::gprc::CameraType camera_type() const;
  void set_camera_type(::com::bcom::solar::gprc::CameraType value);
  private:
  ::com::bcom::solar::gprc::CameraType _internal_camera_type() const;
  void _internal_set_camera_type(::com::bcom::solar::gprc::CameraType value);
  public:

  // uint32 width = 4;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 height = 5;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.CameraParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::com::bcom::solar::gprc::Matrix3x3* intrinsics_;
    ::com::bcom::solar::gprc::CameraDistortion* distortion_;
    uint32_t id_;
    int camera_type_;
    uint32_t width_;
    uint32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class CameraParametersStereo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.CameraParametersStereo) */ {
 public:
  inline CameraParametersStereo() : CameraParametersStereo(nullptr) {}
  ~CameraParametersStereo() override;
  explicit PROTOBUF_CONSTEXPR CameraParametersStereo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraParametersStereo(const CameraParametersStereo& from);
  CameraParametersStereo(CameraParametersStereo&& from) noexcept
    : CameraParametersStereo() {
    *this = ::std::move(from);
  }

  inline CameraParametersStereo& operator=(const CameraParametersStereo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraParametersStereo& operator=(CameraParametersStereo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraParametersStereo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraParametersStereo* internal_default_instance() {
    return reinterpret_cast<const CameraParametersStereo*>(
               &_CameraParametersStereo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CameraParametersStereo& a, CameraParametersStereo& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraParametersStereo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraParametersStereo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraParametersStereo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraParametersStereo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraParametersStereo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraParametersStereo& from) {
    CameraParametersStereo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraParametersStereo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.CameraParametersStereo";
  }
  protected:
  explicit CameraParametersStereo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kName1FieldNumber = 1,
    kName2FieldNumber = 8,
    kIntrinsics1FieldNumber = 6,
    kDistortion1FieldNumber = 7,
    kIntrinsics2FieldNumber = 13,
    kDistortion2FieldNumber = 14,
    kId1FieldNumber = 2,
    kCameraType1FieldNumber = 3,
    kWidth1FieldNumber = 4,
    kHeight1FieldNumber = 5,
    kId2FieldNumber = 9,
    kCameraType2FieldNumber = 10,
    kWidth2FieldNumber = 11,
    kHeight2FieldNumber = 12,
  };
  // string name1 = 1;
  void clear_name1();
  const std::string& name1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name1();
  PROTOBUF_NODISCARD std::string* release_name1();
  void set_allocated_name1(std::string* name1);
  private:
  const std::string& _internal_name1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name1(const std::string& value);
  std::string* _internal_mutable_name1();
  public:

  // string name2 = 8;
  void clear_name2();
  const std::string& name2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name2();
  PROTOBUF_NODISCARD std::string* release_name2();
  void set_allocated_name2(std::string* name2);
  private:
  const std::string& _internal_name2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name2(const std::string& value);
  std::string* _internal_mutable_name2();
  public:

  // .com.bcom.solar.gprc.Matrix3x3 intrinsics1 = 6;
  bool has_intrinsics1() const;
  private:
  bool _internal_has_intrinsics1() const;
  public:
  void clear_intrinsics1();
  const ::com::bcom::solar::gprc::Matrix3x3& intrinsics1() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::Matrix3x3* release_intrinsics1();
  ::com::bcom::solar::gprc::Matrix3x3* mutable_intrinsics1();
  void set_allocated_intrinsics1(::com::bcom::solar::gprc::Matrix3x3* intrinsics1);
  private:
  const ::com::bcom::solar::gprc::Matrix3x3& _internal_intrinsics1() const;
  ::com::bcom::solar::gprc::Matrix3x3* _internal_mutable_intrinsics1();
  public:
  void unsafe_arena_set_allocated_intrinsics1(
      ::com::bcom::solar::gprc::Matrix3x3* intrinsics1);
  ::com::bcom::solar::gprc::Matrix3x3* unsafe_arena_release_intrinsics1();

  // .com.bcom.solar.gprc.CameraDistortion distortion1 = 7;
  bool has_distortion1() const;
  private:
  bool _internal_has_distortion1() const;
  public:
  void clear_distortion1();
  const ::com::bcom::solar::gprc::CameraDistortion& distortion1() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::CameraDistortion* release_distortion1();
  ::com::bcom::solar::gprc::CameraDistortion* mutable_distortion1();
  void set_allocated_distortion1(::com::bcom::solar::gprc::CameraDistortion* distortion1);
  private:
  const ::com::bcom::solar::gprc::CameraDistortion& _internal_distortion1() const;
  ::com::bcom::solar::gprc::CameraDistortion* _internal_mutable_distortion1();
  public:
  void unsafe_arena_set_allocated_distortion1(
      ::com::bcom::solar::gprc::CameraDistortion* distortion1);
  ::com::bcom::solar::gprc::CameraDistortion* unsafe_arena_release_distortion1();

  // .com.bcom.solar.gprc.Matrix3x3 intrinsics2 = 13;
  bool has_intrinsics2() const;
  private:
  bool _internal_has_intrinsics2() const;
  public:
  void clear_intrinsics2();
  const ::com::bcom::solar::gprc::Matrix3x3& intrinsics2() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::Matrix3x3* release_intrinsics2();
  ::com::bcom::solar::gprc::Matrix3x3* mutable_intrinsics2();
  void set_allocated_intrinsics2(::com::bcom::solar::gprc::Matrix3x3* intrinsics2);
  private:
  const ::com::bcom::solar::gprc::Matrix3x3& _internal_intrinsics2() const;
  ::com::bcom::solar::gprc::Matrix3x3* _internal_mutable_intrinsics2();
  public:
  void unsafe_arena_set_allocated_intrinsics2(
      ::com::bcom::solar::gprc::Matrix3x3* intrinsics2);
  ::com::bcom::solar::gprc::Matrix3x3* unsafe_arena_release_intrinsics2();

  // .com.bcom.solar.gprc.CameraDistortion distortion2 = 14;
  bool has_distortion2() const;
  private:
  bool _internal_has_distortion2() const;
  public:
  void clear_distortion2();
  const ::com::bcom::solar::gprc::CameraDistortion& distortion2() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::CameraDistortion* release_distortion2();
  ::com::bcom::solar::gprc::CameraDistortion* mutable_distortion2();
  void set_allocated_distortion2(::com::bcom::solar::gprc::CameraDistortion* distortion2);
  private:
  const ::com::bcom::solar::gprc::CameraDistortion& _internal_distortion2() const;
  ::com::bcom::solar::gprc::CameraDistortion* _internal_mutable_distortion2();
  public:
  void unsafe_arena_set_allocated_distortion2(
      ::com::bcom::solar::gprc::CameraDistortion* distortion2);
  ::com::bcom::solar::gprc::CameraDistortion* unsafe_arena_release_distortion2();

  // uint32 id1 = 2;
  void clear_id1();
  uint32_t id1() const;
  void set_id1(uint32_t value);
  private:
  uint32_t _internal_id1() const;
  void _internal_set_id1(uint32_t value);
  public:

  // .com.bcom.solar.gprc.CameraType camera_type1 = 3;
  void clear_camera_type1();
  ::com::bcom::solar::gprc::CameraType camera_type1() const;
  void set_camera_type1(::com::bcom::solar::gprc::CameraType value);
  private:
  ::com::bcom::solar::gprc::CameraType _internal_camera_type1() const;
  void _internal_set_camera_type1(::com::bcom::solar::gprc::CameraType value);
  public:

  // uint32 width1 = 4;
  void clear_width1();
  uint32_t width1() const;
  void set_width1(uint32_t value);
  private:
  uint32_t _internal_width1() const;
  void _internal_set_width1(uint32_t value);
  public:

  // uint32 height1 = 5;
  void clear_height1();
  uint32_t height1() const;
  void set_height1(uint32_t value);
  private:
  uint32_t _internal_height1() const;
  void _internal_set_height1(uint32_t value);
  public:

  // uint32 id2 = 9;
  void clear_id2();
  uint32_t id2() const;
  void set_id2(uint32_t value);
  private:
  uint32_t _internal_id2() const;
  void _internal_set_id2(uint32_t value);
  public:

  // .com.bcom.solar.gprc.CameraType camera_type2 = 10;
  void clear_camera_type2();
  ::com::bcom::solar::gprc::CameraType camera_type2() const;
  void set_camera_type2(::com::bcom::solar::gprc::CameraType value);
  private:
  ::com::bcom::solar::gprc::CameraType _internal_camera_type2() const;
  void _internal_set_camera_type2(::com::bcom::solar::gprc::CameraType value);
  public:

  // uint32 width2 = 11;
  void clear_width2();
  uint32_t width2() const;
  void set_width2(uint32_t value);
  private:
  uint32_t _internal_width2() const;
  void _internal_set_width2(uint32_t value);
  public:

  // uint32 height2 = 12;
  void clear_height2();
  uint32_t height2() const;
  void set_height2(uint32_t value);
  private:
  uint32_t _internal_height2() const;
  void _internal_set_height2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.CameraParametersStereo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name2_;
    ::com::bcom::solar::gprc::Matrix3x3* intrinsics1_;
    ::com::bcom::solar::gprc::CameraDistortion* distortion1_;
    ::com::bcom::solar::gprc::Matrix3x3* intrinsics2_;
    ::com::bcom::solar::gprc::CameraDistortion* distortion2_;
    uint32_t id1_;
    int camera_type1_;
    uint32_t width1_;
    uint32_t height1_;
    uint32_t id2_;
    int camera_type2_;
    uint32_t width2_;
    uint32_t height2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class CameraDistortion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.CameraDistortion) */ {
 public:
  inline CameraDistortion() : CameraDistortion(nullptr) {}
  ~CameraDistortion() override;
  explicit PROTOBUF_CONSTEXPR CameraDistortion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraDistortion(const CameraDistortion& from);
  CameraDistortion(CameraDistortion&& from) noexcept
    : CameraDistortion() {
    *this = ::std::move(from);
  }

  inline CameraDistortion& operator=(const CameraDistortion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraDistortion& operator=(CameraDistortion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraDistortion& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraDistortion* internal_default_instance() {
    return reinterpret_cast<const CameraDistortion*>(
               &_CameraDistortion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CameraDistortion& a, CameraDistortion& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraDistortion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraDistortion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraDistortion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraDistortion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraDistortion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraDistortion& from) {
    CameraDistortion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraDistortion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.CameraDistortion";
  }
  protected:
  explicit CameraDistortion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kK1FieldNumber = 1,
    kK2FieldNumber = 2,
    kP1FieldNumber = 3,
    kP2FieldNumber = 4,
    kK3FieldNumber = 5,
  };
  // float K_1 = 1;
  void clear_k_1();
  float k_1() const;
  void set_k_1(float value);
  private:
  float _internal_k_1() const;
  void _internal_set_k_1(float value);
  public:

  // float K_2 = 2;
  void clear_k_2();
  float k_2() const;
  void set_k_2(float value);
  private:
  float _internal_k_2() const;
  void _internal_set_k_2(float value);
  public:

  // float P_1 = 3;
  void clear_p_1();
  float p_1() const;
  void set_p_1(float value);
  private:
  float _internal_p_1() const;
  void _internal_set_p_1(float value);
  public:

  // float P_2 = 4;
  void clear_p_2();
  float p_2() const;
  void set_p_2(float value);
  private:
  float _internal_p_2() const;
  void _internal_set_p_2(float value);
  public:

  // float K_3 = 5;
  void clear_k_3();
  float k_3() const;
  void set_k_3(float value);
  private:
  float _internal_k_3() const;
  void _internal_set_k_3(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.CameraDistortion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float k_1_;
    float k_2_;
    float p_1_;
    float p_2_;
    float k_3_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class RectificationParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.RectificationParameters) */ {
 public:
  inline RectificationParameters() : RectificationParameters(nullptr) {}
  ~RectificationParameters() override;
  explicit PROTOBUF_CONSTEXPR RectificationParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RectificationParameters(const RectificationParameters& from);
  RectificationParameters(RectificationParameters&& from) noexcept
    : RectificationParameters() {
    *this = ::std::move(from);
  }

  inline RectificationParameters& operator=(const RectificationParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline RectificationParameters& operator=(RectificationParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RectificationParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const RectificationParameters* internal_default_instance() {
    return reinterpret_cast<const RectificationParameters*>(
               &_RectificationParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RectificationParameters& a, RectificationParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(RectificationParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RectificationParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RectificationParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RectificationParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RectificationParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RectificationParameters& from) {
    RectificationParameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RectificationParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.RectificationParameters";
  }
  protected:
  explicit RectificationParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCam1RotationFieldNumber = 1,
    kCam1ProjectionFieldNumber = 2,
    kCam2RotationFieldNumber = 5,
    kCam2ProjectionFieldNumber = 6,
    kCam1StereoTypeFieldNumber = 3,
    kCam1BaselineFieldNumber = 4,
    kCam2StereoTypeFieldNumber = 7,
    kCam2BaselineFieldNumber = 8,
  };
  // .com.bcom.solar.gprc.Matrix3x3 cam1_rotation = 1;
  bool has_cam1_rotation() const;
  private:
  bool _internal_has_cam1_rotation() const;
  public:
  void clear_cam1_rotation();
  const ::com::bcom::solar::gprc::Matrix3x3& cam1_rotation() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::Matrix3x3* release_cam1_rotation();
  ::com::bcom::solar::gprc::Matrix3x3* mutable_cam1_rotation();
  void set_allocated_cam1_rotation(::com::bcom::solar::gprc::Matrix3x3* cam1_rotation);
  private:
  const ::com::bcom::solar::gprc::Matrix3x3& _internal_cam1_rotation() const;
  ::com::bcom::solar::gprc::Matrix3x3* _internal_mutable_cam1_rotation();
  public:
  void unsafe_arena_set_allocated_cam1_rotation(
      ::com::bcom::solar::gprc::Matrix3x3* cam1_rotation);
  ::com::bcom::solar::gprc::Matrix3x3* unsafe_arena_release_cam1_rotation();

  // .com.bcom.solar.gprc.Matrix3x4 cam1_projection = 2;
  bool has_cam1_projection() const;
  private:
  bool _internal_has_cam1_projection() const;
  public:
  void clear_cam1_projection();
  const ::com::bcom::solar::gprc::Matrix3x4& cam1_projection() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::Matrix3x4* release_cam1_projection();
  ::com::bcom::solar::gprc::Matrix3x4* mutable_cam1_projection();
  void set_allocated_cam1_projection(::com::bcom::solar::gprc::Matrix3x4* cam1_projection);
  private:
  const ::com::bcom::solar::gprc::Matrix3x4& _internal_cam1_projection() const;
  ::com::bcom::solar::gprc::Matrix3x4* _internal_mutable_cam1_projection();
  public:
  void unsafe_arena_set_allocated_cam1_projection(
      ::com::bcom::solar::gprc::Matrix3x4* cam1_projection);
  ::com::bcom::solar::gprc::Matrix3x4* unsafe_arena_release_cam1_projection();

  // .com.bcom.solar.gprc.Matrix3x3 cam2_rotation = 5;
  bool has_cam2_rotation() const;
  private:
  bool _internal_has_cam2_rotation() const;
  public:
  void clear_cam2_rotation();
  const ::com::bcom::solar::gprc::Matrix3x3& cam2_rotation() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::Matrix3x3* release_cam2_rotation();
  ::com::bcom::solar::gprc::Matrix3x3* mutable_cam2_rotation();
  void set_allocated_cam2_rotation(::com::bcom::solar::gprc::Matrix3x3* cam2_rotation);
  private:
  const ::com::bcom::solar::gprc::Matrix3x3& _internal_cam2_rotation() const;
  ::com::bcom::solar::gprc::Matrix3x3* _internal_mutable_cam2_rotation();
  public:
  void unsafe_arena_set_allocated_cam2_rotation(
      ::com::bcom::solar::gprc::Matrix3x3* cam2_rotation);
  ::com::bcom::solar::gprc::Matrix3x3* unsafe_arena_release_cam2_rotation();

  // .com.bcom.solar.gprc.Matrix3x4 cam2_projection = 6;
  bool has_cam2_projection() const;
  private:
  bool _internal_has_cam2_projection() const;
  public:
  void clear_cam2_projection();
  const ::com::bcom::solar::gprc::Matrix3x4& cam2_projection() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::Matrix3x4* release_cam2_projection();
  ::com::bcom::solar::gprc::Matrix3x4* mutable_cam2_projection();
  void set_allocated_cam2_projection(::com::bcom::solar::gprc::Matrix3x4* cam2_projection);
  private:
  const ::com::bcom::solar::gprc::Matrix3x4& _internal_cam2_projection() const;
  ::com::bcom::solar::gprc::Matrix3x4* _internal_mutable_cam2_projection();
  public:
  void unsafe_arena_set_allocated_cam2_projection(
      ::com::bcom::solar::gprc::Matrix3x4* cam2_projection);
  ::com::bcom::solar::gprc::Matrix3x4* unsafe_arena_release_cam2_projection();

  // .com.bcom.solar.gprc.StereoType cam1_stereo_type = 3;
  void clear_cam1_stereo_type();
  ::com::bcom::solar::gprc::StereoType cam1_stereo_type() const;
  void set_cam1_stereo_type(::com::bcom::solar::gprc::StereoType value);
  private:
  ::com::bcom::solar::gprc::StereoType _internal_cam1_stereo_type() const;
  void _internal_set_cam1_stereo_type(::com::bcom::solar::gprc::StereoType value);
  public:

  // float cam1_baseline = 4;
  void clear_cam1_baseline();
  float cam1_baseline() const;
  void set_cam1_baseline(float value);
  private:
  float _internal_cam1_baseline() const;
  void _internal_set_cam1_baseline(float value);
  public:

  // .com.bcom.solar.gprc.StereoType cam2_stereo_type = 7;
  void clear_cam2_stereo_type();
  ::com::bcom::solar::gprc::StereoType cam2_stereo_type() const;
  void set_cam2_stereo_type(::com::bcom::solar::gprc::StereoType value);
  private:
  ::com::bcom::solar::gprc::StereoType _internal_cam2_stereo_type() const;
  void _internal_set_cam2_stereo_type(::com::bcom::solar::gprc::StereoType value);
  public:

  // float cam2_baseline = 8;
  void clear_cam2_baseline();
  float cam2_baseline() const;
  void set_cam2_baseline(float value);
  private:
  float _internal_cam2_baseline() const;
  void _internal_set_cam2_baseline(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.RectificationParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::bcom::solar::gprc::Matrix3x3* cam1_rotation_;
    ::com::bcom::solar::gprc::Matrix3x4* cam1_projection_;
    ::com::bcom::solar::gprc::Matrix3x3* cam2_rotation_;
    ::com::bcom::solar::gprc::Matrix3x4* cam2_projection_;
    int cam1_stereo_type_;
    float cam1_baseline_;
    int cam2_stereo_type_;
    float cam2_baseline_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class RelocalizationResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.RelocalizationResult) */ {
 public:
  inline RelocalizationResult() : RelocalizationResult(nullptr) {}
  ~RelocalizationResult() override;
  explicit PROTOBUF_CONSTEXPR RelocalizationResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelocalizationResult(const RelocalizationResult& from);
  RelocalizationResult(RelocalizationResult&& from) noexcept
    : RelocalizationResult() {
    *this = ::std::move(from);
  }

  inline RelocalizationResult& operator=(const RelocalizationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelocalizationResult& operator=(RelocalizationResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelocalizationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelocalizationResult* internal_default_instance() {
    return reinterpret_cast<const RelocalizationResult*>(
               &_RelocalizationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RelocalizationResult& a, RelocalizationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RelocalizationResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelocalizationResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelocalizationResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelocalizationResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelocalizationResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RelocalizationResult& from) {
    RelocalizationResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelocalizationResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.RelocalizationResult";
  }
  protected:
  explicit RelocalizationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 2,
    kPoseStatusFieldNumber = 1,
    kConfidenceFieldNumber = 3,
    kMappingStatusFieldNumber = 4,
  };
  // .com.bcom.solar.gprc.Matrix4x4 pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::com::bcom::solar::gprc::Matrix4x4& pose() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::Matrix4x4* release_pose();
  ::com::bcom::solar::gprc::Matrix4x4* mutable_pose();
  void set_allocated_pose(::com::bcom::solar::gprc::Matrix4x4* pose);
  private:
  const ::com::bcom::solar::gprc::Matrix4x4& _internal_pose() const;
  ::com::bcom::solar::gprc::Matrix4x4* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::com::bcom::solar::gprc::Matrix4x4* pose);
  ::com::bcom::solar::gprc::Matrix4x4* unsafe_arena_release_pose();

  // .com.bcom.solar.gprc.RelocalizationPoseStatus pose_status = 1;
  void clear_pose_status();
  ::com::bcom::solar::gprc::RelocalizationPoseStatus pose_status() const;
  void set_pose_status(::com::bcom::solar::gprc::RelocalizationPoseStatus value);
  private:
  ::com::bcom::solar::gprc::RelocalizationPoseStatus _internal_pose_status() const;
  void _internal_set_pose_status(::com::bcom::solar::gprc::RelocalizationPoseStatus value);
  public:

  // float confidence = 3;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // .com.bcom.solar.gprc.MappingStatus mapping_status = 4;
  void clear_mapping_status();
  ::com::bcom::solar::gprc::MappingStatus mapping_status() const;
  void set_mapping_status(::com::bcom::solar::gprc::MappingStatus value);
  private:
  ::com::bcom::solar::gprc::MappingStatus _internal_mapping_status() const;
  void _internal_set_mapping_status(::com::bcom::solar::gprc::MappingStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.RelocalizationResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::bcom::solar::gprc::Matrix4x4* pose_;
    int pose_status_;
    float confidence_;
    int mapping_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Image final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  ~Image() override;
  explicit PROTOBUF_CONSTEXPR Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Image& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Image& from) {
    Image::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kLayoutFieldNumber = 4,
    kImageCompressionFieldNumber = 5,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 width = 1;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 height = 2;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // .com.bcom.solar.gprc.ImageLayout layout = 4;
  void clear_layout();
  ::com::bcom::solar::gprc::ImageLayout layout() const;
  void set_layout(::com::bcom::solar::gprc::ImageLayout value);
  private:
  ::com::bcom::solar::gprc::ImageLayout _internal_layout() const;
  void _internal_set_layout(::com::bcom::solar::gprc::ImageLayout value);
  public:

  // .com.bcom.solar.gprc.ImageCompression imageCompression = 5;
  void clear_imagecompression();
  ::com::bcom::solar::gprc::ImageCompression imagecompression() const;
  void set_imagecompression(::com::bcom::solar::gprc::ImageCompression value);
  private:
  ::com::bcom::solar::gprc::ImageCompression _internal_imagecompression() const;
  void _internal_set_imagecompression(::com::bcom::solar::gprc::ImageCompression value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t width_;
    uint32_t height_;
    int layout_;
    int imagecompression_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Frames final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Frames) */ {
 public:
  inline Frames() : Frames(nullptr) {}
  ~Frames() override;
  explicit PROTOBUF_CONSTEXPR Frames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frames(const Frames& from);
  Frames(Frames&& from) noexcept
    : Frames() {
    *this = ::std::move(from);
  }

  inline Frames& operator=(const Frames& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frames& operator=(Frames&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frames& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frames* internal_default_instance() {
    return reinterpret_cast<const Frames*>(
               &_Frames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Frames& a, Frames& b) {
    a.Swap(&b);
  }
  inline void Swap(Frames* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frames>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frames& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Frames& from) {
    Frames::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frames* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Frames";
  }
  protected:
  explicit Frames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
  };
  // repeated .com.bcom.solar.gprc.Frame frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::com::bcom::solar::gprc::Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::bcom::solar::gprc::Frame >*
      mutable_frames();
  private:
  const ::com::bcom::solar::gprc::Frame& _internal_frames(int index) const;
  ::com::bcom::solar::gprc::Frame* _internal_add_frames();
  public:
  const ::com::bcom::solar::gprc::Frame& frames(int index) const;
  ::com::bcom::solar::gprc::Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::bcom::solar::gprc::Frame >&
      frames() const;

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Frames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::bcom::solar::gprc::Frame > frames_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class GroundTruthFrames final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.GroundTruthFrames) */ {
 public:
  inline GroundTruthFrames() : GroundTruthFrames(nullptr) {}
  ~GroundTruthFrames() override;
  explicit PROTOBUF_CONSTEXPR GroundTruthFrames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroundTruthFrames(const GroundTruthFrames& from);
  GroundTruthFrames(GroundTruthFrames&& from) noexcept
    : GroundTruthFrames() {
    *this = ::std::move(from);
  }

  inline GroundTruthFrames& operator=(const GroundTruthFrames& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroundTruthFrames& operator=(GroundTruthFrames&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroundTruthFrames& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroundTruthFrames* internal_default_instance() {
    return reinterpret_cast<const GroundTruthFrames*>(
               &_GroundTruthFrames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GroundTruthFrames& a, GroundTruthFrames& b) {
    a.Swap(&b);
  }
  inline void Swap(GroundTruthFrames* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroundTruthFrames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroundTruthFrames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroundTruthFrames>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroundTruthFrames& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroundTruthFrames& from) {
    GroundTruthFrames::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundTruthFrames* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.GroundTruthFrames";
  }
  protected:
  explicit GroundTruthFrames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
    kWorldTransormFieldNumber = 2,
    kFixedPoseFieldNumber = 3,
  };
  // .com.bcom.solar.gprc.Frames frames = 1;
  bool has_frames() const;
  private:
  bool _internal_has_frames() const;
  public:
  void clear_frames();
  const ::com::bcom::solar::gprc::Frames& frames() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::Frames* release_frames();
  ::com::bcom::solar::gprc::Frames* mutable_frames();
  void set_allocated_frames(::com::bcom::solar::gprc::Frames* frames);
  private:
  const ::com::bcom::solar::gprc::Frames& _internal_frames() const;
  ::com::bcom::solar::gprc::Frames* _internal_mutable_frames();
  public:
  void unsafe_arena_set_allocated_frames(
      ::com::bcom::solar::gprc::Frames* frames);
  ::com::bcom::solar::gprc::Frames* unsafe_arena_release_frames();

  // .com.bcom.solar.gprc.Matrix4x4 world_transorm = 2;
  bool has_world_transorm() const;
  private:
  bool _internal_has_world_transorm() const;
  public:
  void clear_world_transorm();
  const ::com::bcom::solar::gprc::Matrix4x4& world_transorm() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::Matrix4x4* release_world_transorm();
  ::com::bcom::solar::gprc::Matrix4x4* mutable_world_transorm();
  void set_allocated_world_transorm(::com::bcom::solar::gprc::Matrix4x4* world_transorm);
  private:
  const ::com::bcom::solar::gprc::Matrix4x4& _internal_world_transorm() const;
  ::com::bcom::solar::gprc::Matrix4x4* _internal_mutable_world_transorm();
  public:
  void unsafe_arena_set_allocated_world_transorm(
      ::com::bcom::solar::gprc::Matrix4x4* world_transorm);
  ::com::bcom::solar::gprc::Matrix4x4* unsafe_arena_release_world_transorm();

  // bool fixed_pose = 3;
  void clear_fixed_pose();
  bool fixed_pose() const;
  void set_fixed_pose(bool value);
  private:
  bool _internal_fixed_pose() const;
  void _internal_set_fixed_pose(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.GroundTruthFrames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::bcom::solar::gprc::Frames* frames_;
    ::com::bcom::solar::gprc::Matrix4x4* world_transorm_;
    bool fixed_pose_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Frame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  ~Frame() override;
  explicit PROTOBUF_CONSTEXPR Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Frame& from) {
    Frame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kPoseFieldNumber = 4,
    kTimestampFieldNumber = 3,
    kSensorIdFieldNumber = 1,
  };
  // .com.bcom.solar.gprc.Image image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::com::bcom::solar::gprc::Image& image() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::Image* release_image();
  ::com::bcom::solar::gprc::Image* mutable_image();
  void set_allocated_image(::com::bcom::solar::gprc::Image* image);
  private:
  const ::com::bcom::solar::gprc::Image& _internal_image() const;
  ::com::bcom::solar::gprc::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::com::bcom::solar::gprc::Image* image);
  ::com::bcom::solar::gprc::Image* unsafe_arena_release_image();

  // .com.bcom.solar.gprc.Matrix4x4 pose = 4;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::com::bcom::solar::gprc::Matrix4x4& pose() const;
  PROTOBUF_NODISCARD ::com::bcom::solar::gprc::Matrix4x4* release_pose();
  ::com::bcom::solar::gprc::Matrix4x4* mutable_pose();
  void set_allocated_pose(::com::bcom::solar::gprc::Matrix4x4* pose);
  private:
  const ::com::bcom::solar::gprc::Matrix4x4& _internal_pose() const;
  ::com::bcom::solar::gprc::Matrix4x4* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::com::bcom::solar::gprc::Matrix4x4* pose);
  ::com::bcom::solar::gprc::Matrix4x4* unsafe_arena_release_pose();

  // uint64 timestamp = 3;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // int32 sensor_id = 1;
  void clear_sensor_id();
  int32_t sensor_id() const;
  void set_sensor_id(int32_t value);
  private:
  int32_t _internal_sensor_id() const;
  void _internal_set_sensor_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::bcom::solar::gprc::Image* image_;
    ::com::bcom::solar::gprc::Matrix4x4* pose_;
    uint64_t timestamp_;
    int32_t sensor_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Matrix4x4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Matrix4x4) */ {
 public:
  inline Matrix4x4() : Matrix4x4(nullptr) {}
  ~Matrix4x4() override;
  explicit PROTOBUF_CONSTEXPR Matrix4x4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Matrix4x4(const Matrix4x4& from);
  Matrix4x4(Matrix4x4&& from) noexcept
    : Matrix4x4() {
    *this = ::std::move(from);
  }

  inline Matrix4x4& operator=(const Matrix4x4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix4x4& operator=(Matrix4x4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Matrix4x4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Matrix4x4* internal_default_instance() {
    return reinterpret_cast<const Matrix4x4*>(
               &_Matrix4x4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Matrix4x4& a, Matrix4x4& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix4x4* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix4x4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Matrix4x4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Matrix4x4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Matrix4x4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Matrix4x4& from) {
    Matrix4x4::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix4x4* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Matrix4x4";
  }
  protected:
  explicit Matrix4x4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kM11FieldNumber = 1,
    kM12FieldNumber = 2,
    kM13FieldNumber = 3,
    kM14FieldNumber = 4,
    kM21FieldNumber = 5,
    kM22FieldNumber = 6,
    kM23FieldNumber = 7,
    kM24FieldNumber = 8,
    kM31FieldNumber = 9,
    kM32FieldNumber = 10,
    kM33FieldNumber = 11,
    kM34FieldNumber = 12,
    kM41FieldNumber = 13,
    kM42FieldNumber = 14,
    kM43FieldNumber = 15,
    kM44FieldNumber = 16,
  };
  // float m11 = 1;
  void clear_m11();
  float m11() const;
  void set_m11(float value);
  private:
  float _internal_m11() const;
  void _internal_set_m11(float value);
  public:

  // float m12 = 2;
  void clear_m12();
  float m12() const;
  void set_m12(float value);
  private:
  float _internal_m12() const;
  void _internal_set_m12(float value);
  public:

  // float m13 = 3;
  void clear_m13();
  float m13() const;
  void set_m13(float value);
  private:
  float _internal_m13() const;
  void _internal_set_m13(float value);
  public:

  // float m14 = 4;
  void clear_m14();
  float m14() const;
  void set_m14(float value);
  private:
  float _internal_m14() const;
  void _internal_set_m14(float value);
  public:

  // float m21 = 5;
  void clear_m21();
  float m21() const;
  void set_m21(float value);
  private:
  float _internal_m21() const;
  void _internal_set_m21(float value);
  public:

  // float m22 = 6;
  void clear_m22();
  float m22() const;
  void set_m22(float value);
  private:
  float _internal_m22() const;
  void _internal_set_m22(float value);
  public:

  // float m23 = 7;
  void clear_m23();
  float m23() const;
  void set_m23(float value);
  private:
  float _internal_m23() const;
  void _internal_set_m23(float value);
  public:

  // float m24 = 8;
  void clear_m24();
  float m24() const;
  void set_m24(float value);
  private:
  float _internal_m24() const;
  void _internal_set_m24(float value);
  public:

  // float m31 = 9;
  void clear_m31();
  float m31() const;
  void set_m31(float value);
  private:
  float _internal_m31() const;
  void _internal_set_m31(float value);
  public:

  // float m32 = 10;
  void clear_m32();
  float m32() const;
  void set_m32(float value);
  private:
  float _internal_m32() const;
  void _internal_set_m32(float value);
  public:

  // float m33 = 11;
  void clear_m33();
  float m33() const;
  void set_m33(float value);
  private:
  float _internal_m33() const;
  void _internal_set_m33(float value);
  public:

  // float m34 = 12;
  void clear_m34();
  float m34() const;
  void set_m34(float value);
  private:
  float _internal_m34() const;
  void _internal_set_m34(float value);
  public:

  // float m41 = 13;
  void clear_m41();
  float m41() const;
  void set_m41(float value);
  private:
  float _internal_m41() const;
  void _internal_set_m41(float value);
  public:

  // float m42 = 14;
  void clear_m42();
  float m42() const;
  void set_m42(float value);
  private:
  float _internal_m42() const;
  void _internal_set_m42(float value);
  public:

  // float m43 = 15;
  void clear_m43();
  float m43() const;
  void set_m43(float value);
  private:
  float _internal_m43() const;
  void _internal_set_m43(float value);
  public:

  // float m44 = 16;
  void clear_m44();
  float m44() const;
  void set_m44(float value);
  private:
  float _internal_m44() const;
  void _internal_set_m44(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Matrix4x4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float m11_;
    float m12_;
    float m13_;
    float m14_;
    float m21_;
    float m22_;
    float m23_;
    float m24_;
    float m31_;
    float m32_;
    float m33_;
    float m34_;
    float m41_;
    float m42_;
    float m43_;
    float m44_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Matrix3x3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Matrix3x3) */ {
 public:
  inline Matrix3x3() : Matrix3x3(nullptr) {}
  ~Matrix3x3() override;
  explicit PROTOBUF_CONSTEXPR Matrix3x3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Matrix3x3(const Matrix3x3& from);
  Matrix3x3(Matrix3x3&& from) noexcept
    : Matrix3x3() {
    *this = ::std::move(from);
  }

  inline Matrix3x3& operator=(const Matrix3x3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix3x3& operator=(Matrix3x3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Matrix3x3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Matrix3x3* internal_default_instance() {
    return reinterpret_cast<const Matrix3x3*>(
               &_Matrix3x3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Matrix3x3& a, Matrix3x3& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix3x3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix3x3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Matrix3x3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Matrix3x3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Matrix3x3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Matrix3x3& from) {
    Matrix3x3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix3x3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Matrix3x3";
  }
  protected:
  explicit Matrix3x3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kM11FieldNumber = 1,
    kM12FieldNumber = 2,
    kM13FieldNumber = 3,
    kM21FieldNumber = 4,
    kM22FieldNumber = 5,
    kM23FieldNumber = 6,
    kM31FieldNumber = 7,
    kM32FieldNumber = 8,
    kM33FieldNumber = 9,
  };
  // float m11 = 1;
  void clear_m11();
  float m11() const;
  void set_m11(float value);
  private:
  float _internal_m11() const;
  void _internal_set_m11(float value);
  public:

  // float m12 = 2;
  void clear_m12();
  float m12() const;
  void set_m12(float value);
  private:
  float _internal_m12() const;
  void _internal_set_m12(float value);
  public:

  // float m13 = 3;
  void clear_m13();
  float m13() const;
  void set_m13(float value);
  private:
  float _internal_m13() const;
  void _internal_set_m13(float value);
  public:

  // float m21 = 4;
  void clear_m21();
  float m21() const;
  void set_m21(float value);
  private:
  float _internal_m21() const;
  void _internal_set_m21(float value);
  public:

  // float m22 = 5;
  void clear_m22();
  float m22() const;
  void set_m22(float value);
  private:
  float _internal_m22() const;
  void _internal_set_m22(float value);
  public:

  // float m23 = 6;
  void clear_m23();
  float m23() const;
  void set_m23(float value);
  private:
  float _internal_m23() const;
  void _internal_set_m23(float value);
  public:

  // float m31 = 7;
  void clear_m31();
  float m31() const;
  void set_m31(float value);
  private:
  float _internal_m31() const;
  void _internal_set_m31(float value);
  public:

  // float m32 = 8;
  void clear_m32();
  float m32() const;
  void set_m32(float value);
  private:
  float _internal_m32() const;
  void _internal_set_m32(float value);
  public:

  // float m33 = 9;
  void clear_m33();
  float m33() const;
  void set_m33(float value);
  private:
  float _internal_m33() const;
  void _internal_set_m33(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Matrix3x3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float m11_;
    float m12_;
    float m13_;
    float m21_;
    float m22_;
    float m23_;
    float m31_;
    float m32_;
    float m33_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Matrix3x4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.bcom.solar.gprc.Matrix3x4) */ {
 public:
  inline Matrix3x4() : Matrix3x4(nullptr) {}
  ~Matrix3x4() override;
  explicit PROTOBUF_CONSTEXPR Matrix3x4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Matrix3x4(const Matrix3x4& from);
  Matrix3x4(Matrix3x4&& from) noexcept
    : Matrix3x4() {
    *this = ::std::move(from);
  }

  inline Matrix3x4& operator=(const Matrix3x4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix3x4& operator=(Matrix3x4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Matrix3x4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Matrix3x4* internal_default_instance() {
    return reinterpret_cast<const Matrix3x4*>(
               &_Matrix3x4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Matrix3x4& a, Matrix3x4& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix3x4* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix3x4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Matrix3x4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Matrix3x4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Matrix3x4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Matrix3x4& from) {
    Matrix3x4::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix3x4* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bcom.solar.gprc.Matrix3x4";
  }
  protected:
  explicit Matrix3x4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kM11FieldNumber = 1,
    kM12FieldNumber = 2,
    kM13FieldNumber = 3,
    kM14FieldNumber = 4,
    kM21FieldNumber = 5,
    kM22FieldNumber = 6,
    kM23FieldNumber = 7,
    kM24FieldNumber = 8,
    kM31FieldNumber = 9,
    kM32FieldNumber = 10,
    kM33FieldNumber = 11,
    kM34FieldNumber = 12,
  };
  // float m11 = 1;
  void clear_m11();
  float m11() const;
  void set_m11(float value);
  private:
  float _internal_m11() const;
  void _internal_set_m11(float value);
  public:

  // float m12 = 2;
  void clear_m12();
  float m12() const;
  void set_m12(float value);
  private:
  float _internal_m12() const;
  void _internal_set_m12(float value);
  public:

  // float m13 = 3;
  void clear_m13();
  float m13() const;
  void set_m13(float value);
  private:
  float _internal_m13() const;
  void _internal_set_m13(float value);
  public:

  // float m14 = 4;
  void clear_m14();
  float m14() const;
  void set_m14(float value);
  private:
  float _internal_m14() const;
  void _internal_set_m14(float value);
  public:

  // float m21 = 5;
  void clear_m21();
  float m21() const;
  void set_m21(float value);
  private:
  float _internal_m21() const;
  void _internal_set_m21(float value);
  public:

  // float m22 = 6;
  void clear_m22();
  float m22() const;
  void set_m22(float value);
  private:
  float _internal_m22() const;
  void _internal_set_m22(float value);
  public:

  // float m23 = 7;
  void clear_m23();
  float m23() const;
  void set_m23(float value);
  private:
  float _internal_m23() const;
  void _internal_set_m23(float value);
  public:

  // float m24 = 8;
  void clear_m24();
  float m24() const;
  void set_m24(float value);
  private:
  float _internal_m24() const;
  void _internal_set_m24(float value);
  public:

  // float m31 = 9;
  void clear_m31();
  float m31() const;
  void set_m31(float value);
  private:
  float _internal_m31() const;
  void _internal_set_m31(float value);
  public:

  // float m32 = 10;
  void clear_m32();
  float m32() const;
  void set_m32(float value);
  private:
  float _internal_m32() const;
  void _internal_set_m32(float value);
  public:

  // float m33 = 11;
  void clear_m33();
  float m33() const;
  void set_m33(float value);
  private:
  float _internal_m33() const;
  void _internal_set_m33(float value);
  public:

  // float m34 = 12;
  void clear_m34();
  float m34() const;
  void set_m34(float value);
  private:
  float _internal_m34() const;
  void _internal_set_m34(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.bcom.solar.gprc.Matrix3x4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float m11_;
    float m12_;
    float m13_;
    float m14_;
    float m21_;
    float m22_;
    float m23_;
    float m24_;
    float m31_;
    float m32_;
    float m33_;
    float m34_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// PipelineModeValue

// .com.bcom.solar.gprc.PipelineMode pipeline_mode = 1;
inline void PipelineModeValue::clear_pipeline_mode() {
  _impl_.pipeline_mode_ = 0;
}
inline ::com::bcom::solar::gprc::PipelineMode PipelineModeValue::_internal_pipeline_mode() const {
  return static_cast< ::com::bcom::solar::gprc::PipelineMode >(_impl_.pipeline_mode_);
}
inline ::com::bcom::solar::gprc::PipelineMode PipelineModeValue::pipeline_mode() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.PipelineModeValue.pipeline_mode)
  return _internal_pipeline_mode();
}
inline void PipelineModeValue::_internal_set_pipeline_mode(::com::bcom::solar::gprc::PipelineMode value) {
  
  _impl_.pipeline_mode_ = value;
}
inline void PipelineModeValue::set_pipeline_mode(::com::bcom::solar::gprc::PipelineMode value) {
  _internal_set_pipeline_mode(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.PipelineModeValue.pipeline_mode)
}

// -------------------------------------------------------------------

// Message

// string message = 1;
inline void Message::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Message::message() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Message.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Message.message)
}
inline std::string* Message::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.Message.message)
  return _s;
}
inline const std::string& Message::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Message::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_message() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.Message.message)
  return _impl_.message_.Release();
}
inline void Message::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.Message.message)
}

// -------------------------------------------------------------------

// CameraParameters

// string name = 1;
inline void CameraParameters::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CameraParameters::name() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParameters.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraParameters::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParameters.name)
}
inline std::string* CameraParameters::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.CameraParameters.name)
  return _s;
}
inline const std::string& CameraParameters::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CameraParameters::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraParameters::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraParameters::release_name() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.CameraParameters.name)
  return _impl_.name_.Release();
}
inline void CameraParameters::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.CameraParameters.name)
}

// uint32 id = 2;
inline void CameraParameters::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CameraParameters::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CameraParameters::id() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParameters.id)
  return _internal_id();
}
inline void CameraParameters::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CameraParameters::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParameters.id)
}

// .com.bcom.solar.gprc.CameraType camera_type = 3;
inline void CameraParameters::clear_camera_type() {
  _impl_.camera_type_ = 0;
}
inline ::com::bcom::solar::gprc::CameraType CameraParameters::_internal_camera_type() const {
  return static_cast< ::com::bcom::solar::gprc::CameraType >(_impl_.camera_type_);
}
inline ::com::bcom::solar::gprc::CameraType CameraParameters::camera_type() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParameters.camera_type)
  return _internal_camera_type();
}
inline void CameraParameters::_internal_set_camera_type(::com::bcom::solar::gprc::CameraType value) {
  
  _impl_.camera_type_ = value;
}
inline void CameraParameters::set_camera_type(::com::bcom::solar::gprc::CameraType value) {
  _internal_set_camera_type(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParameters.camera_type)
}

// uint32 width = 4;
inline void CameraParameters::clear_width() {
  _impl_.width_ = 0u;
}
inline uint32_t CameraParameters::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t CameraParameters::width() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParameters.width)
  return _internal_width();
}
inline void CameraParameters::_internal_set_width(uint32_t value) {
  
  _impl_.width_ = value;
}
inline void CameraParameters::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParameters.width)
}

// uint32 height = 5;
inline void CameraParameters::clear_height() {
  _impl_.height_ = 0u;
}
inline uint32_t CameraParameters::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t CameraParameters::height() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParameters.height)
  return _internal_height();
}
inline void CameraParameters::_internal_set_height(uint32_t value) {
  
  _impl_.height_ = value;
}
inline void CameraParameters::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParameters.height)
}

// .com.bcom.solar.gprc.Matrix3x3 intrinsics = 6;
inline bool CameraParameters::_internal_has_intrinsics() const {
  return this != internal_default_instance() && _impl_.intrinsics_ != nullptr;
}
inline bool CameraParameters::has_intrinsics() const {
  return _internal_has_intrinsics();
}
inline void CameraParameters::clear_intrinsics() {
  if (GetArenaForAllocation() == nullptr && _impl_.intrinsics_ != nullptr) {
    delete _impl_.intrinsics_;
  }
  _impl_.intrinsics_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix3x3& CameraParameters::_internal_intrinsics() const {
  const ::com::bcom::solar::gprc::Matrix3x3* p = _impl_.intrinsics_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix3x3&>(
      ::com::bcom::solar::gprc::_Matrix3x3_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix3x3& CameraParameters::intrinsics() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParameters.intrinsics)
  return _internal_intrinsics();
}
inline void CameraParameters::unsafe_arena_set_allocated_intrinsics(
    ::com::bcom::solar::gprc::Matrix3x3* intrinsics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.intrinsics_);
  }
  _impl_.intrinsics_ = intrinsics;
  if (intrinsics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.CameraParameters.intrinsics)
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParameters::release_intrinsics() {
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = _impl_.intrinsics_;
  _impl_.intrinsics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParameters::unsafe_arena_release_intrinsics() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.CameraParameters.intrinsics)
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = _impl_.intrinsics_;
  _impl_.intrinsics_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParameters::_internal_mutable_intrinsics() {
  
  if (_impl_.intrinsics_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x3>(GetArenaForAllocation());
    _impl_.intrinsics_ = p;
  }
  return _impl_.intrinsics_;
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParameters::mutable_intrinsics() {
  ::com::bcom::solar::gprc::Matrix3x3* _msg = _internal_mutable_intrinsics();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.CameraParameters.intrinsics)
  return _msg;
}
inline void CameraParameters::set_allocated_intrinsics(::com::bcom::solar::gprc::Matrix3x3* intrinsics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.intrinsics_;
  }
  if (intrinsics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(intrinsics);
    if (message_arena != submessage_arena) {
      intrinsics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intrinsics, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.intrinsics_ = intrinsics;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.CameraParameters.intrinsics)
}

// .com.bcom.solar.gprc.CameraDistortion distortion = 7;
inline bool CameraParameters::_internal_has_distortion() const {
  return this != internal_default_instance() && _impl_.distortion_ != nullptr;
}
inline bool CameraParameters::has_distortion() const {
  return _internal_has_distortion();
}
inline void CameraParameters::clear_distortion() {
  if (GetArenaForAllocation() == nullptr && _impl_.distortion_ != nullptr) {
    delete _impl_.distortion_;
  }
  _impl_.distortion_ = nullptr;
}
inline const ::com::bcom::solar::gprc::CameraDistortion& CameraParameters::_internal_distortion() const {
  const ::com::bcom::solar::gprc::CameraDistortion* p = _impl_.distortion_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::CameraDistortion&>(
      ::com::bcom::solar::gprc::_CameraDistortion_default_instance_);
}
inline const ::com::bcom::solar::gprc::CameraDistortion& CameraParameters::distortion() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParameters.distortion)
  return _internal_distortion();
}
inline void CameraParameters::unsafe_arena_set_allocated_distortion(
    ::com::bcom::solar::gprc::CameraDistortion* distortion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.distortion_);
  }
  _impl_.distortion_ = distortion;
  if (distortion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.CameraParameters.distortion)
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParameters::release_distortion() {
  
  ::com::bcom::solar::gprc::CameraDistortion* temp = _impl_.distortion_;
  _impl_.distortion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParameters::unsafe_arena_release_distortion() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.CameraParameters.distortion)
  
  ::com::bcom::solar::gprc::CameraDistortion* temp = _impl_.distortion_;
  _impl_.distortion_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParameters::_internal_mutable_distortion() {
  
  if (_impl_.distortion_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::CameraDistortion>(GetArenaForAllocation());
    _impl_.distortion_ = p;
  }
  return _impl_.distortion_;
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParameters::mutable_distortion() {
  ::com::bcom::solar::gprc::CameraDistortion* _msg = _internal_mutable_distortion();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.CameraParameters.distortion)
  return _msg;
}
inline void CameraParameters::set_allocated_distortion(::com::bcom::solar::gprc::CameraDistortion* distortion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.distortion_;
  }
  if (distortion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(distortion);
    if (message_arena != submessage_arena) {
      distortion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distortion, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.distortion_ = distortion;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.CameraParameters.distortion)
}

// -------------------------------------------------------------------

// CameraParametersStereo

// string name1 = 1;
inline void CameraParametersStereo::clear_name1() {
  _impl_.name1_.ClearToEmpty();
}
inline const std::string& CameraParametersStereo::name1() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParametersStereo.name1)
  return _internal_name1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraParametersStereo::set_name1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParametersStereo.name1)
}
inline std::string* CameraParametersStereo::mutable_name1() {
  std::string* _s = _internal_mutable_name1();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.CameraParametersStereo.name1)
  return _s;
}
inline const std::string& CameraParametersStereo::_internal_name1() const {
  return _impl_.name1_.Get();
}
inline void CameraParametersStereo::_internal_set_name1(const std::string& value) {
  
  _impl_.name1_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraParametersStereo::_internal_mutable_name1() {
  
  return _impl_.name1_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraParametersStereo::release_name1() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.CameraParametersStereo.name1)
  return _impl_.name1_.Release();
}
inline void CameraParametersStereo::set_allocated_name1(std::string* name1) {
  if (name1 != nullptr) {
    
  } else {
    
  }
  _impl_.name1_.SetAllocated(name1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name1_.IsDefault()) {
    _impl_.name1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.CameraParametersStereo.name1)
}

// uint32 id1 = 2;
inline void CameraParametersStereo::clear_id1() {
  _impl_.id1_ = 0u;
}
inline uint32_t CameraParametersStereo::_internal_id1() const {
  return _impl_.id1_;
}
inline uint32_t CameraParametersStereo::id1() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParametersStereo.id1)
  return _internal_id1();
}
inline void CameraParametersStereo::_internal_set_id1(uint32_t value) {
  
  _impl_.id1_ = value;
}
inline void CameraParametersStereo::set_id1(uint32_t value) {
  _internal_set_id1(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParametersStereo.id1)
}

// .com.bcom.solar.gprc.CameraType camera_type1 = 3;
inline void CameraParametersStereo::clear_camera_type1() {
  _impl_.camera_type1_ = 0;
}
inline ::com::bcom::solar::gprc::CameraType CameraParametersStereo::_internal_camera_type1() const {
  return static_cast< ::com::bcom::solar::gprc::CameraType >(_impl_.camera_type1_);
}
inline ::com::bcom::solar::gprc::CameraType CameraParametersStereo::camera_type1() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParametersStereo.camera_type1)
  return _internal_camera_type1();
}
inline void CameraParametersStereo::_internal_set_camera_type1(::com::bcom::solar::gprc::CameraType value) {
  
  _impl_.camera_type1_ = value;
}
inline void CameraParametersStereo::set_camera_type1(::com::bcom::solar::gprc::CameraType value) {
  _internal_set_camera_type1(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParametersStereo.camera_type1)
}

// uint32 width1 = 4;
inline void CameraParametersStereo::clear_width1() {
  _impl_.width1_ = 0u;
}
inline uint32_t CameraParametersStereo::_internal_width1() const {
  return _impl_.width1_;
}
inline uint32_t CameraParametersStereo::width1() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParametersStereo.width1)
  return _internal_width1();
}
inline void CameraParametersStereo::_internal_set_width1(uint32_t value) {
  
  _impl_.width1_ = value;
}
inline void CameraParametersStereo::set_width1(uint32_t value) {
  _internal_set_width1(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParametersStereo.width1)
}

// uint32 height1 = 5;
inline void CameraParametersStereo::clear_height1() {
  _impl_.height1_ = 0u;
}
inline uint32_t CameraParametersStereo::_internal_height1() const {
  return _impl_.height1_;
}
inline uint32_t CameraParametersStereo::height1() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParametersStereo.height1)
  return _internal_height1();
}
inline void CameraParametersStereo::_internal_set_height1(uint32_t value) {
  
  _impl_.height1_ = value;
}
inline void CameraParametersStereo::set_height1(uint32_t value) {
  _internal_set_height1(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParametersStereo.height1)
}

// .com.bcom.solar.gprc.Matrix3x3 intrinsics1 = 6;
inline bool CameraParametersStereo::_internal_has_intrinsics1() const {
  return this != internal_default_instance() && _impl_.intrinsics1_ != nullptr;
}
inline bool CameraParametersStereo::has_intrinsics1() const {
  return _internal_has_intrinsics1();
}
inline void CameraParametersStereo::clear_intrinsics1() {
  if (GetArenaForAllocation() == nullptr && _impl_.intrinsics1_ != nullptr) {
    delete _impl_.intrinsics1_;
  }
  _impl_.intrinsics1_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix3x3& CameraParametersStereo::_internal_intrinsics1() const {
  const ::com::bcom::solar::gprc::Matrix3x3* p = _impl_.intrinsics1_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix3x3&>(
      ::com::bcom::solar::gprc::_Matrix3x3_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix3x3& CameraParametersStereo::intrinsics1() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParametersStereo.intrinsics1)
  return _internal_intrinsics1();
}
inline void CameraParametersStereo::unsafe_arena_set_allocated_intrinsics1(
    ::com::bcom::solar::gprc::Matrix3x3* intrinsics1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.intrinsics1_);
  }
  _impl_.intrinsics1_ = intrinsics1;
  if (intrinsics1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.CameraParametersStereo.intrinsics1)
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParametersStereo::release_intrinsics1() {
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = _impl_.intrinsics1_;
  _impl_.intrinsics1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParametersStereo::unsafe_arena_release_intrinsics1() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.CameraParametersStereo.intrinsics1)
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = _impl_.intrinsics1_;
  _impl_.intrinsics1_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParametersStereo::_internal_mutable_intrinsics1() {
  
  if (_impl_.intrinsics1_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x3>(GetArenaForAllocation());
    _impl_.intrinsics1_ = p;
  }
  return _impl_.intrinsics1_;
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParametersStereo::mutable_intrinsics1() {
  ::com::bcom::solar::gprc::Matrix3x3* _msg = _internal_mutable_intrinsics1();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.CameraParametersStereo.intrinsics1)
  return _msg;
}
inline void CameraParametersStereo::set_allocated_intrinsics1(::com::bcom::solar::gprc::Matrix3x3* intrinsics1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.intrinsics1_;
  }
  if (intrinsics1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(intrinsics1);
    if (message_arena != submessage_arena) {
      intrinsics1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intrinsics1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.intrinsics1_ = intrinsics1;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.CameraParametersStereo.intrinsics1)
}

// .com.bcom.solar.gprc.CameraDistortion distortion1 = 7;
inline bool CameraParametersStereo::_internal_has_distortion1() const {
  return this != internal_default_instance() && _impl_.distortion1_ != nullptr;
}
inline bool CameraParametersStereo::has_distortion1() const {
  return _internal_has_distortion1();
}
inline void CameraParametersStereo::clear_distortion1() {
  if (GetArenaForAllocation() == nullptr && _impl_.distortion1_ != nullptr) {
    delete _impl_.distortion1_;
  }
  _impl_.distortion1_ = nullptr;
}
inline const ::com::bcom::solar::gprc::CameraDistortion& CameraParametersStereo::_internal_distortion1() const {
  const ::com::bcom::solar::gprc::CameraDistortion* p = _impl_.distortion1_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::CameraDistortion&>(
      ::com::bcom::solar::gprc::_CameraDistortion_default_instance_);
}
inline const ::com::bcom::solar::gprc::CameraDistortion& CameraParametersStereo::distortion1() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParametersStereo.distortion1)
  return _internal_distortion1();
}
inline void CameraParametersStereo::unsafe_arena_set_allocated_distortion1(
    ::com::bcom::solar::gprc::CameraDistortion* distortion1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.distortion1_);
  }
  _impl_.distortion1_ = distortion1;
  if (distortion1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.CameraParametersStereo.distortion1)
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParametersStereo::release_distortion1() {
  
  ::com::bcom::solar::gprc::CameraDistortion* temp = _impl_.distortion1_;
  _impl_.distortion1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParametersStereo::unsafe_arena_release_distortion1() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.CameraParametersStereo.distortion1)
  
  ::com::bcom::solar::gprc::CameraDistortion* temp = _impl_.distortion1_;
  _impl_.distortion1_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParametersStereo::_internal_mutable_distortion1() {
  
  if (_impl_.distortion1_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::CameraDistortion>(GetArenaForAllocation());
    _impl_.distortion1_ = p;
  }
  return _impl_.distortion1_;
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParametersStereo::mutable_distortion1() {
  ::com::bcom::solar::gprc::CameraDistortion* _msg = _internal_mutable_distortion1();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.CameraParametersStereo.distortion1)
  return _msg;
}
inline void CameraParametersStereo::set_allocated_distortion1(::com::bcom::solar::gprc::CameraDistortion* distortion1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.distortion1_;
  }
  if (distortion1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(distortion1);
    if (message_arena != submessage_arena) {
      distortion1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distortion1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.distortion1_ = distortion1;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.CameraParametersStereo.distortion1)
}

// string name2 = 8;
inline void CameraParametersStereo::clear_name2() {
  _impl_.name2_.ClearToEmpty();
}
inline const std::string& CameraParametersStereo::name2() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParametersStereo.name2)
  return _internal_name2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraParametersStereo::set_name2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParametersStereo.name2)
}
inline std::string* CameraParametersStereo::mutable_name2() {
  std::string* _s = _internal_mutable_name2();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.CameraParametersStereo.name2)
  return _s;
}
inline const std::string& CameraParametersStereo::_internal_name2() const {
  return _impl_.name2_.Get();
}
inline void CameraParametersStereo::_internal_set_name2(const std::string& value) {
  
  _impl_.name2_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraParametersStereo::_internal_mutable_name2() {
  
  return _impl_.name2_.Mutable(GetArenaForAllocation());
}
inline std::string* CameraParametersStereo::release_name2() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.CameraParametersStereo.name2)
  return _impl_.name2_.Release();
}
inline void CameraParametersStereo::set_allocated_name2(std::string* name2) {
  if (name2 != nullptr) {
    
  } else {
    
  }
  _impl_.name2_.SetAllocated(name2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name2_.IsDefault()) {
    _impl_.name2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.CameraParametersStereo.name2)
}

// uint32 id2 = 9;
inline void CameraParametersStereo::clear_id2() {
  _impl_.id2_ = 0u;
}
inline uint32_t CameraParametersStereo::_internal_id2() const {
  return _impl_.id2_;
}
inline uint32_t CameraParametersStereo::id2() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParametersStereo.id2)
  return _internal_id2();
}
inline void CameraParametersStereo::_internal_set_id2(uint32_t value) {
  
  _impl_.id2_ = value;
}
inline void CameraParametersStereo::set_id2(uint32_t value) {
  _internal_set_id2(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParametersStereo.id2)
}

// .com.bcom.solar.gprc.CameraType camera_type2 = 10;
inline void CameraParametersStereo::clear_camera_type2() {
  _impl_.camera_type2_ = 0;
}
inline ::com::bcom::solar::gprc::CameraType CameraParametersStereo::_internal_camera_type2() const {
  return static_cast< ::com::bcom::solar::gprc::CameraType >(_impl_.camera_type2_);
}
inline ::com::bcom::solar::gprc::CameraType CameraParametersStereo::camera_type2() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParametersStereo.camera_type2)
  return _internal_camera_type2();
}
inline void CameraParametersStereo::_internal_set_camera_type2(::com::bcom::solar::gprc::CameraType value) {
  
  _impl_.camera_type2_ = value;
}
inline void CameraParametersStereo::set_camera_type2(::com::bcom::solar::gprc::CameraType value) {
  _internal_set_camera_type2(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParametersStereo.camera_type2)
}

// uint32 width2 = 11;
inline void CameraParametersStereo::clear_width2() {
  _impl_.width2_ = 0u;
}
inline uint32_t CameraParametersStereo::_internal_width2() const {
  return _impl_.width2_;
}
inline uint32_t CameraParametersStereo::width2() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParametersStereo.width2)
  return _internal_width2();
}
inline void CameraParametersStereo::_internal_set_width2(uint32_t value) {
  
  _impl_.width2_ = value;
}
inline void CameraParametersStereo::set_width2(uint32_t value) {
  _internal_set_width2(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParametersStereo.width2)
}

// uint32 height2 = 12;
inline void CameraParametersStereo::clear_height2() {
  _impl_.height2_ = 0u;
}
inline uint32_t CameraParametersStereo::_internal_height2() const {
  return _impl_.height2_;
}
inline uint32_t CameraParametersStereo::height2() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParametersStereo.height2)
  return _internal_height2();
}
inline void CameraParametersStereo::_internal_set_height2(uint32_t value) {
  
  _impl_.height2_ = value;
}
inline void CameraParametersStereo::set_height2(uint32_t value) {
  _internal_set_height2(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraParametersStereo.height2)
}

// .com.bcom.solar.gprc.Matrix3x3 intrinsics2 = 13;
inline bool CameraParametersStereo::_internal_has_intrinsics2() const {
  return this != internal_default_instance() && _impl_.intrinsics2_ != nullptr;
}
inline bool CameraParametersStereo::has_intrinsics2() const {
  return _internal_has_intrinsics2();
}
inline void CameraParametersStereo::clear_intrinsics2() {
  if (GetArenaForAllocation() == nullptr && _impl_.intrinsics2_ != nullptr) {
    delete _impl_.intrinsics2_;
  }
  _impl_.intrinsics2_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix3x3& CameraParametersStereo::_internal_intrinsics2() const {
  const ::com::bcom::solar::gprc::Matrix3x3* p = _impl_.intrinsics2_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix3x3&>(
      ::com::bcom::solar::gprc::_Matrix3x3_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix3x3& CameraParametersStereo::intrinsics2() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParametersStereo.intrinsics2)
  return _internal_intrinsics2();
}
inline void CameraParametersStereo::unsafe_arena_set_allocated_intrinsics2(
    ::com::bcom::solar::gprc::Matrix3x3* intrinsics2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.intrinsics2_);
  }
  _impl_.intrinsics2_ = intrinsics2;
  if (intrinsics2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.CameraParametersStereo.intrinsics2)
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParametersStereo::release_intrinsics2() {
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = _impl_.intrinsics2_;
  _impl_.intrinsics2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParametersStereo::unsafe_arena_release_intrinsics2() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.CameraParametersStereo.intrinsics2)
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = _impl_.intrinsics2_;
  _impl_.intrinsics2_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParametersStereo::_internal_mutable_intrinsics2() {
  
  if (_impl_.intrinsics2_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x3>(GetArenaForAllocation());
    _impl_.intrinsics2_ = p;
  }
  return _impl_.intrinsics2_;
}
inline ::com::bcom::solar::gprc::Matrix3x3* CameraParametersStereo::mutable_intrinsics2() {
  ::com::bcom::solar::gprc::Matrix3x3* _msg = _internal_mutable_intrinsics2();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.CameraParametersStereo.intrinsics2)
  return _msg;
}
inline void CameraParametersStereo::set_allocated_intrinsics2(::com::bcom::solar::gprc::Matrix3x3* intrinsics2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.intrinsics2_;
  }
  if (intrinsics2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(intrinsics2);
    if (message_arena != submessage_arena) {
      intrinsics2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intrinsics2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.intrinsics2_ = intrinsics2;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.CameraParametersStereo.intrinsics2)
}

// .com.bcom.solar.gprc.CameraDistortion distortion2 = 14;
inline bool CameraParametersStereo::_internal_has_distortion2() const {
  return this != internal_default_instance() && _impl_.distortion2_ != nullptr;
}
inline bool CameraParametersStereo::has_distortion2() const {
  return _internal_has_distortion2();
}
inline void CameraParametersStereo::clear_distortion2() {
  if (GetArenaForAllocation() == nullptr && _impl_.distortion2_ != nullptr) {
    delete _impl_.distortion2_;
  }
  _impl_.distortion2_ = nullptr;
}
inline const ::com::bcom::solar::gprc::CameraDistortion& CameraParametersStereo::_internal_distortion2() const {
  const ::com::bcom::solar::gprc::CameraDistortion* p = _impl_.distortion2_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::CameraDistortion&>(
      ::com::bcom::solar::gprc::_CameraDistortion_default_instance_);
}
inline const ::com::bcom::solar::gprc::CameraDistortion& CameraParametersStereo::distortion2() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraParametersStereo.distortion2)
  return _internal_distortion2();
}
inline void CameraParametersStereo::unsafe_arena_set_allocated_distortion2(
    ::com::bcom::solar::gprc::CameraDistortion* distortion2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.distortion2_);
  }
  _impl_.distortion2_ = distortion2;
  if (distortion2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.CameraParametersStereo.distortion2)
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParametersStereo::release_distortion2() {
  
  ::com::bcom::solar::gprc::CameraDistortion* temp = _impl_.distortion2_;
  _impl_.distortion2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParametersStereo::unsafe_arena_release_distortion2() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.CameraParametersStereo.distortion2)
  
  ::com::bcom::solar::gprc::CameraDistortion* temp = _impl_.distortion2_;
  _impl_.distortion2_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParametersStereo::_internal_mutable_distortion2() {
  
  if (_impl_.distortion2_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::CameraDistortion>(GetArenaForAllocation());
    _impl_.distortion2_ = p;
  }
  return _impl_.distortion2_;
}
inline ::com::bcom::solar::gprc::CameraDistortion* CameraParametersStereo::mutable_distortion2() {
  ::com::bcom::solar::gprc::CameraDistortion* _msg = _internal_mutable_distortion2();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.CameraParametersStereo.distortion2)
  return _msg;
}
inline void CameraParametersStereo::set_allocated_distortion2(::com::bcom::solar::gprc::CameraDistortion* distortion2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.distortion2_;
  }
  if (distortion2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(distortion2);
    if (message_arena != submessage_arena) {
      distortion2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distortion2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.distortion2_ = distortion2;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.CameraParametersStereo.distortion2)
}

// -------------------------------------------------------------------

// CameraDistortion

// float K_1 = 1;
inline void CameraDistortion::clear_k_1() {
  _impl_.k_1_ = 0;
}
inline float CameraDistortion::_internal_k_1() const {
  return _impl_.k_1_;
}
inline float CameraDistortion::k_1() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraDistortion.K_1)
  return _internal_k_1();
}
inline void CameraDistortion::_internal_set_k_1(float value) {
  
  _impl_.k_1_ = value;
}
inline void CameraDistortion::set_k_1(float value) {
  _internal_set_k_1(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraDistortion.K_1)
}

// float K_2 = 2;
inline void CameraDistortion::clear_k_2() {
  _impl_.k_2_ = 0;
}
inline float CameraDistortion::_internal_k_2() const {
  return _impl_.k_2_;
}
inline float CameraDistortion::k_2() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraDistortion.K_2)
  return _internal_k_2();
}
inline void CameraDistortion::_internal_set_k_2(float value) {
  
  _impl_.k_2_ = value;
}
inline void CameraDistortion::set_k_2(float value) {
  _internal_set_k_2(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraDistortion.K_2)
}

// float P_1 = 3;
inline void CameraDistortion::clear_p_1() {
  _impl_.p_1_ = 0;
}
inline float CameraDistortion::_internal_p_1() const {
  return _impl_.p_1_;
}
inline float CameraDistortion::p_1() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraDistortion.P_1)
  return _internal_p_1();
}
inline void CameraDistortion::_internal_set_p_1(float value) {
  
  _impl_.p_1_ = value;
}
inline void CameraDistortion::set_p_1(float value) {
  _internal_set_p_1(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraDistortion.P_1)
}

// float P_2 = 4;
inline void CameraDistortion::clear_p_2() {
  _impl_.p_2_ = 0;
}
inline float CameraDistortion::_internal_p_2() const {
  return _impl_.p_2_;
}
inline float CameraDistortion::p_2() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraDistortion.P_2)
  return _internal_p_2();
}
inline void CameraDistortion::_internal_set_p_2(float value) {
  
  _impl_.p_2_ = value;
}
inline void CameraDistortion::set_p_2(float value) {
  _internal_set_p_2(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraDistortion.P_2)
}

// float K_3 = 5;
inline void CameraDistortion::clear_k_3() {
  _impl_.k_3_ = 0;
}
inline float CameraDistortion::_internal_k_3() const {
  return _impl_.k_3_;
}
inline float CameraDistortion::k_3() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.CameraDistortion.K_3)
  return _internal_k_3();
}
inline void CameraDistortion::_internal_set_k_3(float value) {
  
  _impl_.k_3_ = value;
}
inline void CameraDistortion::set_k_3(float value) {
  _internal_set_k_3(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.CameraDistortion.K_3)
}

// -------------------------------------------------------------------

// RectificationParameters

// .com.bcom.solar.gprc.Matrix3x3 cam1_rotation = 1;
inline bool RectificationParameters::_internal_has_cam1_rotation() const {
  return this != internal_default_instance() && _impl_.cam1_rotation_ != nullptr;
}
inline bool RectificationParameters::has_cam1_rotation() const {
  return _internal_has_cam1_rotation();
}
inline void RectificationParameters::clear_cam1_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.cam1_rotation_ != nullptr) {
    delete _impl_.cam1_rotation_;
  }
  _impl_.cam1_rotation_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix3x3& RectificationParameters::_internal_cam1_rotation() const {
  const ::com::bcom::solar::gprc::Matrix3x3* p = _impl_.cam1_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix3x3&>(
      ::com::bcom::solar::gprc::_Matrix3x3_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix3x3& RectificationParameters::cam1_rotation() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam1_rotation)
  return _internal_cam1_rotation();
}
inline void RectificationParameters::unsafe_arena_set_allocated_cam1_rotation(
    ::com::bcom::solar::gprc::Matrix3x3* cam1_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cam1_rotation_);
  }
  _impl_.cam1_rotation_ = cam1_rotation;
  if (cam1_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam1_rotation)
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::release_cam1_rotation() {
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = _impl_.cam1_rotation_;
  _impl_.cam1_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::unsafe_arena_release_cam1_rotation() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.RectificationParameters.cam1_rotation)
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = _impl_.cam1_rotation_;
  _impl_.cam1_rotation_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::_internal_mutable_cam1_rotation() {
  
  if (_impl_.cam1_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x3>(GetArenaForAllocation());
    _impl_.cam1_rotation_ = p;
  }
  return _impl_.cam1_rotation_;
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::mutable_cam1_rotation() {
  ::com::bcom::solar::gprc::Matrix3x3* _msg = _internal_mutable_cam1_rotation();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.RectificationParameters.cam1_rotation)
  return _msg;
}
inline void RectificationParameters::set_allocated_cam1_rotation(::com::bcom::solar::gprc::Matrix3x3* cam1_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cam1_rotation_;
  }
  if (cam1_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cam1_rotation);
    if (message_arena != submessage_arena) {
      cam1_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cam1_rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cam1_rotation_ = cam1_rotation;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam1_rotation)
}

// .com.bcom.solar.gprc.Matrix3x4 cam1_projection = 2;
inline bool RectificationParameters::_internal_has_cam1_projection() const {
  return this != internal_default_instance() && _impl_.cam1_projection_ != nullptr;
}
inline bool RectificationParameters::has_cam1_projection() const {
  return _internal_has_cam1_projection();
}
inline void RectificationParameters::clear_cam1_projection() {
  if (GetArenaForAllocation() == nullptr && _impl_.cam1_projection_ != nullptr) {
    delete _impl_.cam1_projection_;
  }
  _impl_.cam1_projection_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix3x4& RectificationParameters::_internal_cam1_projection() const {
  const ::com::bcom::solar::gprc::Matrix3x4* p = _impl_.cam1_projection_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix3x4&>(
      ::com::bcom::solar::gprc::_Matrix3x4_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix3x4& RectificationParameters::cam1_projection() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam1_projection)
  return _internal_cam1_projection();
}
inline void RectificationParameters::unsafe_arena_set_allocated_cam1_projection(
    ::com::bcom::solar::gprc::Matrix3x4* cam1_projection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cam1_projection_);
  }
  _impl_.cam1_projection_ = cam1_projection;
  if (cam1_projection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam1_projection)
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::release_cam1_projection() {
  
  ::com::bcom::solar::gprc::Matrix3x4* temp = _impl_.cam1_projection_;
  _impl_.cam1_projection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::unsafe_arena_release_cam1_projection() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.RectificationParameters.cam1_projection)
  
  ::com::bcom::solar::gprc::Matrix3x4* temp = _impl_.cam1_projection_;
  _impl_.cam1_projection_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::_internal_mutable_cam1_projection() {
  
  if (_impl_.cam1_projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x4>(GetArenaForAllocation());
    _impl_.cam1_projection_ = p;
  }
  return _impl_.cam1_projection_;
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::mutable_cam1_projection() {
  ::com::bcom::solar::gprc::Matrix3x4* _msg = _internal_mutable_cam1_projection();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.RectificationParameters.cam1_projection)
  return _msg;
}
inline void RectificationParameters::set_allocated_cam1_projection(::com::bcom::solar::gprc::Matrix3x4* cam1_projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cam1_projection_;
  }
  if (cam1_projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cam1_projection);
    if (message_arena != submessage_arena) {
      cam1_projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cam1_projection, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cam1_projection_ = cam1_projection;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam1_projection)
}

// .com.bcom.solar.gprc.StereoType cam1_stereo_type = 3;
inline void RectificationParameters::clear_cam1_stereo_type() {
  _impl_.cam1_stereo_type_ = 0;
}
inline ::com::bcom::solar::gprc::StereoType RectificationParameters::_internal_cam1_stereo_type() const {
  return static_cast< ::com::bcom::solar::gprc::StereoType >(_impl_.cam1_stereo_type_);
}
inline ::com::bcom::solar::gprc::StereoType RectificationParameters::cam1_stereo_type() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam1_stereo_type)
  return _internal_cam1_stereo_type();
}
inline void RectificationParameters::_internal_set_cam1_stereo_type(::com::bcom::solar::gprc::StereoType value) {
  
  _impl_.cam1_stereo_type_ = value;
}
inline void RectificationParameters::set_cam1_stereo_type(::com::bcom::solar::gprc::StereoType value) {
  _internal_set_cam1_stereo_type(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.RectificationParameters.cam1_stereo_type)
}

// float cam1_baseline = 4;
inline void RectificationParameters::clear_cam1_baseline() {
  _impl_.cam1_baseline_ = 0;
}
inline float RectificationParameters::_internal_cam1_baseline() const {
  return _impl_.cam1_baseline_;
}
inline float RectificationParameters::cam1_baseline() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam1_baseline)
  return _internal_cam1_baseline();
}
inline void RectificationParameters::_internal_set_cam1_baseline(float value) {
  
  _impl_.cam1_baseline_ = value;
}
inline void RectificationParameters::set_cam1_baseline(float value) {
  _internal_set_cam1_baseline(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.RectificationParameters.cam1_baseline)
}

// .com.bcom.solar.gprc.Matrix3x3 cam2_rotation = 5;
inline bool RectificationParameters::_internal_has_cam2_rotation() const {
  return this != internal_default_instance() && _impl_.cam2_rotation_ != nullptr;
}
inline bool RectificationParameters::has_cam2_rotation() const {
  return _internal_has_cam2_rotation();
}
inline void RectificationParameters::clear_cam2_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.cam2_rotation_ != nullptr) {
    delete _impl_.cam2_rotation_;
  }
  _impl_.cam2_rotation_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix3x3& RectificationParameters::_internal_cam2_rotation() const {
  const ::com::bcom::solar::gprc::Matrix3x3* p = _impl_.cam2_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix3x3&>(
      ::com::bcom::solar::gprc::_Matrix3x3_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix3x3& RectificationParameters::cam2_rotation() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam2_rotation)
  return _internal_cam2_rotation();
}
inline void RectificationParameters::unsafe_arena_set_allocated_cam2_rotation(
    ::com::bcom::solar::gprc::Matrix3x3* cam2_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cam2_rotation_);
  }
  _impl_.cam2_rotation_ = cam2_rotation;
  if (cam2_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam2_rotation)
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::release_cam2_rotation() {
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = _impl_.cam2_rotation_;
  _impl_.cam2_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::unsafe_arena_release_cam2_rotation() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.RectificationParameters.cam2_rotation)
  
  ::com::bcom::solar::gprc::Matrix3x3* temp = _impl_.cam2_rotation_;
  _impl_.cam2_rotation_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::_internal_mutable_cam2_rotation() {
  
  if (_impl_.cam2_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x3>(GetArenaForAllocation());
    _impl_.cam2_rotation_ = p;
  }
  return _impl_.cam2_rotation_;
}
inline ::com::bcom::solar::gprc::Matrix3x3* RectificationParameters::mutable_cam2_rotation() {
  ::com::bcom::solar::gprc::Matrix3x3* _msg = _internal_mutable_cam2_rotation();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.RectificationParameters.cam2_rotation)
  return _msg;
}
inline void RectificationParameters::set_allocated_cam2_rotation(::com::bcom::solar::gprc::Matrix3x3* cam2_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cam2_rotation_;
  }
  if (cam2_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cam2_rotation);
    if (message_arena != submessage_arena) {
      cam2_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cam2_rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cam2_rotation_ = cam2_rotation;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam2_rotation)
}

// .com.bcom.solar.gprc.Matrix3x4 cam2_projection = 6;
inline bool RectificationParameters::_internal_has_cam2_projection() const {
  return this != internal_default_instance() && _impl_.cam2_projection_ != nullptr;
}
inline bool RectificationParameters::has_cam2_projection() const {
  return _internal_has_cam2_projection();
}
inline void RectificationParameters::clear_cam2_projection() {
  if (GetArenaForAllocation() == nullptr && _impl_.cam2_projection_ != nullptr) {
    delete _impl_.cam2_projection_;
  }
  _impl_.cam2_projection_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix3x4& RectificationParameters::_internal_cam2_projection() const {
  const ::com::bcom::solar::gprc::Matrix3x4* p = _impl_.cam2_projection_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix3x4&>(
      ::com::bcom::solar::gprc::_Matrix3x4_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix3x4& RectificationParameters::cam2_projection() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam2_projection)
  return _internal_cam2_projection();
}
inline void RectificationParameters::unsafe_arena_set_allocated_cam2_projection(
    ::com::bcom::solar::gprc::Matrix3x4* cam2_projection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cam2_projection_);
  }
  _impl_.cam2_projection_ = cam2_projection;
  if (cam2_projection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam2_projection)
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::release_cam2_projection() {
  
  ::com::bcom::solar::gprc::Matrix3x4* temp = _impl_.cam2_projection_;
  _impl_.cam2_projection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::unsafe_arena_release_cam2_projection() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.RectificationParameters.cam2_projection)
  
  ::com::bcom::solar::gprc::Matrix3x4* temp = _impl_.cam2_projection_;
  _impl_.cam2_projection_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::_internal_mutable_cam2_projection() {
  
  if (_impl_.cam2_projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix3x4>(GetArenaForAllocation());
    _impl_.cam2_projection_ = p;
  }
  return _impl_.cam2_projection_;
}
inline ::com::bcom::solar::gprc::Matrix3x4* RectificationParameters::mutable_cam2_projection() {
  ::com::bcom::solar::gprc::Matrix3x4* _msg = _internal_mutable_cam2_projection();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.RectificationParameters.cam2_projection)
  return _msg;
}
inline void RectificationParameters::set_allocated_cam2_projection(::com::bcom::solar::gprc::Matrix3x4* cam2_projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cam2_projection_;
  }
  if (cam2_projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cam2_projection);
    if (message_arena != submessage_arena) {
      cam2_projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cam2_projection, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cam2_projection_ = cam2_projection;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.RectificationParameters.cam2_projection)
}

// .com.bcom.solar.gprc.StereoType cam2_stereo_type = 7;
inline void RectificationParameters::clear_cam2_stereo_type() {
  _impl_.cam2_stereo_type_ = 0;
}
inline ::com::bcom::solar::gprc::StereoType RectificationParameters::_internal_cam2_stereo_type() const {
  return static_cast< ::com::bcom::solar::gprc::StereoType >(_impl_.cam2_stereo_type_);
}
inline ::com::bcom::solar::gprc::StereoType RectificationParameters::cam2_stereo_type() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam2_stereo_type)
  return _internal_cam2_stereo_type();
}
inline void RectificationParameters::_internal_set_cam2_stereo_type(::com::bcom::solar::gprc::StereoType value) {
  
  _impl_.cam2_stereo_type_ = value;
}
inline void RectificationParameters::set_cam2_stereo_type(::com::bcom::solar::gprc::StereoType value) {
  _internal_set_cam2_stereo_type(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.RectificationParameters.cam2_stereo_type)
}

// float cam2_baseline = 8;
inline void RectificationParameters::clear_cam2_baseline() {
  _impl_.cam2_baseline_ = 0;
}
inline float RectificationParameters::_internal_cam2_baseline() const {
  return _impl_.cam2_baseline_;
}
inline float RectificationParameters::cam2_baseline() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RectificationParameters.cam2_baseline)
  return _internal_cam2_baseline();
}
inline void RectificationParameters::_internal_set_cam2_baseline(float value) {
  
  _impl_.cam2_baseline_ = value;
}
inline void RectificationParameters::set_cam2_baseline(float value) {
  _internal_set_cam2_baseline(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.RectificationParameters.cam2_baseline)
}

// -------------------------------------------------------------------

// RelocalizationResult

// .com.bcom.solar.gprc.RelocalizationPoseStatus pose_status = 1;
inline void RelocalizationResult::clear_pose_status() {
  _impl_.pose_status_ = 0;
}
inline ::com::bcom::solar::gprc::RelocalizationPoseStatus RelocalizationResult::_internal_pose_status() const {
  return static_cast< ::com::bcom::solar::gprc::RelocalizationPoseStatus >(_impl_.pose_status_);
}
inline ::com::bcom::solar::gprc::RelocalizationPoseStatus RelocalizationResult::pose_status() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RelocalizationResult.pose_status)
  return _internal_pose_status();
}
inline void RelocalizationResult::_internal_set_pose_status(::com::bcom::solar::gprc::RelocalizationPoseStatus value) {
  
  _impl_.pose_status_ = value;
}
inline void RelocalizationResult::set_pose_status(::com::bcom::solar::gprc::RelocalizationPoseStatus value) {
  _internal_set_pose_status(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.RelocalizationResult.pose_status)
}

// .com.bcom.solar.gprc.Matrix4x4 pose = 2;
inline bool RelocalizationResult::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool RelocalizationResult::has_pose() const {
  return _internal_has_pose();
}
inline void RelocalizationResult::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix4x4& RelocalizationResult::_internal_pose() const {
  const ::com::bcom::solar::gprc::Matrix4x4* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix4x4&>(
      ::com::bcom::solar::gprc::_Matrix4x4_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix4x4& RelocalizationResult::pose() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RelocalizationResult.pose)
  return _internal_pose();
}
inline void RelocalizationResult::unsafe_arena_set_allocated_pose(
    ::com::bcom::solar::gprc::Matrix4x4* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.RelocalizationResult.pose)
}
inline ::com::bcom::solar::gprc::Matrix4x4* RelocalizationResult::release_pose() {
  
  ::com::bcom::solar::gprc::Matrix4x4* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix4x4* RelocalizationResult::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.RelocalizationResult.pose)
  
  ::com::bcom::solar::gprc::Matrix4x4* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix4x4* RelocalizationResult::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix4x4>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::com::bcom::solar::gprc::Matrix4x4* RelocalizationResult::mutable_pose() {
  ::com::bcom::solar::gprc::Matrix4x4* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.RelocalizationResult.pose)
  return _msg;
}
inline void RelocalizationResult::set_allocated_pose(::com::bcom::solar::gprc::Matrix4x4* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.RelocalizationResult.pose)
}

// float confidence = 3;
inline void RelocalizationResult::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float RelocalizationResult::_internal_confidence() const {
  return _impl_.confidence_;
}
inline float RelocalizationResult::confidence() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RelocalizationResult.confidence)
  return _internal_confidence();
}
inline void RelocalizationResult::_internal_set_confidence(float value) {
  
  _impl_.confidence_ = value;
}
inline void RelocalizationResult::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.RelocalizationResult.confidence)
}

// .com.bcom.solar.gprc.MappingStatus mapping_status = 4;
inline void RelocalizationResult::clear_mapping_status() {
  _impl_.mapping_status_ = 0;
}
inline ::com::bcom::solar::gprc::MappingStatus RelocalizationResult::_internal_mapping_status() const {
  return static_cast< ::com::bcom::solar::gprc::MappingStatus >(_impl_.mapping_status_);
}
inline ::com::bcom::solar::gprc::MappingStatus RelocalizationResult::mapping_status() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.RelocalizationResult.mapping_status)
  return _internal_mapping_status();
}
inline void RelocalizationResult::_internal_set_mapping_status(::com::bcom::solar::gprc::MappingStatus value) {
  
  _impl_.mapping_status_ = value;
}
inline void RelocalizationResult::set_mapping_status(::com::bcom::solar::gprc::MappingStatus value) {
  _internal_set_mapping_status(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.RelocalizationResult.mapping_status)
}

// -------------------------------------------------------------------

// Image

// uint32 width = 1;
inline void Image::clear_width() {
  _impl_.width_ = 0u;
}
inline uint32_t Image::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t Image::width() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Image.width)
  return _internal_width();
}
inline void Image::_internal_set_width(uint32_t value) {
  
  _impl_.width_ = value;
}
inline void Image::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Image.width)
}

// uint32 height = 2;
inline void Image::clear_height() {
  _impl_.height_ = 0u;
}
inline uint32_t Image::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t Image::height() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Image.height)
  return _internal_height();
}
inline void Image::_internal_set_height(uint32_t value) {
  
  _impl_.height_ = value;
}
inline void Image::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Image.height)
}

// bytes data = 3;
inline void Image::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Image.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Image::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Image.data)
}
inline std::string* Image::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.Image.data)
  return _s;
}
inline const std::string& Image::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Image::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.Image.data)
  return _impl_.data_.Release();
}
inline void Image::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.Image.data)
}

// .com.bcom.solar.gprc.ImageLayout layout = 4;
inline void Image::clear_layout() {
  _impl_.layout_ = 0;
}
inline ::com::bcom::solar::gprc::ImageLayout Image::_internal_layout() const {
  return static_cast< ::com::bcom::solar::gprc::ImageLayout >(_impl_.layout_);
}
inline ::com::bcom::solar::gprc::ImageLayout Image::layout() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Image.layout)
  return _internal_layout();
}
inline void Image::_internal_set_layout(::com::bcom::solar::gprc::ImageLayout value) {
  
  _impl_.layout_ = value;
}
inline void Image::set_layout(::com::bcom::solar::gprc::ImageLayout value) {
  _internal_set_layout(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Image.layout)
}

// .com.bcom.solar.gprc.ImageCompression imageCompression = 5;
inline void Image::clear_imagecompression() {
  _impl_.imagecompression_ = 0;
}
inline ::com::bcom::solar::gprc::ImageCompression Image::_internal_imagecompression() const {
  return static_cast< ::com::bcom::solar::gprc::ImageCompression >(_impl_.imagecompression_);
}
inline ::com::bcom::solar::gprc::ImageCompression Image::imagecompression() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Image.imageCompression)
  return _internal_imagecompression();
}
inline void Image::_internal_set_imagecompression(::com::bcom::solar::gprc::ImageCompression value) {
  
  _impl_.imagecompression_ = value;
}
inline void Image::set_imagecompression(::com::bcom::solar::gprc::ImageCompression value) {
  _internal_set_imagecompression(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Image.imageCompression)
}

// -------------------------------------------------------------------

// Frames

// repeated .com.bcom.solar.gprc.Frame frames = 1;
inline int Frames::_internal_frames_size() const {
  return _impl_.frames_.size();
}
inline int Frames::frames_size() const {
  return _internal_frames_size();
}
inline void Frames::clear_frames() {
  _impl_.frames_.Clear();
}
inline ::com::bcom::solar::gprc::Frame* Frames::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.Frames.frames)
  return _impl_.frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::bcom::solar::gprc::Frame >*
Frames::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:com.bcom.solar.gprc.Frames.frames)
  return &_impl_.frames_;
}
inline const ::com::bcom::solar::gprc::Frame& Frames::_internal_frames(int index) const {
  return _impl_.frames_.Get(index);
}
inline const ::com::bcom::solar::gprc::Frame& Frames::frames(int index) const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Frames.frames)
  return _internal_frames(index);
}
inline ::com::bcom::solar::gprc::Frame* Frames::_internal_add_frames() {
  return _impl_.frames_.Add();
}
inline ::com::bcom::solar::gprc::Frame* Frames::add_frames() {
  ::com::bcom::solar::gprc::Frame* _add = _internal_add_frames();
  // @@protoc_insertion_point(field_add:com.bcom.solar.gprc.Frames.frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::bcom::solar::gprc::Frame >&
Frames::frames() const {
  // @@protoc_insertion_point(field_list:com.bcom.solar.gprc.Frames.frames)
  return _impl_.frames_;
}

// -------------------------------------------------------------------

// GroundTruthFrames

// .com.bcom.solar.gprc.Frames frames = 1;
inline bool GroundTruthFrames::_internal_has_frames() const {
  return this != internal_default_instance() && _impl_.frames_ != nullptr;
}
inline bool GroundTruthFrames::has_frames() const {
  return _internal_has_frames();
}
inline void GroundTruthFrames::clear_frames() {
  if (GetArenaForAllocation() == nullptr && _impl_.frames_ != nullptr) {
    delete _impl_.frames_;
  }
  _impl_.frames_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Frames& GroundTruthFrames::_internal_frames() const {
  const ::com::bcom::solar::gprc::Frames* p = _impl_.frames_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Frames&>(
      ::com::bcom::solar::gprc::_Frames_default_instance_);
}
inline const ::com::bcom::solar::gprc::Frames& GroundTruthFrames::frames() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.GroundTruthFrames.frames)
  return _internal_frames();
}
inline void GroundTruthFrames::unsafe_arena_set_allocated_frames(
    ::com::bcom::solar::gprc::Frames* frames) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.frames_);
  }
  _impl_.frames_ = frames;
  if (frames) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.GroundTruthFrames.frames)
}
inline ::com::bcom::solar::gprc::Frames* GroundTruthFrames::release_frames() {
  
  ::com::bcom::solar::gprc::Frames* temp = _impl_.frames_;
  _impl_.frames_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::Frames* GroundTruthFrames::unsafe_arena_release_frames() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.GroundTruthFrames.frames)
  
  ::com::bcom::solar::gprc::Frames* temp = _impl_.frames_;
  _impl_.frames_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Frames* GroundTruthFrames::_internal_mutable_frames() {
  
  if (_impl_.frames_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Frames>(GetArenaForAllocation());
    _impl_.frames_ = p;
  }
  return _impl_.frames_;
}
inline ::com::bcom::solar::gprc::Frames* GroundTruthFrames::mutable_frames() {
  ::com::bcom::solar::gprc::Frames* _msg = _internal_mutable_frames();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.GroundTruthFrames.frames)
  return _msg;
}
inline void GroundTruthFrames::set_allocated_frames(::com::bcom::solar::gprc::Frames* frames) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.frames_;
  }
  if (frames) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(frames);
    if (message_arena != submessage_arena) {
      frames = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frames, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.frames_ = frames;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.GroundTruthFrames.frames)
}

// .com.bcom.solar.gprc.Matrix4x4 world_transorm = 2;
inline bool GroundTruthFrames::_internal_has_world_transorm() const {
  return this != internal_default_instance() && _impl_.world_transorm_ != nullptr;
}
inline bool GroundTruthFrames::has_world_transorm() const {
  return _internal_has_world_transorm();
}
inline void GroundTruthFrames::clear_world_transorm() {
  if (GetArenaForAllocation() == nullptr && _impl_.world_transorm_ != nullptr) {
    delete _impl_.world_transorm_;
  }
  _impl_.world_transorm_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix4x4& GroundTruthFrames::_internal_world_transorm() const {
  const ::com::bcom::solar::gprc::Matrix4x4* p = _impl_.world_transorm_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix4x4&>(
      ::com::bcom::solar::gprc::_Matrix4x4_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix4x4& GroundTruthFrames::world_transorm() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.GroundTruthFrames.world_transorm)
  return _internal_world_transorm();
}
inline void GroundTruthFrames::unsafe_arena_set_allocated_world_transorm(
    ::com::bcom::solar::gprc::Matrix4x4* world_transorm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.world_transorm_);
  }
  _impl_.world_transorm_ = world_transorm;
  if (world_transorm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.GroundTruthFrames.world_transorm)
}
inline ::com::bcom::solar::gprc::Matrix4x4* GroundTruthFrames::release_world_transorm() {
  
  ::com::bcom::solar::gprc::Matrix4x4* temp = _impl_.world_transorm_;
  _impl_.world_transorm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix4x4* GroundTruthFrames::unsafe_arena_release_world_transorm() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.GroundTruthFrames.world_transorm)
  
  ::com::bcom::solar::gprc::Matrix4x4* temp = _impl_.world_transorm_;
  _impl_.world_transorm_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix4x4* GroundTruthFrames::_internal_mutable_world_transorm() {
  
  if (_impl_.world_transorm_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix4x4>(GetArenaForAllocation());
    _impl_.world_transorm_ = p;
  }
  return _impl_.world_transorm_;
}
inline ::com::bcom::solar::gprc::Matrix4x4* GroundTruthFrames::mutable_world_transorm() {
  ::com::bcom::solar::gprc::Matrix4x4* _msg = _internal_mutable_world_transorm();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.GroundTruthFrames.world_transorm)
  return _msg;
}
inline void GroundTruthFrames::set_allocated_world_transorm(::com::bcom::solar::gprc::Matrix4x4* world_transorm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.world_transorm_;
  }
  if (world_transorm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(world_transorm);
    if (message_arena != submessage_arena) {
      world_transorm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_transorm, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.world_transorm_ = world_transorm;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.GroundTruthFrames.world_transorm)
}

// bool fixed_pose = 3;
inline void GroundTruthFrames::clear_fixed_pose() {
  _impl_.fixed_pose_ = false;
}
inline bool GroundTruthFrames::_internal_fixed_pose() const {
  return _impl_.fixed_pose_;
}
inline bool GroundTruthFrames::fixed_pose() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.GroundTruthFrames.fixed_pose)
  return _internal_fixed_pose();
}
inline void GroundTruthFrames::_internal_set_fixed_pose(bool value) {
  
  _impl_.fixed_pose_ = value;
}
inline void GroundTruthFrames::set_fixed_pose(bool value) {
  _internal_set_fixed_pose(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.GroundTruthFrames.fixed_pose)
}

// -------------------------------------------------------------------

// Frame

// int32 sensor_id = 1;
inline void Frame::clear_sensor_id() {
  _impl_.sensor_id_ = 0;
}
inline int32_t Frame::_internal_sensor_id() const {
  return _impl_.sensor_id_;
}
inline int32_t Frame::sensor_id() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Frame.sensor_id)
  return _internal_sensor_id();
}
inline void Frame::_internal_set_sensor_id(int32_t value) {
  
  _impl_.sensor_id_ = value;
}
inline void Frame::set_sensor_id(int32_t value) {
  _internal_set_sensor_id(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Frame.sensor_id)
}

// .com.bcom.solar.gprc.Image image = 2;
inline bool Frame::_internal_has_image() const {
  return this != internal_default_instance() && _impl_.image_ != nullptr;
}
inline bool Frame::has_image() const {
  return _internal_has_image();
}
inline void Frame::clear_image() {
  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Image& Frame::_internal_image() const {
  const ::com::bcom::solar::gprc::Image* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Image&>(
      ::com::bcom::solar::gprc::_Image_default_instance_);
}
inline const ::com::bcom::solar::gprc::Image& Frame::image() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Frame.image)
  return _internal_image();
}
inline void Frame::unsafe_arena_set_allocated_image(
    ::com::bcom::solar::gprc::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.Frame.image)
}
inline ::com::bcom::solar::gprc::Image* Frame::release_image() {
  
  ::com::bcom::solar::gprc::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::Image* Frame::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.Frame.image)
  
  ::com::bcom::solar::gprc::Image* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Image* Frame::_internal_mutable_image() {
  
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Image>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::com::bcom::solar::gprc::Image* Frame::mutable_image() {
  ::com::bcom::solar::gprc::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.Frame.image)
  return _msg;
}
inline void Frame::set_allocated_image(::com::bcom::solar::gprc::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.Frame.image)
}

// uint64 timestamp = 3;
inline void Frame::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t Frame::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t Frame::timestamp() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Frame.timestamp)
  return _internal_timestamp();
}
inline void Frame::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void Frame::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Frame.timestamp)
}

// .com.bcom.solar.gprc.Matrix4x4 pose = 4;
inline bool Frame::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool Frame::has_pose() const {
  return _internal_has_pose();
}
inline void Frame::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
inline const ::com::bcom::solar::gprc::Matrix4x4& Frame::_internal_pose() const {
  const ::com::bcom::solar::gprc::Matrix4x4* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::bcom::solar::gprc::Matrix4x4&>(
      ::com::bcom::solar::gprc::_Matrix4x4_default_instance_);
}
inline const ::com::bcom::solar::gprc::Matrix4x4& Frame::pose() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Frame.pose)
  return _internal_pose();
}
inline void Frame::unsafe_arena_set_allocated_pose(
    ::com::bcom::solar::gprc::Matrix4x4* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bcom.solar.gprc.Frame.pose)
}
inline ::com::bcom::solar::gprc::Matrix4x4* Frame::release_pose() {
  
  ::com::bcom::solar::gprc::Matrix4x4* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix4x4* Frame::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:com.bcom.solar.gprc.Frame.pose)
  
  ::com::bcom::solar::gprc::Matrix4x4* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::com::bcom::solar::gprc::Matrix4x4* Frame::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bcom::solar::gprc::Matrix4x4>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::com::bcom::solar::gprc::Matrix4x4* Frame::mutable_pose() {
  ::com::bcom::solar::gprc::Matrix4x4* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:com.bcom.solar.gprc.Frame.pose)
  return _msg;
}
inline void Frame::set_allocated_pose(::com::bcom::solar::gprc::Matrix4x4* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:com.bcom.solar.gprc.Frame.pose)
}

// -------------------------------------------------------------------

// Matrix4x4

// float m11 = 1;
inline void Matrix4x4::clear_m11() {
  _impl_.m11_ = 0;
}
inline float Matrix4x4::_internal_m11() const {
  return _impl_.m11_;
}
inline float Matrix4x4::m11() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m11)
  return _internal_m11();
}
inline void Matrix4x4::_internal_set_m11(float value) {
  
  _impl_.m11_ = value;
}
inline void Matrix4x4::set_m11(float value) {
  _internal_set_m11(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m11)
}

// float m12 = 2;
inline void Matrix4x4::clear_m12() {
  _impl_.m12_ = 0;
}
inline float Matrix4x4::_internal_m12() const {
  return _impl_.m12_;
}
inline float Matrix4x4::m12() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m12)
  return _internal_m12();
}
inline void Matrix4x4::_internal_set_m12(float value) {
  
  _impl_.m12_ = value;
}
inline void Matrix4x4::set_m12(float value) {
  _internal_set_m12(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m12)
}

// float m13 = 3;
inline void Matrix4x4::clear_m13() {
  _impl_.m13_ = 0;
}
inline float Matrix4x4::_internal_m13() const {
  return _impl_.m13_;
}
inline float Matrix4x4::m13() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m13)
  return _internal_m13();
}
inline void Matrix4x4::_internal_set_m13(float value) {
  
  _impl_.m13_ = value;
}
inline void Matrix4x4::set_m13(float value) {
  _internal_set_m13(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m13)
}

// float m14 = 4;
inline void Matrix4x4::clear_m14() {
  _impl_.m14_ = 0;
}
inline float Matrix4x4::_internal_m14() const {
  return _impl_.m14_;
}
inline float Matrix4x4::m14() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m14)
  return _internal_m14();
}
inline void Matrix4x4::_internal_set_m14(float value) {
  
  _impl_.m14_ = value;
}
inline void Matrix4x4::set_m14(float value) {
  _internal_set_m14(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m14)
}

// float m21 = 5;
inline void Matrix4x4::clear_m21() {
  _impl_.m21_ = 0;
}
inline float Matrix4x4::_internal_m21() const {
  return _impl_.m21_;
}
inline float Matrix4x4::m21() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m21)
  return _internal_m21();
}
inline void Matrix4x4::_internal_set_m21(float value) {
  
  _impl_.m21_ = value;
}
inline void Matrix4x4::set_m21(float value) {
  _internal_set_m21(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m21)
}

// float m22 = 6;
inline void Matrix4x4::clear_m22() {
  _impl_.m22_ = 0;
}
inline float Matrix4x4::_internal_m22() const {
  return _impl_.m22_;
}
inline float Matrix4x4::m22() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m22)
  return _internal_m22();
}
inline void Matrix4x4::_internal_set_m22(float value) {
  
  _impl_.m22_ = value;
}
inline void Matrix4x4::set_m22(float value) {
  _internal_set_m22(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m22)
}

// float m23 = 7;
inline void Matrix4x4::clear_m23() {
  _impl_.m23_ = 0;
}
inline float Matrix4x4::_internal_m23() const {
  return _impl_.m23_;
}
inline float Matrix4x4::m23() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m23)
  return _internal_m23();
}
inline void Matrix4x4::_internal_set_m23(float value) {
  
  _impl_.m23_ = value;
}
inline void Matrix4x4::set_m23(float value) {
  _internal_set_m23(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m23)
}

// float m24 = 8;
inline void Matrix4x4::clear_m24() {
  _impl_.m24_ = 0;
}
inline float Matrix4x4::_internal_m24() const {
  return _impl_.m24_;
}
inline float Matrix4x4::m24() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m24)
  return _internal_m24();
}
inline void Matrix4x4::_internal_set_m24(float value) {
  
  _impl_.m24_ = value;
}
inline void Matrix4x4::set_m24(float value) {
  _internal_set_m24(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m24)
}

// float m31 = 9;
inline void Matrix4x4::clear_m31() {
  _impl_.m31_ = 0;
}
inline float Matrix4x4::_internal_m31() const {
  return _impl_.m31_;
}
inline float Matrix4x4::m31() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m31)
  return _internal_m31();
}
inline void Matrix4x4::_internal_set_m31(float value) {
  
  _impl_.m31_ = value;
}
inline void Matrix4x4::set_m31(float value) {
  _internal_set_m31(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m31)
}

// float m32 = 10;
inline void Matrix4x4::clear_m32() {
  _impl_.m32_ = 0;
}
inline float Matrix4x4::_internal_m32() const {
  return _impl_.m32_;
}
inline float Matrix4x4::m32() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m32)
  return _internal_m32();
}
inline void Matrix4x4::_internal_set_m32(float value) {
  
  _impl_.m32_ = value;
}
inline void Matrix4x4::set_m32(float value) {
  _internal_set_m32(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m32)
}

// float m33 = 11;
inline void Matrix4x4::clear_m33() {
  _impl_.m33_ = 0;
}
inline float Matrix4x4::_internal_m33() const {
  return _impl_.m33_;
}
inline float Matrix4x4::m33() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m33)
  return _internal_m33();
}
inline void Matrix4x4::_internal_set_m33(float value) {
  
  _impl_.m33_ = value;
}
inline void Matrix4x4::set_m33(float value) {
  _internal_set_m33(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m33)
}

// float m34 = 12;
inline void Matrix4x4::clear_m34() {
  _impl_.m34_ = 0;
}
inline float Matrix4x4::_internal_m34() const {
  return _impl_.m34_;
}
inline float Matrix4x4::m34() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m34)
  return _internal_m34();
}
inline void Matrix4x4::_internal_set_m34(float value) {
  
  _impl_.m34_ = value;
}
inline void Matrix4x4::set_m34(float value) {
  _internal_set_m34(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m34)
}

// float m41 = 13;
inline void Matrix4x4::clear_m41() {
  _impl_.m41_ = 0;
}
inline float Matrix4x4::_internal_m41() const {
  return _impl_.m41_;
}
inline float Matrix4x4::m41() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m41)
  return _internal_m41();
}
inline void Matrix4x4::_internal_set_m41(float value) {
  
  _impl_.m41_ = value;
}
inline void Matrix4x4::set_m41(float value) {
  _internal_set_m41(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m41)
}

// float m42 = 14;
inline void Matrix4x4::clear_m42() {
  _impl_.m42_ = 0;
}
inline float Matrix4x4::_internal_m42() const {
  return _impl_.m42_;
}
inline float Matrix4x4::m42() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m42)
  return _internal_m42();
}
inline void Matrix4x4::_internal_set_m42(float value) {
  
  _impl_.m42_ = value;
}
inline void Matrix4x4::set_m42(float value) {
  _internal_set_m42(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m42)
}

// float m43 = 15;
inline void Matrix4x4::clear_m43() {
  _impl_.m43_ = 0;
}
inline float Matrix4x4::_internal_m43() const {
  return _impl_.m43_;
}
inline float Matrix4x4::m43() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m43)
  return _internal_m43();
}
inline void Matrix4x4::_internal_set_m43(float value) {
  
  _impl_.m43_ = value;
}
inline void Matrix4x4::set_m43(float value) {
  _internal_set_m43(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m43)
}

// float m44 = 16;
inline void Matrix4x4::clear_m44() {
  _impl_.m44_ = 0;
}
inline float Matrix4x4::_internal_m44() const {
  return _impl_.m44_;
}
inline float Matrix4x4::m44() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix4x4.m44)
  return _internal_m44();
}
inline void Matrix4x4::_internal_set_m44(float value) {
  
  _impl_.m44_ = value;
}
inline void Matrix4x4::set_m44(float value) {
  _internal_set_m44(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix4x4.m44)
}

// -------------------------------------------------------------------

// Matrix3x3

// float m11 = 1;
inline void Matrix3x3::clear_m11() {
  _impl_.m11_ = 0;
}
inline float Matrix3x3::_internal_m11() const {
  return _impl_.m11_;
}
inline float Matrix3x3::m11() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m11)
  return _internal_m11();
}
inline void Matrix3x3::_internal_set_m11(float value) {
  
  _impl_.m11_ = value;
}
inline void Matrix3x3::set_m11(float value) {
  _internal_set_m11(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m11)
}

// float m12 = 2;
inline void Matrix3x3::clear_m12() {
  _impl_.m12_ = 0;
}
inline float Matrix3x3::_internal_m12() const {
  return _impl_.m12_;
}
inline float Matrix3x3::m12() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m12)
  return _internal_m12();
}
inline void Matrix3x3::_internal_set_m12(float value) {
  
  _impl_.m12_ = value;
}
inline void Matrix3x3::set_m12(float value) {
  _internal_set_m12(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m12)
}

// float m13 = 3;
inline void Matrix3x3::clear_m13() {
  _impl_.m13_ = 0;
}
inline float Matrix3x3::_internal_m13() const {
  return _impl_.m13_;
}
inline float Matrix3x3::m13() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m13)
  return _internal_m13();
}
inline void Matrix3x3::_internal_set_m13(float value) {
  
  _impl_.m13_ = value;
}
inline void Matrix3x3::set_m13(float value) {
  _internal_set_m13(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m13)
}

// float m21 = 4;
inline void Matrix3x3::clear_m21() {
  _impl_.m21_ = 0;
}
inline float Matrix3x3::_internal_m21() const {
  return _impl_.m21_;
}
inline float Matrix3x3::m21() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m21)
  return _internal_m21();
}
inline void Matrix3x3::_internal_set_m21(float value) {
  
  _impl_.m21_ = value;
}
inline void Matrix3x3::set_m21(float value) {
  _internal_set_m21(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m21)
}

// float m22 = 5;
inline void Matrix3x3::clear_m22() {
  _impl_.m22_ = 0;
}
inline float Matrix3x3::_internal_m22() const {
  return _impl_.m22_;
}
inline float Matrix3x3::m22() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m22)
  return _internal_m22();
}
inline void Matrix3x3::_internal_set_m22(float value) {
  
  _impl_.m22_ = value;
}
inline void Matrix3x3::set_m22(float value) {
  _internal_set_m22(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m22)
}

// float m23 = 6;
inline void Matrix3x3::clear_m23() {
  _impl_.m23_ = 0;
}
inline float Matrix3x3::_internal_m23() const {
  return _impl_.m23_;
}
inline float Matrix3x3::m23() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m23)
  return _internal_m23();
}
inline void Matrix3x3::_internal_set_m23(float value) {
  
  _impl_.m23_ = value;
}
inline void Matrix3x3::set_m23(float value) {
  _internal_set_m23(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m23)
}

// float m31 = 7;
inline void Matrix3x3::clear_m31() {
  _impl_.m31_ = 0;
}
inline float Matrix3x3::_internal_m31() const {
  return _impl_.m31_;
}
inline float Matrix3x3::m31() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m31)
  return _internal_m31();
}
inline void Matrix3x3::_internal_set_m31(float value) {
  
  _impl_.m31_ = value;
}
inline void Matrix3x3::set_m31(float value) {
  _internal_set_m31(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m31)
}

// float m32 = 8;
inline void Matrix3x3::clear_m32() {
  _impl_.m32_ = 0;
}
inline float Matrix3x3::_internal_m32() const {
  return _impl_.m32_;
}
inline float Matrix3x3::m32() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m32)
  return _internal_m32();
}
inline void Matrix3x3::_internal_set_m32(float value) {
  
  _impl_.m32_ = value;
}
inline void Matrix3x3::set_m32(float value) {
  _internal_set_m32(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m32)
}

// float m33 = 9;
inline void Matrix3x3::clear_m33() {
  _impl_.m33_ = 0;
}
inline float Matrix3x3::_internal_m33() const {
  return _impl_.m33_;
}
inline float Matrix3x3::m33() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x3.m33)
  return _internal_m33();
}
inline void Matrix3x3::_internal_set_m33(float value) {
  
  _impl_.m33_ = value;
}
inline void Matrix3x3::set_m33(float value) {
  _internal_set_m33(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x3.m33)
}

// -------------------------------------------------------------------

// Matrix3x4

// float m11 = 1;
inline void Matrix3x4::clear_m11() {
  _impl_.m11_ = 0;
}
inline float Matrix3x4::_internal_m11() const {
  return _impl_.m11_;
}
inline float Matrix3x4::m11() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m11)
  return _internal_m11();
}
inline void Matrix3x4::_internal_set_m11(float value) {
  
  _impl_.m11_ = value;
}
inline void Matrix3x4::set_m11(float value) {
  _internal_set_m11(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m11)
}

// float m12 = 2;
inline void Matrix3x4::clear_m12() {
  _impl_.m12_ = 0;
}
inline float Matrix3x4::_internal_m12() const {
  return _impl_.m12_;
}
inline float Matrix3x4::m12() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m12)
  return _internal_m12();
}
inline void Matrix3x4::_internal_set_m12(float value) {
  
  _impl_.m12_ = value;
}
inline void Matrix3x4::set_m12(float value) {
  _internal_set_m12(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m12)
}

// float m13 = 3;
inline void Matrix3x4::clear_m13() {
  _impl_.m13_ = 0;
}
inline float Matrix3x4::_internal_m13() const {
  return _impl_.m13_;
}
inline float Matrix3x4::m13() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m13)
  return _internal_m13();
}
inline void Matrix3x4::_internal_set_m13(float value) {
  
  _impl_.m13_ = value;
}
inline void Matrix3x4::set_m13(float value) {
  _internal_set_m13(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m13)
}

// float m14 = 4;
inline void Matrix3x4::clear_m14() {
  _impl_.m14_ = 0;
}
inline float Matrix3x4::_internal_m14() const {
  return _impl_.m14_;
}
inline float Matrix3x4::m14() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m14)
  return _internal_m14();
}
inline void Matrix3x4::_internal_set_m14(float value) {
  
  _impl_.m14_ = value;
}
inline void Matrix3x4::set_m14(float value) {
  _internal_set_m14(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m14)
}

// float m21 = 5;
inline void Matrix3x4::clear_m21() {
  _impl_.m21_ = 0;
}
inline float Matrix3x4::_internal_m21() const {
  return _impl_.m21_;
}
inline float Matrix3x4::m21() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m21)
  return _internal_m21();
}
inline void Matrix3x4::_internal_set_m21(float value) {
  
  _impl_.m21_ = value;
}
inline void Matrix3x4::set_m21(float value) {
  _internal_set_m21(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m21)
}

// float m22 = 6;
inline void Matrix3x4::clear_m22() {
  _impl_.m22_ = 0;
}
inline float Matrix3x4::_internal_m22() const {
  return _impl_.m22_;
}
inline float Matrix3x4::m22() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m22)
  return _internal_m22();
}
inline void Matrix3x4::_internal_set_m22(float value) {
  
  _impl_.m22_ = value;
}
inline void Matrix3x4::set_m22(float value) {
  _internal_set_m22(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m22)
}

// float m23 = 7;
inline void Matrix3x4::clear_m23() {
  _impl_.m23_ = 0;
}
inline float Matrix3x4::_internal_m23() const {
  return _impl_.m23_;
}
inline float Matrix3x4::m23() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m23)
  return _internal_m23();
}
inline void Matrix3x4::_internal_set_m23(float value) {
  
  _impl_.m23_ = value;
}
inline void Matrix3x4::set_m23(float value) {
  _internal_set_m23(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m23)
}

// float m24 = 8;
inline void Matrix3x4::clear_m24() {
  _impl_.m24_ = 0;
}
inline float Matrix3x4::_internal_m24() const {
  return _impl_.m24_;
}
inline float Matrix3x4::m24() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m24)
  return _internal_m24();
}
inline void Matrix3x4::_internal_set_m24(float value) {
  
  _impl_.m24_ = value;
}
inline void Matrix3x4::set_m24(float value) {
  _internal_set_m24(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m24)
}

// float m31 = 9;
inline void Matrix3x4::clear_m31() {
  _impl_.m31_ = 0;
}
inline float Matrix3x4::_internal_m31() const {
  return _impl_.m31_;
}
inline float Matrix3x4::m31() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m31)
  return _internal_m31();
}
inline void Matrix3x4::_internal_set_m31(float value) {
  
  _impl_.m31_ = value;
}
inline void Matrix3x4::set_m31(float value) {
  _internal_set_m31(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m31)
}

// float m32 = 10;
inline void Matrix3x4::clear_m32() {
  _impl_.m32_ = 0;
}
inline float Matrix3x4::_internal_m32() const {
  return _impl_.m32_;
}
inline float Matrix3x4::m32() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m32)
  return _internal_m32();
}
inline void Matrix3x4::_internal_set_m32(float value) {
  
  _impl_.m32_ = value;
}
inline void Matrix3x4::set_m32(float value) {
  _internal_set_m32(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m32)
}

// float m33 = 11;
inline void Matrix3x4::clear_m33() {
  _impl_.m33_ = 0;
}
inline float Matrix3x4::_internal_m33() const {
  return _impl_.m33_;
}
inline float Matrix3x4::m33() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m33)
  return _internal_m33();
}
inline void Matrix3x4::_internal_set_m33(float value) {
  
  _impl_.m33_ = value;
}
inline void Matrix3x4::set_m33(float value) {
  _internal_set_m33(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m33)
}

// float m34 = 12;
inline void Matrix3x4::clear_m34() {
  _impl_.m34_ = 0;
}
inline float Matrix3x4::_internal_m34() const {
  return _impl_.m34_;
}
inline float Matrix3x4::m34() const {
  // @@protoc_insertion_point(field_get:com.bcom.solar.gprc.Matrix3x4.m34)
  return _internal_m34();
}
inline void Matrix3x4::_internal_set_m34(float value) {
  
  _impl_.m34_ = value;
}
inline void Matrix3x4::set_m34(float value) {
  _internal_set_m34(value);
  // @@protoc_insertion_point(field_set:com.bcom.solar.gprc.Matrix3x4.m34)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gprc
}  // namespace solar
}  // namespace bcom
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::bcom::solar::gprc::PipelineMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::bcom::solar::gprc::PipelineMode>() {
  return ::com::bcom::solar::gprc::PipelineMode_descriptor();
}
template <> struct is_proto_enum< ::com::bcom::solar::gprc::CameraType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::bcom::solar::gprc::CameraType>() {
  return ::com::bcom::solar::gprc::CameraType_descriptor();
}
template <> struct is_proto_enum< ::com::bcom::solar::gprc::StereoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::bcom::solar::gprc::StereoType>() {
  return ::com::bcom::solar::gprc::StereoType_descriptor();
}
template <> struct is_proto_enum< ::com::bcom::solar::gprc::RelocalizationPoseStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::bcom::solar::gprc::RelocalizationPoseStatus>() {
  return ::com::bcom::solar::gprc::RelocalizationPoseStatus_descriptor();
}
template <> struct is_proto_enum< ::com::bcom::solar::gprc::MappingStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::bcom::solar::gprc::MappingStatus>() {
  return ::com::bcom::solar::gprc::MappingStatus_descriptor();
}
template <> struct is_proto_enum< ::com::bcom::solar::gprc::ImageLayout> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::bcom::solar::gprc::ImageLayout>() {
  return ::com::bcom::solar::gprc::ImageLayout_descriptor();
}
template <> struct is_proto_enum< ::com::bcom::solar::gprc::ImageCompression> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::bcom::solar::gprc::ImageCompression>() {
  return ::com::bcom::solar::gprc::ImageCompression_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_solar_5fmapping_5fand_5frelocalization_5fproxy_2eproto
